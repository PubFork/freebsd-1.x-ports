#!/bin/sh
# Guess values for system-dependent variables and create Makefiles.
# Generated automatically using autoconf version 1.7.1 
# Copyright (C) 1991, 1992, 1993 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

# Usage: configure [--srcdir=DIR] [--host=HOST] [--gas] [--nfp]
#        [--prefix=PREFIX] [--exec-prefix=PREFIX] [--with-PACKAGE[=VALUE]]
# Ignores all args except --srcdir, --prefix, --exec-prefix, and
# --with-PACKAGE[=VALUE] unless this script has special code to handle it.

for arg
do
  # Handle --exec-prefix with a space before the argument.
  if test x$next_exec_prefix = xyes; then exec_prefix=$arg; next_exec_prefix=
  # Handle --host with a space before the argument.
  elif test x$next_host = xyes; then next_host=
  # Handle --prefix with a space before the argument.
  elif test x$next_prefix = xyes; then prefix=$arg; next_prefix=
  # Handle --srcdir with a space before the argument.
  elif test x$next_srcdir = xyes; then srcdir=$arg; next_srcdir=
  else
    case $arg in
     # For backward compatibility, recognize -exec-prefix and --exec_prefix.
     -exec-prefix=* | --exec_prefix=* | --exec-prefix=* | --exec-prefi=* | --exec-pref=* | --exec-pre=* | --exec-pr=* | --exec-p=* | --exec-=* | --exec=* | --exe=* | --ex=* | --e=*)
	exec_prefix=`echo $arg | sed 's/[-a-z_]*=//'` ;;
     -exec-prefix | --exec_prefix | --exec-prefix | --exec-prefi | --exec-pref | --exec-pre | --exec-pr | --exec-p | --exec- | --exec | --exe | --ex | --e)
	next_exec_prefix=yes ;;

     -gas | --gas | --ga | --g) ;;

     -host=* | --host=* | --hos=* | --ho=* | --h=*) ;;
     -host | --host | --hos | --ho | --h)
	next_host=yes ;;

     -nfp | --nfp | --nf) ;;

     -prefix=* | --prefix=* | --prefi=* | --pref=* | --pre=* | --pr=* | --p=*)
	prefix=`echo $arg | sed 's/[-a-z_]*=//'` ;;
     -prefix | --prefix | --prefi | --pref | --pre | --pr | --p)
	next_prefix=yes ;;

     -srcdir=* | --srcdir=* | --srcdi=* | --srcd=* | --src=* | --sr=* | --s=*)
	srcdir=`echo $arg | sed 's/[-a-z_]*=//'` ;;
     -srcdir | --srcdir | --srcdi | --srcd | --src | --sr | --s)
	next_srcdir=yes ;;

     -with-* | --with-*)
       package=`echo $arg|sed -e 's/-*with-//' -e 's/=.*//'`
       # Reject names that aren't valid shell variable names.
       if test -n "`echo $package| sed 's/[-a-zA-Z0-9_]//g'`"; then
         echo "configure: $package: invalid package name" >&2; exit 1
       fi
       package=`echo $package| sed 's/-/_/g'`
       case "$arg" in
         *=*) val="`echo $arg|sed 's/[^=]*=//'`" ;;
         *) val=1 ;;
       esac
       eval "with_$package='$val'" ;;

     -v | -verbose | --verbose | --verbos | --verbo | --verb | --ver | --ve | --v)
       verbose=yes ;;

     *) ;;
    esac
  fi
done

trap 'rm -fr conftest* confdefs* core; exit 1' 1 3 15
trap 'rm -f confdefs*' 0

# NLS nuisances.
# These must not be set unconditionally because not all systems understand
# e.g. LANG=C (notably SCO).
if test "${LC_ALL+set}" = 'set' ; then LC_ALL=C; export LC_ALL; fi
if test "${LANG+set}"   = 'set' ; then LANG=C;   export LANG;   fi

rm -f conftest* confdefs.h
# AIX cpp loses on an empty file, so make sure it contains at least a newline.
echo > confdefs.h
compile='${CC-cc} $CFLAGS conftest.c -o conftest $LIBS >/dev/null 2>&1'

# A filename unique to this package, relative to the directory that
# configure is in, which we can look for to find out if srcdir is correct.
unique_file=kpathsea/paths.h.in

# Find the source files, if location was not specified.
if test -z "$srcdir"; then
  srcdirdefaulted=yes
  # Try the directory containing this script, then `..'.
  prog=$0
  confdir=`echo $prog|sed 's%/[^/][^/]*$%%'`
  test "X$confdir" = "X$prog" && confdir=.
  srcdir=$confdir
  if test ! -r $srcdir/$unique_file; then
    srcdir=..
  fi
fi
if test ! -r $srcdir/$unique_file; then
  if test x$srcdirdefaulted = xyes; then
    echo "configure: Can not find sources in \`${confdir}' or \`..'." 1>&2
  else
    echo "configure: Can not find sources in \`${srcdir}'." 1>&2
  fi
  exit 1
fi
# Preserve a srcdir of `.' to avoid automounter screwups with pwd.
# But we can't avoid them for `..', to make subdirectories work.
case $srcdir in
  .|/*|~*) ;;
  *) srcdir=`cd $srcdir; pwd` ;; # Make relative path absolute.
esac


# Save the original args to write them into config.status later.
configure_args="$*"


if test -z "$prefix"
then
  echo checking for tex to derive installation directory prefix
  IFS="${IFS= 	}"; saveifs="$IFS"; IFS="$IFS:"
  for dir in $PATH; do
    test -z "$dir" && dir=.
    if test $dir != . && test -f $dir/tex; then
      # Not all systems have dirname.
      prefix=`echo $dir|sed 's%/[^/][^/]*$%%'`
      break
    fi
  done
  IFS="$saveifs"
  echo "	chose installation directory prefix ${prefix}"
fi


# Use this shell to run the configure scripts.
: ${CONFIG_SHELL=/bin/sh}

# Set to `true' (or `false', or whatever) to omit messages.
verbose=echo

# Take bdpi from the `default_bdpi' variable in ./Makefile.in.
bdpi=`sed -n '/^default_bdpi *= *\([0-9]*\).*$/s//\1/p' Makefile.in`
default_texsizes=$(printf "define m(x,y) {\nreturn (x * (1.2 ^ y))\n}\nprint \
    ${bdpi},\":\",\
    m(${bdpi},1),\":\",\
    m(${bdpi},2),\":\",\
    m(${bdpi},3),\":\",\
    m(${bdpi},4),\":\",\
    m(${bdpi},5),\"\n\"\n" | 
    bc)


# Take the subdir list from the `programs' variable in ./Makefile.in.
: ${programs="`sed -n -e 's/programs *= *//p' $srcdir/Makefile.in`"}
if test -z "$programs"; then
  echo "No assignment to programs variable in $srcdir/Makefile.in?!"
  exit 1
fi

# How to get to subdirectories differs with srcdir.
if test $srcdir = .; then
  backup=../
else
  backup=
fi

# Run configure in each program directory that exists, passing all our args.
# The echo here makes Ultrix sh break up $programs into its separate
# words. Otherwise it doesn't.
for d in `echo $programs`; do
  test -z "$d" && continue
  if test -d $srcdir/$d; then
    # Remember the first program directory we find.
    test -z "$first_program" && first_program=$d
    
    $verbose "Running configure in $d..."
#    test -d $d || mkdir $d # in case srcdir != .
#    (cd $d && $CONFIG_SHELL $srcdir/$backup$d/configure "$@") || exit 1
    if test "$srcdir" = .; then
      (cd $d && $CONFIG_SHELL configure "$@")
    else
      test -d $d || mkdir $d
      (cd $d && $CONFIG_SHELL $srcdir/$d/configure "$@")
    fi
  fi
done

# Copy from the first program subdir to kpathsea.
# Generate only a top-level Makefile and c-auto.h in kpathsea, even if
# the config.status that we copied generates more things (e.g., dvipsk's).
# 
# The CONFIG_FILES line in the configure script might be more than one
# line, so have to read (and omit) the entire definition.
$verbose "Using $first_program/config.status to configure kpathsea..."
awk '
/CONFIG_HEADERS=/   { print "CONFIG_HEADERS=${CONFIG_HEADERS-\"c-auto.h\"}"
		      next }

# This is supposed to match a single-line CONFIG_FILES.
/CONFIG_FILES=.*}/  { print "CONFIG_FILES=${CONFIG_FILES-\"Makefile\"}"
		      next }

# This is supposed to match the first line of a multiline CONFIG_FILES.
/CONFIG_FILES=/     { multiline_config_files = 1
		      next }
/}/		    { if (multiline_config_files)
			{
                          print "CONFIG_FILES=${CONFIG_FILES-\"Makefile\"}"
                          multiline_config_files = 0
                        }
                      else
                        print
                      next
	            }

		    { if (!multiline_config_files) print }
' $first_program/config.status \
| sed -e "/srcdir=/s%/$first_program"'\([^-/]\)$%/kpathsea\1%g' \
      -e "s%$first_program/configure%kpathsea/configure%" \
>conftest.stat
# The sed lines are supposed to transform, e.g.,
# /prefix/xdvik/xdvik-1.7/xdvik into /prefix/xdvik/xdvik-1.7/kpathsea.
# This occurs on the srcdir line and when running configure.
if cmp -s conftest.stat kpathsea/config.status 2>/dev/null; then
  # The file exists and we would not be changing it.
  :
else
  rm -f kpathsea/config.status
  test -d kpathsea || mkdir kpathsea
  cp conftest.stat kpathsea/config.status
  (cd kpathsea; $CONFIG_SHELL config.status)
fi
rm -f conftest.stat



# Set default prefixes.
if test -n "$prefix"; then
  test -z "$exec_prefix" && exec_prefix='${prefix}'
  prsub="s%^prefix\\([ 	]*\\)=\\([ 	]*\\).*$%prefix\\1=\\2$prefix%"
fi
if test -n "$exec_prefix"; then
  prsub="$prsub
s%^exec_prefix\\([ 	]*\\)=\\([ 	]*\\).*$%exec_prefix\\1=\\2$exec_prefix%"
fi
# Quote sed substitution magic chars in DEFS.
cat >conftest.def <<EOF
$DEFS
EOF
escape_ampersand_and_backslash='s%[&\\]%\\&%g'
DEFS=`sed "$escape_ampersand_and_backslash" <conftest.def`
rm -f conftest.def
# Substitute for predefined variables.

trap 'rm -f config.status; exit 1' 1 3 15
echo creating config.status
rm -f config.status
cat > config.status <<EOF
#!/bin/sh
# Generated automatically by configure.
# Run this file to recreate the current configuration.
# This directory was configured as follows,
# on host `(hostname || uname -n) 2>/dev/null | sed 1q`:
#
# $0 $configure_args

for arg
do
  case "\$arg" in
    -recheck | --recheck | --rechec | --reche | --rech | --rec | --re | --r)
    echo running \${CONFIG_SHELL-/bin/sh} $0 $configure_args
    exec \${CONFIG_SHELL-/bin/sh} $0 $configure_args ;;
    *) echo "Usage: config.status --recheck" 2>&1; exit 1 ;;
  esac
done

trap 'rm -f Makefile; exit 1' 1 3 15
default_texsizes='$default_texsizes'
LIBS='$LIBS'
srcdir='$srcdir'
DEFS='$DEFS'
prefix='$prefix'
exec_prefix='$exec_prefix'
prsub='$prsub'
extrasub='$extrasub'
EOF
cat >> config.status <<\EOF

top_srcdir=$srcdir

CONFIG_FILES=${CONFIG_FILES-"Makefile"}
for file in .. ${CONFIG_FILES}; do if test "x$file" != x..; then
  srcdir=$top_srcdir
  # Remove last slash and all that follows it.  Not all systems have dirname.
  dir=`echo $file|sed 's%/[^/][^/]*$%%'`
  if test "$dir" != "$file"; then
    test "$top_srcdir" != . && srcdir=$top_srcdir/$dir
    test ! -d "$dir" && mkdir "$dir"
  fi
  echo creating "$file"
  rm -f "$file"
  comment_str="Generated automatically from `echo $file|sed 's|.*/||'`.in by configure."
  case "$file" in
    *.c | *.h | *.C | *.cc | *.m )  echo "/* $comment_str */" > "$file" ;;
    * )          echo "# $comment_str"     > "$file" ;;
  esac
  sed -e "
$prsub
$extrasub
s%@default_texsizes@%$default_texsizes%g
s%@LIBS@%$LIBS%g
s%@srcdir@%$srcdir%g
s%@DEFS@%$DEFS%
" $top_srcdir/${file}.in >> $file
fi; done


exit 0
EOF
chmod +x config.status
${CONFIG_SHELL-/bin/sh} config.status

