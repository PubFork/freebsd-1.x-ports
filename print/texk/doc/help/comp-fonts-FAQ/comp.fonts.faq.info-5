This is Info file comp.fonts.faq.info, produced by Makeinfo-1.55 from
the input file FAQ.texinfo.


File: comp.fonts.faq.info,  Node: Preliminaries,  Next: Fonts under DOS,  Prev: OS/2 Information,  Up: OS/2 Information

Preliminaries
*************

Character: an informational unit consisting of a value (usually a byte)
and roughly corresponding to what we think of as letters, numbers,
punctuation, etc.

Glyph: a presentational unit corresponding roughly to what we think of
as letters, numbers, punctuation, etc.

Character vs glyph: Glyph and character are not necessarily the same;
the character <a> may be mapped to a Times Roman Lower Case <a> glyph
in one font and to a Helvetica Lower Case <a> glyph in another font.
Change of glyphs normally means a change in style of presentation,
while change in characters normally means a change in information.
There are gray areas and the definitions provided above are general,
approximate, and imprecise.

Character set: an inventory of characters with certain assigned values.
ASCII is a 7-bit character set that specifies which "character cell"
(byte value) corresponds to which informational unit.

Code Page: essentially synonymous with character set.

Font: A collection of glyphs. A specific font may be isomorphic with a
specific character set, containing only glyphs corresponding to
characters in that set, with these glyphs mapped to the same byte
values as the characters they are intended to represent. PostScript
fonts often contain additional (unmapped) characters. Most importantly,
PostScript fonts may sometimes be remapped by an operating environment,
which is what leads to the disorienting cross-environment mismatch that
spurred my original posting.

Fonts may be bitmapped or outline in format; a bitmapped format
corresponds to a particular size and weight for a particular device or
device resolution, while a single outline font is used to generate
multiple sizes as needed. Within an outline font system, different
weights (bold, semibold, italic, etc.) may be encoded as separate font
resources (separate outline files used to generate the glyphs) or may
all be generated from a single outline (slanting characters to make
"italics," fattening them for "bold," etc.).


File: comp.fonts.faq.info,  Node: Fonts under DOS,  Next: Windows,  Prev: Preliminaries,  Up: OS/2 Information

Fonts under DOS
***************

I used a large assortment of fonts under DOS for intricate multilingual
work. My setup at that time consisted of a library of bitmapped fonts
that could be sent to my HP LaserJet II printer, as well as a set of
fixed-size, fixed-width screen fonts that were supported by my Hercules
Graphics Card Plus (not the same as Hercules Graphics; the "Plus"
included an ability to store 3072 screen glyphs and display any of
these together, while standard character-mode displays were normally
limited to 256 or 512 such entities).

Using XyWrite as a word processor, I would enter a "Mode" command to
change fonts and character sets simultaneously; this would make
different sets of screen glyphs available at the keyboard and would
insert a font-change command for my printer into the text stream. The
"Mode" and font-change commands were not displayed on the screen. The
result was not WYSIWYG, since I was limited to fixed-width screen
display and since I had far more printer glyphs available than the 3072
limit imposed by my video card; I used a brightness attribute to
indicate bold, I used the same screen font for different sizes of
printer fonts, etc. This worked and worked well, in that I could see
(for example) Russian, Greek, English, Polish, and other characters
simultaneously on the screen and I could print documents combining them.

Architecturally, what was going on was that the character sets (code
pages) and fonts were entirely isomorphic and were hard- coded. If I
put a particular Russian letter into cell 246 of my screen and printer
fonts, that character was always there, and any strategy that would let
me access this cell (remapped keyboards, numeric keypad) was guaranteed
always to find the same character.


File: comp.fonts.faq.info,  Node: Windows,  Next: Differences between Windows and OS/2,  Prev: Fonts under DOS,  Up: OS/2 Information

Windows
*******

I recently began using PostScript fonts in Windows with AmiPro as my
word processor. These fonts came with printed cards indicating the
glyph mappings; I could look at the card and it would tell me that a
specific character lived in cell 246, and if I entered Alt-0246 at the
numeric keypad that glyph would appear on the screen. If I loaded the
font into Fontographer for Windows, these glyphs would be arrayed in
cells according to the map provided by Adobe with the fonts.
Fontographer also revealed that these fonts had other, "unmapped"
glyphs assigned to cells above 255.

Given what appeared to be a hard correspondence among what I saw in
Fontographer, what was printed in Adobe's maps, and what was displayed
when I entered something at the keyboard, I naively assumed that
PostScript fonts were operating much like my bitmapped fonts under DOS.
There were some obvious differences, the primary one being that glyphs
of different sizes were all drawn from the same font resource files
under PostScript, but it appeared as if a glyph lived in a certain cell.


File: comp.fonts.faq.info,  Node: Differences between Windows and OS/2,  Next: Installation under Windows and Win-OS/2,  Prev: Windows,  Up: OS/2 Information

Differences between Windows and OS/2
************************************

This assumption was incorrect; PostScript fonts can be subdivided into
two types, one of which observes hard and invariant encodings similar
to those that apply to my bitmapped fonts, while the other represents a
completely different font mapping strategy. This difference became
apparent only when I attempted to share PostScript fonts between
Windows and OS/2 and got some unexpected results.

A PostScript font under Windows involves two files, a PFB (PostScript
Font Binary) file, which contains the PostScript instructions needed to
draw each glyph and some mapping information, and a PFM (Printer Font
Metrics) file, which encodes width and kerning information. A
PostScript font under OS/2 also uses the same PFB file, but instead of
the PFM file it uses an AFM (Adobe Font Metrics) file. The AFM and PFM
files contain much of the same basic information (although the AFM file
is somewhat more complete); the most important differences are in
format (AFM is plain text, PFM is binary) and use (OS/2 uses AFM,
Windows uses PFM).


File: comp.fonts.faq.info,  Node: Installation under Windows and Win-OS/2,  Next: FontSpecific PostScript Encoding,  Prev: Differences between Windows and OS/2,  Up: OS/2 Information

Installation under Windows and Win-OS/2
***************************************

The OS/2 2.0 Font Palette tool (see below for changes to be introduced
with 2.1) by default installs fonts (both PFB and AFM files) into the
"\os2\dll" directory.  Win-OS/2 by default installs PFB files into
"\psfonts" and PFM files into "\psfonts\pfm".  These defaults can be
changed; since OS/2 and Win-OS/2 use the same PFB files, the user can
save disk space by allowing these to be shared (through installing into
the same directory, e.g., install OS/2 fonts into the "\psfonts"
directory instead of "\os2\dll".)  Note that fonts must be intalled and
removed through the Font Palette; if you copy, move, or delete a font
file without using the Font Palette, the system configuration files are
not updated and all hell breaks loose.

Deleting fonts from Win-OS/2 causes the system to update the win.ini
file to remove references to the font, but does not delete any files
physically. Deleting fonts from the OS/2 Font Palette updates the
os2.ini configuration file and physically deletes the AFM and PFB files
from the disk.  This means that if you are sharing PFB files between
OS/2 and Win-OS/2, you can delete a Win-OS/2 font without hurting
native OS/2 operations, since the PFB reamins installed where OS/2
thinks it is. But if you delete an OS/2 font using the Font Palette,
the PFB file is erased from the disk even though the win.ini file is
not updated, so that Win-OS/2 thinks it is still there.


File: comp.fonts.faq.info,  Node: FontSpecific PostScript Encoding,  Next: AdobeStandardEncoding,  Prev: Installation under Windows and Win-OS/2,  Up: OS/2 Information

FontSpecific PostScript Encoding
********************************

Every PFB file contains an "encoding vector"; this is a plain text line
embedded near the head of the PFB file. Encoding vectors are of two
types: AdobeStandardEncoding and everything else. Adobe usually uses
the label "FontSpecific" for fonts that are not encoded according to
AdobeStandardEncoding, and I use it as a cover term here for any such
font.

If you look at the readable plain text information at the head of a
FontSpecific type font, it includes a range of text that begins:

       /Encoding 256 array

followed by a bunch of lines, each of which includes a number (which
corresponds to a cell in the font layout) and the name of the glyph
that lives in that cell. The unreadable binary data below this array
specification lists the name of each glyph and the PostScript
instructions for how the glyph is to be drawn.  There may be PostScript
code for drawing glyphs that are not included in the mapping array, but
only glyphs mentioned in the array specification are available to
applications.

FontSpecific type fonts are comparable to the bitmapped fonts I used
under DOS. Each character physically is assigned to a specific cell
within the font file and operating environments are not allowed to
remap these. The glyph in cell 246 will be the same in both Windows and
OS/2.


File: comp.fonts.faq.info,  Node: AdobeStandardEncoding,  Next: AdobeStandardEncoding under Windows (and Win-OS/2),  Prev: FontSpecific PostScript Encoding,  Up: OS/2 Information

AdobeStandardEncoding
*********************

AdobeStandardEncoding is a specific mapping of certain glyphs to
certain cells; in this respect it resembles FontSpecific encoding.
Because it is standardized, the array is not spelled out in the PFB
file; the line

       /Encoding StandardEncoding def

tells Adobe Type Manager (ATM, either the Windows and Win-OS/2 version
or the native OS/2 version) that the encoding is "standard," and the
environments are expected to know what this standard is without having
the array spelled out in each font file.

Although AdobeStandardEncoding is a real mapping, there is an
importance difference between it and various FontSpecific mappings:
operating environments are expected to remap AdobeStandardEncoding
fonts according to their own requirements.  That is, although
AdobeStandardEncoding does assign glyphs to cells, no operating
environment actually uses these assignments and any environment remaps
the glyphs before rendering them.  Confusion arises because Windows and
OS/2 remap such fonts in different ways.


File: comp.fonts.faq.info,  Node: AdobeStandardEncoding under Windows (and Win-OS/2),  Next: AdobeStandardEncoding under OS/2,  Prev: AdobeStandardEncoding,  Up: OS/2 Information

AdobeStandardEncoding under Windows (and Win-OS/2)
**************************************************

An AdobeStandardEncoding font under Windows is remapped according to a
character map (code page) that MicroSoft calls Windows ANSI (can other
code pages be installed in Windows?). This determines which character
resides in which cell and the font is remapped so that glyphs and
characters will correspond. Since Fontographer for Windows is a Windows
application, it displays glyphs not in the cells in which they live
according to AdobeStandardEncoding, but in the cells to which they get
reassigned under the remapping to Windows ANSI. There is nothing
explicit in the PFB file that associates these characters with the
specific cells in which they appear under Windows.


File: comp.fonts.faq.info,  Node: AdobeStandardEncoding under OS/2,  Next: Consequences for OS/2 users,  Prev: AdobeStandardEncoding under Windows (and Win-OS/2),  Up: OS/2 Information

AdobeStandardEncoding under OS/2
********************************

OS/2 operates within a set of supported code pages; two system- wide
code pages are specified in the config.sys file and an application is
allowed to switch the active code page to any supported code page (not
just these two). DeScribe, for example, currently operates in code page
(CP) 850, which includes most letters needed for western European Latin
alphabet writing. CP 850 does not contain typographic quotes, en- and
em-dashes, and other useful characters. It does contain the IBM
"pseudographics," which are useful for drawing boxes and lines with
monospaced fonts.

When the user inputs a value (through the regular keyboard or the
numeric keypad), the application checks the active CP, looks up in an
internal table the name of the character that lives in that cell within
that CP, and translates it into a unique number that corresponds to one
of the 383 glyphs supported by OS/2 (the union of all supported code
pages). This number is passed to PM-ATM (the OS/2 ATM implementation),
which translate the glyph number into the glyph name that PostScript
fonts expect and searches the font for that name. The system never
looks at where a glyph is assigned under the AdobeStandardEncoding
array; rather, it scans the font looking for the character by name and
gives it an assignment derived from the active code page. This is the
remapping that OS/2 performs on AdobeStandardEncoding type fonts.

As a result, a situation arises where, for example, <o+diaeresis> is
mapped to cell 246 under Windows ANSI but to cell 148 under CP 850.
Using the identical PFB file, this glyph is accessed differently in the
two operating environments.


File: comp.fonts.faq.info,  Node: Consequences for OS/2 users,  Next: Advice to the user,  Prev: AdobeStandardEncoding under OS/2,  Up: OS/2 Information

Consequences for OS/2 users
***************************

If your font has a FontSpecific encoding, there are no unexpected
consequences; the same glyphs will show up at the same locations in
both Windows (Win-OS/2) and native OS/2. Regardless of what the active
code page is, if the font has a FontSpecific encoding OS/2 goes by cell
value; a specific glyph is hard-coded to a specific cell and OS/2 will
give you whatever it finds there, even if what it finds disagrees with
what the active code page would normally predict. In other words,
FontSpecific encoding means "ignore the mapping of the active code page
and rely on the mapping hard-coded into the font instead."

If your font has an AdobeStandardEncoding encoding, the following
details obtain:

1) The same PFB file may have glyphs that are accessible in one
environment but not another. For example, if DeScribe thinks it is
operating in CP 850, there is no access to typographic quotes, even if
those do occur in the PFB file and even if Windows can find them in the
same exact font file. DeScribe could switch code pages, but if the
application isn't set up to do so (and DeScribe currently isn't), those
characters are absolutely inaccessible to the user.

2) If the active code page includes a character that isn't present in
the font, OS/2 has to improvise. For example, AdobeStandardEncoding
fonts do not normally include the IBM pseudographics, yet the user who
inputs the character value for one of these sends the system off to
look for it. As described above, OS/2 first checks the active font for
the glyph name that corresponds to that character and, if it finds it,
displays it.  If the glyph isn't found, OS/2 looks to the system Symbol
font.  This is not reported back to the user in DeScribe; if I have
Adobe Minion active (AdobeStandardEncoding, no information anywhere in
the font files for pseudographics) and input a pseudographic character,
DeScribe tells me it is still using Adobe Minion, even though it has
fetched the character it displays and prints from the Symbol font, a
different font resource file.


File: comp.fonts.faq.info,  Node: Advice to the user,  Next: OS/2 2.1 and beyond,  Prev: Consequences for OS/2 users,  Up: OS/2 Information

Advice to the user
******************

OS/2's code page orientation provides some advantages, in that it
separates the character set (code page) mapping from the encoded font
mapping. The main inconvenience isn't a loss of function, but a
disorientation as users become accustomed to the new paradigm.

If you need a glyph that you know is in your PFB file but that isn't in
the active code page (and if you can't change code pages within your
application), you can't get at it in OS/2 without tampering with the
font files. To tamper, you can use font manipulation tools to
redesignate the PFB file as FontSpecific ("Symbol" character set to
Fontographer). If you then map the glyphs you need into one of the
lower 256 cells (with some limitations), they will be accessible in all
environments. The Fontographer manual does not explain what the
"Symbol" character encoding label really does, it just tells you not to
use it except for real symbol fonts. In fact you should use it for any
font that will not correspond in inventory to the code page supported
by your application, which means any non-Latin fonts.

You do not have to recode all your fonts, and you wouldn't normally
want to do so, since Fontographer hinting is not nearly as good as
Adobe's own hand-tuning and regenerating a font regenerates the hints.
All you have to do is make sure you have one FontSpecific type font
installed that includes your typographic quotes, etc. for each typeface
you need. Within DeScribe, you can then write a macro that will let you
switch fonts, fetch a character, and switch back, thereby allowing you
to augment any group of fonts with a single, shared set of typographic
quotes (or whatever) that you put in a single FontSpecific font.
Alternatively, OS/2 also supports CP 1004, which does contain
typographic quotes and other characters used for high-quality
typography, but the user may not be able to convince an application to
invoke this code page if it was not designed to do so.

You can have any number of FontSpecific fonts installed, which means
that there is a mechanism for dealing with unsupported character sets
(code pages).

You can also tinker with the font files to try to trick the operating
system. For example, using Fontographer or other utilities, you can
change the name assigned to a glyph description within the PFB file. If
you want to use AdobeStandardEncoding and you want to see a specific
glyph at a specific cell when DeScribe thinks it's using CP 850, you
have to make sure that the name assigned to the description of that
glyph is what DeScribe expects to find. OS/2 doesn't care whether, say,
<o+diaeresis> really looks like <o> with two dots over it, as long as
it bears the right name.

This second approach is obviously far more complex and provides much
more opportunity for error. Its advantage is that OS/2 does not support
case conversion and sorting (other than in machine order) for
unsupported code pages, since these operations depend on character
names. Keeping supported names from supported code pages while changing
the artwork is one way to maintain order and case correspondences while
increasing the range of glyphs actually supported. I have not
experimented with this approach, since the use I would get out of the
adding functionality (over the FontSpecific encoding approach) is not
worth the amount of effort required.


File: comp.fonts.faq.info,  Node: OS/2 2.1 and beyond,  Prev: Advice to the user,  Up: OS/2 Information

OS/2 2.1 and beyond
*******************

OS/2 2.1 will change some aspects of font handling. First, OS/2 2.0
GA+SP has a bug that can cause OS/2 to crash when an AFM file with more
than 512 kern pairs is read. This is fixed in 2.1.  (This bug is
separate from a design limitation in MicroSoft Windows that causes
large kern tables to be read incorrectly.  This problem is still under
investigation; watch this space for a report.)

Fonts in 2.1 will be installed by default into the "\psfonts" directory,
so that they will normally be shared with Win-OS/2 fonts. (The user will
still be able to specify a directory; all that will change is the
default). The user will also be able to instruct the Font Palette not to
delete font files when fonts are uninstalled, so as to avoid clobbering
a Win-OS/2 font by removing it from native OS/2 use through the Font
Palette (although the default will still be to delete the physical font
files).

OS/2 will stop using AFM files and will replace these with OFM files, a
binary metrics file (different from PFM) that OS/2 will compile from
the AFM file during font installation. This will speed font loading,
since the system will not have to parse a plain text metrics file.
Additionally, the OS/2 PostScript printer driver used to install its
own, large font files, but will now use the OFM and PFB files, thereby
saving 50k-200k of disk space per installed font outline.

IBM's long-term goal is to replace the 383-entity inventory of
supported glyphs with Unicode. This is very much a long-term goal and
there is not even a hint of when it might become available.  It has its
own problems, stemming from the fact that Unicode is essentially a
character standard and glyph and character inventories may differ is
assorted ways, but it will be a significant step in the proverbial
right direction.


File: comp.fonts.faq.info,  Node: Unix Information,  Next: Sun Information,  Prev: OS/2 Information,  Up: Top

Unix Information
****************

This section needs a lot of work.  At the time of this release, I'm not
in a position to write it so I'm leaving it basically blank.  Even if
you don't have time to write it, if you know what _should_ be in this
section, please forward it to norm.

Please consult the 'utilities' section for more information.  Most of
the utilities described in that section run under Unix.


File: comp.fonts.faq.info,  Node: Sun Information,  Next: NeXT Information,  Prev: Unix Information,  Up: Top

Sun Information
***************

Someone mailed a file of Sun-related font tips.  Unfortunately, I cannot
find the file.  If you have any suggestion for this section (or if you
are the person that mailed me the other list), please forward your
suggestions to norm.

* Menu:

* Fonts under Open Windows::
* Vendors for F3 fonts::


File: comp.fonts.faq.info,  Node: Fonts under Open Windows,  Next: Vendors for F3 fonts,  Prev: Sun Information,  Up: Sun Information

Fonts Under Open Windows
************************

The following information regarding fonts under Open Windows was stolen
from Liam R.E. Quin's Open Windows FAQ.  The original author was Rick
Heli.

* Menu:

* Type 1 fonts under OpenWindows?::
* Improving font rendering time::
* Making bitmap fonts for faster startup::
* Converting between font formats::
* Xview/OLIT fonts at 100dpi::


File: comp.fonts.faq.info,  Node: Type 1 fonts under OpenWindows?,  Next: Improving font rendering time,  Prev: Fonts under Open Windows,  Up: Fonts under Open Windows

Does OpenWindows support Type 1 PostScript fonts?
*************************************************

Type 1 fonts are supported starting with the NeWSprint 2.0 and Solaris
2.0 (OpenWindows 3.0.1) releases.

There are also 57 F3 format fonts supplied with OpenWindows which are
fully hinted.  Documentation on the F3 font format and the F3 font
interpreter, TypeScaler, is available from Sun.

The TypeScaler product is separately licensable from SunPics (the
printing arm of Sun Microsystems).  If you're interested in licensing
this product, Rick Heli can put you in touch with Marketing to work out
the arrangements.  TypeScaler does not appear as a standalone portion
of OpenWindows, though it is resident within the X11/NeWS server.


File: comp.fonts.faq.info,  Node: Improving font rendering time,  Next: Making bitmap fonts for faster startup,  Prev: Type 1 fonts under OpenWindows?,  Up: Fonts under Open Windows

Improving font rendering time
*****************************

Although the Sun type renderer (TypeScaler) is pretty fast, it's not as
fast as loading a bitmap.  You can pre-generate bitmap fonts for sizes
that you use a lot, and you can also alter and access the font cache
parameters.	 If you have a lot of memory you might want to
increase the font cache size.

         $ psh -i
         Welcome to X11/NeWS Version3      <--- psh will say this at you
         currentfontmem =	              % type this line ...
         300	                              % ... my server was using 300 Kbytes
         1024 setfontmem
                                           % Just to check:
         currentfontmem =
         1024

See pp. 328ff of the NeWS 3.0 Programmer's Guide.  You need to say psh
-i so that the PostScript packages are loaded - see the psh man page.


File: comp.fonts.faq.info,  Node: Making bitmap fonts for faster startup,  Next: Converting between font formats,  Prev: Improving font rendering time,  Up: Fonts under Open Windows

Making bitmap fonts for faster startup
**************************************

Sun supports the F3 scalable outline format.  These descriptions are
stored in .f3b files.  The makeafb program is used to create a bitmap
font at a particular size which is stored in a .afb file, which is an
Adobe ASCII format for font bitmaps.  X11/NeWS really prefers a binary
format though for speed and other reasons, so convertfont is used to
"compile" the font into a font binary or .fb file.

Once this is done, X11/NeWS needs to understand the relationship between
the .f3b file and all the bitmaps which are based on it.  Thus, the
bldfamily program makes these correlations and stores the data in the
font family or .ff file.

bldfamily also builds a global list of all fonts stored in the working
directory, writing the results out to the file Families.list.  If one
wishes to create font aliases, these can be added to the Synonyms.list
file by hand and bldfamily will then add them to Families.list for you.
X11/NeWS uses Families.list to construct the font list it advertises
to applications.

To go from F3 to BDF, use makeafb to generate a bitmap font in .afb
format.  Then use one of convertfont's many options to change to this
to .bdf format and from there it should be clear.

       $ mkdir $HOME/myfonts
       $ cd $HOME/myfonts
       $ makeafb -20 -M $OPENWINHOME/lib/fonts/Bembo.f3b
       Creating Bembo20.afb
       $ convertfont -b Bembo20.afb
       Bembo20.afb->./Bembo20.fb
       Chars parameter greater than number of characters supplied.
       $ ls
       Bembo20.afb   Bembo20.fb      Synonyms.list
       $ bldfamily
       * Bembo                      ./Bembo.ff (Encoding: latin)
       cat: ./Compat.list: No such file or directory
       $ xset +fp `pwd`
       $ xset fp rehash

If you want the server to see your new font directory every time, add
this directory to your FONTPATH environment variable in one of your
start-up files, e.g. .login or .profile.


File: comp.fonts.faq.info,  Node: Converting between font formats,  Next: Xview/OLIT fonts at 100dpi,  Prev: Making bitmap fonts for faster startup,  Up: Fonts under Open Windows

Converting between font formats (convertfont, etc.)
***************************************************

You can also use F3 fonts with an X11 server, by converting them to a
bitmap (X11 bdf format) first.  Your license restricts use of these
fonts on another machine, and unless you have NeWSPrint you shouldn't
use them for printing.  Having said all that...  you can use makeafb
and convertfont to generate bdf files that you can compile with
bdftosnf or bdftopcf.

Use mftobdf (from the SeeTeX distribution) to convert TeX PK fonts to
X11 BDF format, which you can then use with either X11 or OpenWindows.


File: comp.fonts.faq.info,  Node: Xview/OLIT fonts at 100dpi,  Prev: Converting between font formats,  Up: Fonts under Open Windows

Xview/OLIT fonts at 100 dpi
***************************

There aren't any.  More precisely, the various text fonts, such as
Lucida Typewriter Sans, are available at 100 dpi, and in fact are
scalable under OpenWindows.  The glyph fonts are bitmaps, and don't
scale very well.


File: comp.fonts.faq.info,  Node: Vendors for F3 fonts,  Prev: Fonts under Open Windows,  Up: Sun Information

Where can I order F3 fonts for NeWSprint and OpenWindows?
*********************************************************

600 F3 fonts are available for unlocking from Printer's Palette, a CD
available with NeWSprint 2.0.

In addition, F3 fonts are available from the following sources:

       Linotype AG                     Linotype Company
       Mergenthaler Allee 55-75        425 Oser Avenue
       6236 Eschborn Germany           Hauppague, NY  11788
       49/(61 96) 4031	                (800) 336-0045
       FAX 011/49/6196-982185          FAX 516-434-2055
       attn: F3 Font Production        attn: F3 Font Production
     
       Monotype Plc.                   Monotype Typography
       Salfords Redhill RH1 5JP        53 W. Jackson Boulevard Suite 504
       England                         Chicago, IL  60604
       44/(737) 765959                 (800) 666-6893
       FAX 011/44/737-769243           FAX (312) 939-0378
       attn: F3 Font Production        attn: F3 Font Production
     
       U R W                           U R W
       Harksheider Strasse 102         One Tara Boulevard Suite 210
       D2000 Hamburg Germany           Nashua, NH  03062
       49/(40) 606050                  (603) 882-7445
       49/(40) 60605148                (603) 882-7210
       attn: F3 Font Production        attn: F3 Font Production
     
       Bigelow & Holmes                Autologic
       P. O. Box 1299                  1050 Rancho Conejo Boulevard
       Menlo Park, CA  94026           Newbury Park, CA  91320
       415/326-8973                    (800)235-1843, or (805)498-9611 in CA
       FAX (415) 326-8065              FAX (805) 499-1167
       attn: F3 Font Production        attn: F3 Font Production


File: comp.fonts.faq.info,  Node: NeXT Information,  Next: Amiga Information,  Prev: Sun Information,  Up: Top

NeXT Information
****************

If you have any suggestions for this section, please forward your
suggestions to norm.

* Menu:

* Tell me about NeXTstep fonts::
* Tell me more about NeXTstep fonts::
* Porting fonts to the NeXT::
* Font availability::
* Only 256 fonts?::


File: comp.fonts.faq.info,  Node: Tell me about NeXTstep fonts,  Next: Tell me more about NeXTstep fonts,  Prev: NeXT Information,  Up: NeXT Information

Tell me about NeXTstep fonts
****************************

NeXTstep fonts are Adobe Type 1 fonts stored in ASCII (PFA) format.
There are several rules about how fonts must be installed before they
work.

I'd like to thank Henry for rewriting this section.

Basic Format
============

NeXTstep fonts live in one of three folders:

/NextLibrary/Fonts
     Contains system fonts.  In general, you will not install any
     new fonts here.

/LocalLibrary/Fonts
     Contains fonts which are accessible to every user on a     system
     or a network.

~/Library/Fonts
     (where ~ is your home folder) means fonts     which are private to
     a specific user.

A NeXTstep font is actually a folder containing various components of
the font.  Components are:

   * the outline font file - REQUIRED

   * the font metrics (AFM) file - REQUIRED

   * one or more screen font (bitmap) files - OPTIONAL

Font Folder and Font Filename Requirements
==========================================

The name of the folder containing a font and the name of the font file
itself must follow strict rules - the names can NOT be any old name you
like. For a font to work correctly, the base folder and font filename
MUST BE THE SAME as the name of the outline font.  This is usually the
same as the value of the FontName field in the AFM file or the value of
the /FontName key in the actual font itself.  Suppose you have a font
called Headhunter.  The Headhunter font must live within a folder called

       Headhunter.font

within one of the three folders mentioned above.  Within the
Headhunter.font  folder, you must have the two files

       Headhunter       ( the outline file )
       Headhunter.afm   ( the AFM file )

If you have a bitmap file for Headhunter, it must live in a file

       Headhunter.bepf  ( the bitmap file )

Variations such as Bold, Italic, etc., should be their own font files
in their own folder. So if you have a font called Headhunter-Bold, you
need to create a folder called

       Headhunter-Bold.font

within one of the three folders mentioned above.  Within the
Headhunter.font  folder, you must have the two files

       Headhunter-Bold       ( the outline file )
       Headhunter-Bold.afm   ( the AFM file )

If you have a bitmap file for Headhunter, it must live in a file

       Headhunter-Bold.bepf  ( the bitmap file )

For NeXTstep 1.0 ONLY, you also need to take the following steps:
-----------------------------------------------------------------

   * If they do not already exist, create the following folders:

        * ~/Library/Fonts/outline

        * ~/Library/Fonts/afm

        * ~/Library/Fonts/bitmap

   * In each of these folders, create a symbolic link to the
     corresponding component file in each font.

For NeXTstep 2.0 and up:
------------------------

The font description is taken from the font folder itself, so you don't
need to do this. It may be beneficial to simply create these folders
and put nothing in them, but I'm not sure it matters.

Certain "old" applications which haven't upgraded to the NeXTstep 2.0
scheme of fonts may depend on these folders being present.

The last step is to get the system to recognize the new font(s).  You
may have noticed the existence of three files in the Fonts folder:
.fontdirectory, .fontlist, and .afmcache. These are files the system
looks at to see which fonts exist.

The easiest way to update them is to simply start up an application and
open the font panel. It should recognize that the update time stamp on
the Fonts folder has changed, and update the files accordingly. It is
probably a good idea to simply delete the three above files beforehand.

You should get a message window saying "incorporating information on
new fonts. Please wait (this may take xx seconds)". Your new fonts
should be available now.

If this does not work, you can update them manually. Open up a Terminal
shell and go to your Fonts folder. At the prompt, type two commands:

       buildafmdir     
       cacheAFMData afm  (the parameter is the <afm dir>)

The new fonts will not work if the cacheAFMData command is not run, and
since it is an undocumented command, it is a common culprit.

[ed: the cacheAFMData step may not be required in 3.0 OS]

I believe this is true.  Looks like the PasteBoard Services runs
cacheAFMData in 3.0.

You should now be able to see and preview your fonts in the font panel.

If you are still having problems with your font, such as the <<
Unusable font >> message, consult NeXTAnswers. There are some useful
suggestions for debugging faulty fonts there.  It is also always
helpful to look at existing fonts to see how they are installed.

One note on the NeXTAnswers. Supposedly there are only a few discrete
values which are allowed to appear in the weight field of the font:
"Ultra Light", "Thin", "Light", "Extra Light", "Book", "Regular",
"Plain", "Roman", "Medium", "Demi", "Demi-Bold", "Semi-Bold", "Bold",
"Extra Bold", "Heavy", "Heavyface", "Black", "Ultra", "UltraBlack",
"Fat", "ExtraBlack", and "Obese". However, I have a few fonts where
this is not the case ("standard" is a common entry) and have had no
problems as of yet. But it would probably be wiser to be on the safe
side.

See below for a definitive list.


File: comp.fonts.faq.info,  Node: Tell me more about NeXTstep fonts,  Next: Porting fonts to the NeXT,  Prev: Tell me about NeXTstep fonts,  Up: NeXT Information

Tell me more about NeXTstep fonts
*********************************

Outline files should be in PFA or hexadecimal ASCII format.  The font
name should be taken either from the outline (font) file or the AFM
file. In both case the name is given after the word "FontName" at the
beginning of the file)

As a matter of fact, fonts don't strictly HAVE to be in all hexadecimal
ASCII format.  The eexec portion of the font can be in binary if you
wish, and in fact some Mac->NeXTstep or PFB->NeXTstep font converters
simply strip off the Mac/PFB storage format headers and leave the
binary sections as binary.

However, if you wish to send such a font across a serial channel to a
PostScript printer, you will need some way to unpack the binary eexec
portion to seven-bit ASCII before sending the font.

Where to Obtain Fonts for NeXTstep
==================================

Adobe Type 1 fonts are available in NeXTstep format from RightBrain
Software of Palo Alto.  RightBrain are the authorised Adobe reseller
for Type 1 fonts on NeXTstep.  Adobe fonts for NeXTstep come with AFM
files and a font installer for installing on NeXTstep and downloading
to non-NEXT printers.

     RightBrain Software
     132 Hmilton Avenue
     Palo Alto
     California 94301
     (415) 326-2974.
     info@rightbrain.com

Other vendors in general do not provide Type 1 fonts in a form suitable
for UNIX/NeXTstep.  In such cases you must obtain the fonts in either
Macintosh format or PC (PFB) format.  When you obtain fonts from other
vendors, MAKE SURE you INSIST they supply AFM files.   Fonts without
AFM files can be converted to NeXTstep format, but it can be a big
deal.  Trilithon Software currently supply utilities to generate AFM
files directly from the font, but you get only the character metrics -
other data such as kerning pairs is not in the font and cannot be
synthesised.

Converted Fonts After Conversion
--------------------------------

After conversion they are just like any other freeware or shareware
font that you can get in NeXTstep-format from the archives. That's just
outline and AFM files but no bitmapped screen fonts. So small point
size means poor resolution on screen but they most of should print OK
if they are any good ( = usually made with Fontographer).

About Conversion Utilities
--------------------------

NeXTstep utilities
..................

   * unfont

     You can find a package, named something like
     pcATMfont2NeXT.tar.Z, from NeXT archives (cs.orst.edu)
     that converts PC fonts to NeXT format (PFB -> PFA).

     The most useful tool for me has been "unfont" which
     converts the .pfb (binary outline) font to ASCII outline
     font.

     I usually use it like this

                   $ unfont new_font.pfb >NewFont

     If the conversion was successful all I have to after that is
       maybe to rename the font correctly and move the outline file
          in the correct .font folder.

   * Opener.app

     Opener seems to be a very useful application since it can
     open several kinds file packages on NeXTstep that are
     common on other platforms. E.g. ".sit", ".hqx",          ".zoo",
     ".zip", ".z", etc.

     I haven't used it a lot but looks very promising.

   * T1utils-1.1

     This is collection of command-line programs that manipulate
      PS Type 1 fonts and one of them can also do the PFB->PFA
     conversion (t1ascii?).

                Basic unarchiving of Mac and PC files.

On your Unix machine:

xbin
     Converts .hqx to:
    .data
          Rename and transfer to PC (or use opener.app on NeXT?)

    .info
          Discard

    .rsrc
          Discard

unzip
     Converts .zip to:
    .inf
          Discard

    .wfn
          Discard

    .pfm
          Discard (unless it can generate a better AFM file)

    everything else
          Transfer to NeXT      On a PC:

xbin
     Converts .hqx to:
    .data
          Rename and transfer to PC (or use opener.app on NeXT?)

    .info
          Discard

    .rsrc
          Discard

extract -f ...
     Converts .cpt to:
    file with no extension
          This is usually the outline font.  Refont and transfer to
             NeXT.

    .afm
          Transfer to NeXT.

    .pfm
          Discard (unless it can generate a better AFM file)

    .bma
          Discard if you have an AFM file.

unsit30 -eb ...
     Converts .sit to:
    file with no extension
          This is usually the outline font.  Refont and transfer to
             NeXT.

    .afm
          Transfer to NeXT.

    .pfm
          Discard (unless it can generate a better AFM file)

    .bma
          Discard if you have an AFM file.

refont
     Converts outline formats from Mac to NeXT format (PFA).

pkunzip
     Converts .zip to:
    .inf
          Discard

    .wfn
          Discard

    .pfm
          Discard (unless it can generate a better AFM file)

    everything else
          Transfer to NeXT      On a NeXT

Opener.app
     Converts archive formats (.sit, .hqx, .zip) to NeXT     format.

unfont
     Converts PFB files to NeXT format.

afm
     Converts AFM files to NeXT format AFM files (CR/LF hackery)

Installation
------------

There are scripts (installfont) available that can handle the
installation process but here is how you do it manually.

   * .font

     After all that you have to create the .font folder, move the
     outline and .afm files there and start fighting with the strangely
     formatted .afm file. The most common problems are font name
     mismatch between outline and AFM files (family name is incorrect
     or too long, etc) and missing fields (ex. no ItalicAngle entry) in
     the AFM file.

   * buildafmdir AND cacheAFMData

     buildafmdir puts its complains to Console but cacheAFMData put
     them on stdout or stderr (ie. Terminal Window).

     PARSE ERRORS ----------- "Parse error 10000011 ..." comes from
     mismatch between of CharMetrics declared in the .afm and actually
     found. I haven't been able to figure out the other strange parse
     errors.

     buildafmdir in the 3.0 release has the limitation of not being
     able to install more that 255 fonts in any one font folder.  This
     is supposed to be fixed in 3.1.

   * The Dreaded <<Unusable Font>> Message

     <<Unusable Font>> appears in the font panel when you have run
     buildafmdir and it finds things it thinks are wrong with the AFM
     file.  Errors can also be generated by parsing routines inside the
     PasteBoard Services.

     <<Unusable Font>> almost NEVER has anything to do with the font
     itself, since buildafmdir doesn't actually look inside the font.
     Errors in the font due to faulty conversion will likely show up at
     the time the PostScript server actually attempts to define the
     font or render characters from the font.

     The only error I have ever seen from a converted font was the
     results of a naive Macintosh to PFA converter, which didn't
     understand that the POST resources in a Macintosh format Type 1
     font do not have to be in order, nor do the POST resources all
     have to be contiguous - they can be interspersed with other
     resources.  The results were that a comment resource ended up in
     the middle of the eexec section of the font and the PostScript
     interpreter threw out lots of errors.

     <<Unusable Font>> almost ALWAYS occurs because there is something
     wrong with the AFM file you installed.  Here is a partial list of
     problems that can occur with AFM files:

        * Carriage-return characters (^M) at ends of lines.

          This happens when you get incomplete translations from PC
          files, which use carriage-return-line-feed combinations at
          ends of lines.

          Solution: edit away the carriage returns.  Make sure the
          lines are terminated only by line-feed characters.

        * Spaces or tabs at ends of lines.

          Fixed in NeXTstep 3.1.

        * Missing fields.

          NeXTstep DEMANDS that certain fields be present in the AFM
          file.  Required fields are: FontName, FullName, FamilyName,
          Weight, EncodingScheme, and ItalicAngle.  If any of these
          fields are missing, you will get the <<Unusable Font>>
          message.

          Solution: fill in the required fields.

        * Incorrect Weight field.

          buildafmdir accepts only a certain set of values for the
          Weight field.  Acceptable values are: "Ultra Light", "Thin",
          "Light", "Extra Light", "Book", "Regular", "Plain", "Roman",
          "Medium", "Demi", "Demi-Bold", "Semi-Bold", "Bold", "Extra
          Bold", "Heavy", "Heavyface", "Black", "Ultra", "UltraBlack",
          "Fat", "ExtraBlack", and "Obese".

        * Character information count mismatches.

          AFM files contain several sets of information which are
          introduced by a "Startxxxxx nnn" line where the xxxxx is the
          name of the section (such as StartCharMetrics) and nnn is the
          purported number of lines of information of this type to
          follow.  Sad to say, many many AFM files supplied by vendors
          and others are such that the actual number of lines of data
          do not match the number stated on the Startxxxxx line.  When
          this error occurs in the AFM file, buildafmdir emits a Parse
          Error message to the console and the font will be marked
          unusable.  The parse error messages from buildafmdir is of
          the form:

                 Parse error nnnnnnnn  xx yy

          where nnnnnnnn is the error number, xx is the number of lines
          of information claimed to exist, and yy is the number of
          lines actually read.  The nnnnnnnn are are:

                 10000011  mismatch in the StartCharMetrics section
                 10000012  mismatch in the StartTrackKern section
                 10000013  mismatch in the StartKernPairs section
                 10000014  mismatch in the StartComposites section
                 10000015  mismatch in a composite character specification

          I have converted many fonts from the Berkeley Macintosh User
          Group CD ROM and fully half of the supplied AFM files are
          incorrect.

   * Other AFM file errors.

     Parse error numbers 10000001 through 10000010 means some kinds of
     syntax errors in the AFM data file.  Any of these errors mean that
     the AFM file is truly hosed.  You'd probably be better off
     obtaining AfmBuilder from Trilithon Software and building a new
     AFM file straight from the font.

