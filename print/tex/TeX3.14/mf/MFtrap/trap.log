This is METAFONT, C Version 2.7 (base=plain 93.5.14)  16 MAY 1993 11:04
**&./trap1.base trap
(trap.mf
>> << == >> ::: ||`` ''
! Isolated expression.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.4   << == >> ::: || `` '' --
                               !! ?? ## && @@ $$ [[ ]] {{ }} . (( 5.5.5 )) +...
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.4   << == >> ::: || `` '' --
                               !! ?? ## && @@ $$ [[ ]] {{ }} . (( 5.5.5 )) +...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Missing `=' has been inserted.
<to be read again> 
                   ,
l.5   begingroup save =; let=,
                              ; save,; newinternal $=,; let ):=, endgroup;
You should have said `let symbol = something'.
But don't worry; I'll pretend that an equals sign
was present. The next token I read will be `something'.

> errorstopmode=errorstopmode
> readstring=readstring
> 2
> "2"
> ,=,
> (=left delimiter that matches )
> )=,
<< == >> ::: ||`` ''=<< == >> ::: ||`` ''
> year=month
! OK.
l.6 ...rorstopmode,readstring,2,"2",,,(,),<<,year;
                                                  

! Missing `:' has been inserted.
<to be read again> 
                   ;
l.8 ...acingcommands:=if not cycle "":1.1 forever;
                                                  fi;
The next thing in this loop should have been a `:'.
So I'll pretend that a colon was present;
everything from here to `endfor' will be iterated.

{fi}
{exitif}
{[repeat the loop]}
{false}
{fi}
{exitif}
{[repeat the loop]}
{(2.1)>(2)}
{true}
{tracingcommands:=2.1}
{showtoken}
> |=:|>=|=:|>
! OK.
l.9 ... tracingcommands>2 endfor; showtoken |=:|>;
                                                  

! Arithmetic overflow.
l.10   tracingedges:=1/.00001
                             ; tracingequations:=$+1; p~=tracingedges+.00001;
Uh, oh. A little while ago one of the quantities that I was
computing got too large, so I'm afraid your answers will be
somewhat askew. You'll probably have to adopt different
tactics next time. But I shall try to carry on anyway.

{tracingedges:=32767.99998}
{(0)+(1)}
{tracingequations:=1}
{(32767.99998)+(0.00002)}
! Arithmetic overflow.
l.10 ...ingequations:=$+1; p~=tracingedges+.00001;
                                                  
Uh, oh. A little while ago one of the quantities that I was
computing got too large, so I'm afraid your answers will be
somewhat askew. You'll probably have to adopt different
tactics next time. But I shall try to carry on anyway.

{(p~)=(32767.99998)}
## p~=32767.99998
! Value is too large (32767.99998).
l.10 ...ingequations:=$+1; p~=tracingedges+.00001;
                                                  
The equation I just processed has given some variable
a value of 4096 or more. Continue and I'll try to cope
with that big value; but it might be dangerous.
(Set warningcheck:=0 to suppress this message.)

{interim}
{tracingmacros:=1}
{tracingoutput:=1}
{warningcheck:=1}
{tracingstats:=1}
{tracingchoices:=1}
{tracingpens:=1}
{tracingspecs:=1}
{ASCII("")}
{$:=-1}
{$:=x}
>> x
! Internal quantity `$' must receive a known value.
<to be read again> 
                   ;
l.12 ...utput:=tracingmacros:=1; $:=ASCII""; $:=x;
                                                   p~:=p~;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

{p~:=32767.99998}
## p~=32767.99998
! Value is too large (32767.99998).
l.12 ...racingmacros:=1; $:=ASCII""; $:=x; p~:=p~;
                                                  
The equation I just processed has given some variable
a value of 4096 or more. Continue and I'll try to cope
with that big value; but it might be dangerous.
(Set warningcheck:=0 to suppress this message.)

{delimiters}
{delimiters}
{vardef}
{def}

foo(TEXT2)->begingroup(TEXT2)endgroup
(SUFFIX0)<-
(SUFFIX1)<-foo
(TEXT2)<-interim.proofing:=(-0.5;shipout.nullpicture;special"3"
{begingroup}
{interim}
{-(0.5)}
! Missing `)' has been inserted.
<to be read again> 
                   ;
<argument> interim.proofing:=(-0.5;
                                   shipout.nullpicture;special"3"
foo->begingroup(TEXT2)
                      endgroup
l.16 ...5; shipout nullpicture; special"3" endtext
                                                  ;
I found no right delimiter to match a left one. So I've
put one in, behind the scenes; this may fix the problem.

{proofing:=-0.5}
{shipout}
{nullpicture}
{special}
{restoring proofing=2}
{endgroup}
{for}
{loop value=1}
{fi}
{[repeat the loop]}
{loop value=2}
{fi}
! Extra fi.
<for(2)> fi
            ENDFOR
l.17 ...racingpens step 1 until proofing:fi endfor
                                                   showstats; let!!=skipto;
I'm ignoring this; it doesn't match any if.

{[repeat the loop]}
{showstats}
Memory usage 1409&3264 (256839 still untouched)
String usage 23&77 (6108&77131 still untouched)
! OK.
l.17 ...step 1 until proofing:fi endfor showstats;
                                                   let!!=skipto;

{let}
{path}
{-(15)}
{-(12)}
Path at line 18, before choices:
(0,0)..controls (15,4) and (-15,-12)
 ..(4,0)

Path at line 18, after choices:
(0,0)..controls (15,4) and (-15,-12)
 ..(4,0)

{(unknown path p~)=(path)}
{everyjob}
{vardef}
{let}
{vardef}
{def}
{elseif}
! Extra elseif.
l.21 elseif
            known"": `'pass[2.]; outer\; let next=\; delimiters ^~7! fi
I'm ignoring this; it doesn't match any if.

{known("")}
>> true
! Isolated expression.
<to be read again> 
                   :
l.21 elseif known"":
                     `'pass[2.]; outer\; let next=\; delimiters ^~7! fi
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   :
l.21 elseif known"":
                     `'pass[2.]; outer\; let next=\; delimiters ^~7! fi
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

{outer}
{let}
{delimiters}
! Missing symbolic token inserted.
<inserted text> 
                 INACCESSIBLE
l.21 ...ss[2.]; outer\; let next=\; delimiters ^~7
                                                  ! fi
Sorry: You can't redefine a number, string, or expr.
I've inserted an inaccessible symbol so that your
definition will be completed without mixing me up too badly.

! Extra tokens will be flushed.
<to be read again> 
                   !
l.21 ...s[2.]; outer\; let next=\; delimiters ^~7!
                                                   fi
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Forbidden token found while scanning to the end of the statement.
<inserted text> 
                ;
<to be read again> 
                   \
l.22 next\
          ; % the second pass will now compute silently; the first pass will...
A previous error seems to have propagated,
causing me to read past where you wanted me to stop.
I'll try to recover; but if the error is serious,
you'd better type `E' or `X' now and fix your file.

{\}
{batchmode}

! An expression can't begin with `endgroup'.
<inserted text> 
                0
<to be read again> 
                   endgroup
l.23 batchmode; ^~7,endgroup
                             pausing:=1; exitif p exitif boolean pen pencirc...
I'm afraid I need some sort of value in order to continue,
so I've tentatively inserted `0'. You may want to
delete this zero and insert something else;
see Chapter 27 of The METAFONTbook for an example.

! Missing ` INACCESSIBLE' has been inserted.
<to be read again> 
                   endgroup
l.23 batchmode; ^~7,endgroup
                             pausing:=1; exitif p exitif boolean pen pencirc...
I found no right delimiter to match a left one. So I've
put one in, behind the scenes; this may fix the problem.

! Extra `endgroup'.
<recently read> endgroup
                        
l.23 batchmode; ^~7,endgroup
                             pausing:=1; exitif p exitif boolean pen pencirc...
I'm not currently working on a `begingroup',
so I had better not try to end anything.

{pausing:=1}
{exitif}
{exitif}
{pencircle}
{endfor}
! Extra `endfor'.
l.23 ...itif p exitif boolean pen pencircle endfor
                                                  
I'm not currently working on a for loop,
so I had better not try to end anything.

{scantokens}
{begingroup}
{message}
{char(0)}
{("^^@")&("watch this")}
^^@watch this
{-(1)}
{char(-1)}
{("pair p[],';")&("^^ff")}
{endgroup}
{pen(future pen)}
{boolean(true)}
{true}
! No loop is in progress.
<to be read again> 
                   pair
<scantokens> pair
                  p[],';^^ff
<to be read again> 
                   path
l.25 path
          p[][]p,w,qw; qw=(1,-2)..(2,-1)..(2.5,0.5)..(1,2)..(turningnumber',...
Why say `exitif' when there's nothing to exit from?

>> p
! Undefined condition will be treated as `false'.
<to be read again> 
                   pair
<scantokens> pair
                  p[],';^^ff
<to be read again> 
                   path
l.25 path
          p[][]p,w,qw; qw=(1,-2)..(2,-1)..(2.5,0.5)..(1,2)..(turningnumber',...
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

{false}
! Missing `;' has been inserted.
<to be read again> 
                   pair
<scantokens> pair
                  p[],';^^ff
<to be read again> 
                   path
l.25 path
          p[][]p,w,qw; qw=(1,-2)..(2,-1)..(2.5,0.5)..(1,2)..(turningnumber',...
After `exitif <boolean exp>' I expect to see a semicolon.
I shall pretend that one was there.

{pair}
! Text line contains an invalid character.
<scantokens> pair p[],';^^ff
                            
<to be read again> 
                   path
l.25 path
          p[][]p,w,qw; qw=(1,-2)..(2,-1)..(2.5,0.5)..(1,2)..(turningnumber',...
A funny symbol that I can't read has just been input.
Continue, and I'll forget that it ever happened.

{path}
{-(2)}
{-(1)}
{turningnumber((xpart ',ypart '))}
Path at line 25, before choices:
(1,-2){curl 1}
 ..(2,-1)
 ..(2.5,0.5)
 ..(1,2)
 ..{curl 1}(0,2.5)

Path at line 25, after choices:
(1,-2)..controls (1.37755,-1.71404) and (1.71404,-1.37755)
 ..(2,-1)..controls (2.33353,-0.55965) and (2.59729,-0.04124)
 ..(2.5,0.5)..controls (2.36812,1.23369) and (1.6712,1.65662)
 ..(1,2)..controls (0.66821,2.16974) and (0.33485,2.33641)
 ..(0,2.5)

{(unknown path qw)=(path)}
{numeric}

]]->] ]
>> p[[ [-1]
! Isolated expression.
<to be read again> 
                   ]
]]->]
      ]
l.26 numeric p[][]; p[[ [$] ]]
                              =10000000000000000; "this string constant is i...
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   ]
]]->]
      ]
l.26 numeric p[][]; p[[ [$] ]]
                              =10000000000000000; "this string constant is i...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Enormous number has been reduced.
l.26 numeric p[][]; p[[ [$] ]]=10000000000000000
                                                ; "this string constant is i...
I can't handle numbers bigger than about 4095.99998;
so I've changed your constant to that maximum amount.

! Incomplete string token has been flushed.
l.26 ...00000; "this string constant is incomplete
                                                  
Strings should finish on the same line as they began.
I've deleted the partial string; you might want to
insert another by typing, e.g., `I"new string"'.

{string}
! Declared variable conflicts with previous vardef.
<to be read again> 
                   ,
l.27 string foo[]p,
                   p~if true:[];
You can't use, e.g., `numeric foo[]' after `vardef foo'.
Proceed, and I'll ignore the illegal redeclaration.

{if}
{true}
{true}
{boolean}
{fi}
{showvariable}
boolean.boolean=unknown boolean
! OK.
l.28 ...,boolean fi.boolean; showvariable boolean;
                                                   def\\= =end enddef;

{def}
Runaway definition?
=
! Forbidden token found while scanning the definition of \\.
<inserted text> 
                enddef
<to be read again> 
                   end
l.28 ...boolean; showvariable boolean; def\\= =end
                                                   enddef;
I suspect you have forgotten an `enddef',
causing me to read past where you wanted me to stop.
I'll try to recover; but if the error is serious,
you'd better type `E' or `X' now and fix your file.

 ) 
Here is how much of METAFONT's memory you used:
 33 strings out of 6131
 121 string characters out of 77208
 5319 words of memory out of 262141
 531 symbolic tokens out of 9500
 3i,69n,0r,3p,111b stack positions out of 300i,300n,1000r,150p,3000b

