#
# Tests for IEEE infinity and nan functions
#

set test infnan-setup
send "clear
a = Inf;
b = NaN
c = rand ();\n"
expect {
	-re "$resync"
}

set test infnan-1
send "finite (a)\n"
expect {
  -re "ans = *0$nl.*$prompt$"	{ pass "$test" }
  -re "ans = *1$nl.*$prompt$"	{ fail "$test" }
}

set test infnan-2
send "isinf (a)\n"
expect {
  -re "ans = *1$nl.*$prompt$"	{ pass "$test" }
  -re "ans = *0$nl.*$prompt$"	{ fail "$test" }
}

set test infnan-3
send "isnan (a)\n"
expect {
  -re "ans = *0$nl.*$prompt$"	{ pass "$test" }
  -re "ans = *1$nl.*$prompt$"	{ fail "$test" }
}

set test infnan-4
send "finite (b)\n"
expect {
  -re "ans = *0$nl.*$prompt$"	{ pass "$test" }
  -re "ans = *1$nl.*$prompt$"	{ fail "$test" }
}

set test infnan-5
send "isinf (b)\n"
expect {
  -re "ans = *0$nl.*$prompt$"	{ pass "$test" }
  -re "ans = *1$nl.*$prompt$"	{ fail "$test" }
}

set test infnan-6
send "isnan (b)\n"
expect {
  -re "ans = *1$nl.*$prompt$"	{ pass "$test" }
  -re "ans = *0$nl.*$prompt$"	{ fail "$test" }
}

set test infnan-7
send "finite (c)\n"
expect {
  -re "ans = *1$nl.*$prompt$"	{ pass "$test" }
  -re "ans = *0$nl.*$prompt$"	{ fail "$test" }
}

set test infnan-8
send "isinf (c)\n"
expect {
  -re "ans = *0$nl.*$prompt$"	{ pass "$test" }
  -re "ans = *1$nl.*$prompt$"	{ fail "$test" }
}

set test infnan-9
send "isnan (c)\n"
expect {
  -re "ans = *0$nl.*$prompt$"	{ pass "$test" }
  -re "ans = *1$nl.*$prompt$"	{ fail "$test" }
}
