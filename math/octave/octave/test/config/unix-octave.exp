if ![info exists prompt] then {
    set prompt "octave:\[0-9\]*> "
}

if ![info exists nl] then {
    set nl "(\[\r\n\])*"
}

if ![info exists resync] then {
    set resync ".*$prompt$"
}

#
# octave_version -- extract and print the version number of octave
#
proc octave_version {} {
	global OCTAVE
	set tmp [exec $OCTAVE -v]
	regexp "version *\[0-9\].\[0-9\]*" $tmp version
	clone_output "[which $OCTAVE] $version\n"
	unset tmp
	unset version
}

#
# octave_load -- loads the program
#
proc octave_load { arg } {
	#
}

#
# octave_exit -- quit and cleanup
#
proc octave_exit {} {
	#
}

#
# octave_start -- start octave running
#
proc octave_start {} {
	global OCTAVE
	global OCTAVE_SCRIPT_PATH
	global prompt
	global spawn_id
	global verbose
	global timeout

	if { $verbose > 1 } {
		send_user "starting $OCTAVE\n"
	}
#
# It might take a long time to start Octave, but we shouldn't leave
# the timeout period at a minute for the real tests.
#
	set tmp $timeout
	set timeout 60
	if [ llength $OCTAVE_SCRIPT_PATH ] {
		spawn $OCTAVE -q -p $OCTAVE_SCRIPT_PATH
	} else {
		spawn $OCTAVE -q
	}
	set timeout $tmp

	expect {
		-re "No such file.*" { error "Can't start $OCTAVE"; exit 1 }
		-re "$prompt$" { }
		timeout { error "Failed to spawn $OCTAVE (timeout)"; exit 1 }
	}
#
# Always turn off paging!
#
	send "page_screen_output = \"false\";\n"
	expect {
		-re ".*$prompt$"		{ }
	}
}

#
# Octave should never take very long to respond to the tests we are
# going to use.
#
set timeout 5

#
# expectations that clean up in case of error. Note that `$test' is
# a purely local variable.
#
# The first of these is used to match any bad responses, and resynchronise
# things by finding a prompt. The second is a timeout error, and shouldn't
# ever be triggered.
#
#expect_after {
#	-re "\[^\n\r\]*$prompt$" {
#		fail "$test (bad match)"
#		if { $verbose > 0 } {
#			regexp ".*\r\n(\[^\r\n\]+)(\[\r\n\])+$prompt$" \
#						$expect_out(buffer) "" output
#			send_user "\tUnmatched output: \"$output\"\n"
#		}
#	}
#	timeout {
#		fail "$test (timeout)"
#	}
#}

octave_start
