Tue Jul 20 04:09:32 1993  John W. Eaton  (jwe@june.che.utexas.edu)

	* Version 0.74 released.

	* doinstall.sh (version): Run `./octave -v' to get the version
	number instead of grabbing it from version.h.
	* Fail if we can't get a version number.
	* Install ./octave, not src/octave.

	* Makefile.in (binary-dist): Don't depend on all.
	* Link src/octave to ./octave.  (Now that there's no source in
	binary distributions, why have a src directory?)

	* file-io.cc (process_scanf_format): Rename local variable `i' to
	`chars_from_fmt_str'.
	* (process_printf_format): Likewise.

	* sighandlers.cc (can_interrupt): New global variable.
	* (sigint_handler): Use it to decide whether to jump to top level.
	* octave.cc (main): Set it after calling setjmp.

	* octave.cc (main): Declare saved_sigint_handler to be volatile.

	* tree.cc, tree-plot.cc, t-builtins.cc, pager.cc, g-builtins.cc,
	file-io.cc: Terminate strstream strings with ends instead of just
	using '\0'.

	* file-io.cc (process_scanf_format): Skip leading white space for
	%s conversions.
	* (fopen_file_for_user): Pass tree_constant arg by reference.
	* (do_scanf): If doing fprintf, don't fail if first arg is a
	string.

Mon Jul 19 16:00:22 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* symtab.cc (pstrcmp): Declare to take char** args, not char*.

Sun Jul 18 13:02:34 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* file-io.cc (return_valid_file): Pass arg by reference.

	* file-io.cc (fclose_internal, fgets_internal, fseek_internal):
	Eliminate unnecessary casts to double.

	* file-io.cc (return_valid_file, fgets_internal, fopen_internal,
	do_printf, do_scanf): Use is_string_type instead of doing the
	comparison ourselves.
	* g-builtins.cc (builtin_exist, builtin_getenv,
	builtin_shell_command): Ditto.
	* tc-colloc.cc (collocation_weights): Ditto.
	* tc-extras.cc (eval_string, get_user_input): Ditto.
	* tc-rand.cc (rand_internal): Ditto.
	* tree-plot.cc (tree_subplot_list::print): Ditto.
	* variables.cc (is_valid_function, octave_string_variable): Ditto.

Thu Jul 15 02:29:03 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* doc/Makefile.in (TEXINFO): Distribute texinfo.tex too.

	* t-builtins.cc (load_variable): Warn if replacing local symbol
	with global from file.
	* Warn if variable is not marked as global in a file, but already
	exists as a global symbol, then go ahead and load it as a global.

Tue Jul 13 01:47:48 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* lex.l (lookup_identifier): Never alias to global here.
	* tree.cc (do_lookup): Don't alias formal parameters to global.
	* variables.cc (force_global): Likewise.
	* symtab.cc (symbol_table::bind_globals): Likewise.

	* symtab.h (symbol_record::formal_param): New field.
	* symtab.cc (symbol_record::mark_as_global_parameter): New function.
	* (symbol_record::is_formal_parameter): Ditto.
	* tree.cc (tree_identifier::mark_as_formal_parameter): Ditto.
	* (tree_parameter_list::mark_as_formal_parameters): Ditto.
	* parse.y (param_list): Use it to tag formal parameters.
	* (func_def1): Ditto.

	* arith-ops.cc (DIVIDE_BY_ZERO_ERROR): On IEEE machines, allow
	divide by zero errors to be suppressed.
	* user-prefs.h (warn_divide_by_zero): New user preference.
	* user-prefs.cc (warn_divide_by_zero): New function.
	* builtins.cc (builtin_string_variables): Install it with default
	value of true.

	* tree.cc (tree_multi_assignemnt_expression): Use tree_return_list
	instead of tree_param_list.
	* (tree_multi_assignment_expression:eval): Make it work.

	* tree.cc (tree_return_list): New class.  Allow index expressions
	and identifiers in return lists.
	* (tree_matrix::to_return_list): Rename from to_param_list.
	* parse.y (expression): Use it.

	* parse.y: Increment and decrement maybe_screwed_again instead of
	just setting it to zero or one.

Mon Jul 12 03:23:40 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tc-assign.cc (tree_constant_rep::do_matrix_assignment): Handle
	case of lhs being of unknown type.

	* lex.l (check_for_garbage_after_fcn_def): Also ignore trailing
	commas and semicolons.

Sun Jul 11 00:08:20 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.73.1 released.

	* symtab.cc (symbol_record::alias): Also copy pointer to sv_fcn.

Sat Jul 10 14:34:00 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree.cc (tree_function::eval (int, char **, int): New function.

	* symtab.cc (symbol_table::bind_globals): New function.
	* tree.cc (tree_function::eval): Use it to associate local symbols
	with global data.

	* symtab.cc (alias): Add optional parameter `force'.

	* Version 0.73 released.

	* pr-output.cc: Use D_NINT instead of NINT in some cases to avoid
	overflow problems on systems that don't have IEEE Inf.
	* mappers.cc (round): Likewise.  Also avoids conversion of Inf to
	INT_MAX on systems that do have IEEE Inf.

	* builtins.h: Remove definition of NINT.
	* tree.h: Likewise.
	* tree-const.h: Likewise.

	* utils.cc (NINT): Move function here and improve handling of
	extreme values.
	* (D_NINT): New function.

	* scripts/isempty.m: Don't require the number of rows and columns
	to both be zero.

Thu Jul  8 16:25:50 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.72.2.

	* configure.in: Do a better job of grabbing the last argument as
	the target_host_type and avoiding setting it to things like
	--prefix=/foo/bar

	* tree-const.cc (tree_constant_rep::save): Add default case for
	mark_as_global switch to avoid warnings from gcc.

	* variables.cc (force_global): Cope with symbol table changes.
	* tree.cc: (tree_identifier::do_lookup): Likewise.
	* lex.l (lookup_identifier): Likewise.
	* builtins.cc (install_builtins): Likewise.

	* symtab.cc, symtab.h: Massive internal rewrite.

Wed Jul  7 02:18:01 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tc-assign.cc (tree_constant_rep::do_scalar_assignment): If rhs
	is a scalar type, also handle case of lhs being of unknown type.
	* Be sure to set the new type of the lhs.

	* tree-base.h: Don't include symtab.h.
	* tree-const.h: Ditto.

Tue Jul  6 22:47:28 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* parse.y (func_def2): Remove the function name from the top-level
	symbol table if defining on command line (an M-file would never be
	parsed if there was already an entry with the same name in the top
	level symbol table).

	* parse.y (word_list_command): Allow clear without any arguments.
	* tree.cc (word_list_command::eval): Handle word list commands
	with no arguments.

Mon Jul  5 14:43:30 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.72.1.

	* help.cc (operators): Document the double quote character.

	* lex.l (getting_help): Delete unused variable.
	* (HELP_FCN): New exclusive start state.
	* ({IDENT}{S}*): Set start state to HELP_FCN instead of setting
	getting_help.
	* ({IDENT}/{S}*=): Likewise.

	* symtab.cc (symbol_table::load): Delete unused function.

	* tree-const.cc (tree_constant::load): Return flag telling whether
	the constant is global.
	* t-builtins.cc (builtin_load): Handle global variables.
	* (builtin_save): Likewise.

	* symtab.cc (symbol_record::save): Don't save builtin variables
	(variables marked as eternal are assumed to be builtin).

	* symtab.cc (symbol_record::mark_from_global): New function.
	* (symbol_def::undefine): Add optional argument to prevent
	deleting symbol's definition.
	* (symbol_table::undefine): If this variable has been marked as
	defined from a global, call symbol_def::undefine with arg = 1.
	* tree.cc (tree_identifier::do_lookup): If a local symbol is
	defined from a global, mark it as such.

	* symtab.cc (symbol_record::define (symbol_record*)): Delete
	unused function.

	* tree.cc (tree_identifier::do_lookup (int&)): Use operator=
	instead of symbol_record::define().
	* variables.cc (force_global (char*)): Likewise.

Sun Jul  4 01:27:44 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* symtab.cc (symbol_record): Define copy constructor and operator=.

	* builtins.cc (install_builtins): Make `i' and `j' read-only
	functions.

	* symtab.cc (symbol_record::define): Respect read-only status of
	variables and functions.

Sat Jul  3 19:11:31 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* user-prefs.h (print_empty_dimensions): New user preference variable.
	* user-prefs.cc (print_empty_dimensions): New function.
	* builtins.cc (print_empty_dimesions): Make default value true.
	* tree-const.cc (tree_constant_rep::eval): Use value here.

	* cond.m: Handle empty matrices.
	* tc-det.m (determinant): Likewise.
	* tc-inv.m (inverse): Likewise.

	* tc-hess.cc (hess): Use gripe_square_matrix_required instead of
	calling error.
	* tc-schur.cc (schur): Likewise.

	* builtins.cc (propagate_empty_matrices): Change default value to
	true.

	* tree-const.cc (tree_constant_rep::eval): If a matrix has zero
	rows or columns, also print the dimension along with the `[]'
	symbol.

	* tree-const.cc (do_binary_op): If ok to propagate empty matrices,
	go ahead and do the binary operation so that the result will have
	consistent dimensions.
	* (do_unary_op): Likewyse.

	* tc-extras.cc (get_dimensions): Don't force both nr and nc to
	zero if one is.
	* Matrix.cc, DiagMatrix.cc, ColVector.cc, RowVector.cc: Handle
	matrices with zero dimensions in a more consistent fashion.

Thu Jul  1 00:27:01 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* perror.m: New M-file.

	* LP.h, LP.cc: New interface for linear programmming.
	* LPsolve.h LPsolve.cc: New files to implement linear programming
	using lp_solve.

	* NPSOL.cc (minimize): Also return the vector of Lagrange
	multipliers.
	* tc-npsol.cc (npsol): Optionally return them.

	* QPSOL.cc (minimize): Also return the vector of Lagrange
	multipliers.
	* tc-qpsol.cc (qpsol): Optionally return them.

	* tc-qpsol.cc (qpsol): Make it work.

Wed Jun 30 02:19:00 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* g-builtins.cc (builtin_lpsolve): New function.
	* (builtin_qpsol): Ditto.
	* builtins.cc (general_functions): Add them to the list.

	* tc-lpsolve.cc: New file.
	* tc-qpsol.cc: Ditto.
	* src/Makefile.in: Add them to the list of SOURCES and DLD_OBJECTS.

Tue Jun 29 15:02:07 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* liboctave/DAE.cc (integrate): If stop_time_set is false, reset
	default value for info[3].
	* liboctave/ODE.cc (integrate): Likewise, reset default values of
	iopt and itask.

	From Thorsten Ohl <ohl@physics.harvard.edu>:
	* config.guess: Add check for NeXT.
	* configure.in: Add check for NeXT so that readline is configured
	properly (really need to improve readline's configuration scheme).
	* sysdep.cc (malloc_handler): New function for handling malloc
	errors on NeXT systems.

	* octave.cc (main): Call sysdep_init before anything else.

	* sysdep.cc: New file for system dependent things.

	* octave.cc (initialize_globals): Only pass argv[0] since that's
	the only thing that's used.

Sat Jun 26 13:00:50 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree.cc (tree_builtin::eval (int, char**, int)): Don't panic if
	called for something other than a text_fcn.

	* t-builtins.cc (builtin_cd): Rewrite to fix bogus memory
	problems.

Fri Jun 25 15:23:03 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* t-builtins.cc (builtin_cd): Don't delete value returned by
	get_working_directory.
	* g-builtins.cc (builtin_pwd): Likewise, and simplify.

	* utils.cc (make_absolute): Always create a new copy to return.
	* utils.cc (change_to_directory): Don't delete pointer returned
	from get_working_directory().
	* (file_in_path): Likewise.

Thu Jun 24 16:48:38 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* lex.l ({IDENT}{S}*): Always insert a comma if the next token
	doesn't look like some sort of operator, not just if
	convert_spaces_to_comma is also true (it may have been turned off
	by BIN_OP_RETURN).

	* tree-const.h (matrix_ptr): Delete function.
	* tc-extras.cc (frobit): Delete function.
	* (get_dimensions): New function.
	* (identity_matrix): Completely rewrite.
	* (fill_matrix): Likewise.

Wed Jun 23 13:50:16 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Matrix-ext.cc (SCHUR::init): Also allow ord flag to be lowercase.
	* (ComplexSCHUR::init): Ditto.
	* tc-schur.cc (schur): Likewise.

	* Matrix-ext.cc (SCHUR::init): Declare sort as char, not char*,
	and pass its address to Lapack.
	* (ComplexSCHUR::init): Ditto.

	* Matrix-ext.cc (SCHUR::select_dig): Make static, and move ahead
	of first reference in file.
	* (SCHUR::select_ana): Likewise.
	* (ComplexSCHUR::select_complex_dig): Likewise.
	* (ComplexSCHUR::select_complex_ana): Likewise.

	* builtins.cc (install_builtins): Add `J' as an alias for `I'.

	* builtins.cc (install_builtins): Always create a new
	tree_constant for each variable, since the symbol table doesn't
	know how to share them.

	* tc-schur.cc (schur): Use warning and error functions instead of
	writing directly to cerr.
	* tc-hess.cc (hess): Ditto.

	* src/Makefile.in (DLD_OBJECTS): Include tc-schur.o and tc-hess.o.
	* (SOURCES): Add tc-schur.cc tc-hess.cc.

	* Merge Schur and Hessenberg changes:

	Fri Mar 19 11:01:19 1993  R. Bruce Tenison (btenison@eng.auburn.edu)

	* src/builtins.cc: Changed schur definition to include one more 
	input.  Also changed the help line description
	* src/g-builtins.cc: Changed builtin_schur to accept two inputs
	Also changed the information to explain ordered schur operation.
	* src/tc-schur.cc Added extensions to the SCHUR and ComplexSCHUR
	calls to pass extra paramater.  Also added check for proper param.
	* liboctave/Matrix.h: Modified declarations dgeesx and zgeesx to
	accept address of select function.  Modified class structures for
	SCHUR and ComplexSCHUR to accept extra ordered schur param.
	* liboctave/Matrix-ext.cc: Added extensions for the extra ordered
	schur paramater.

	Wed Mar 17 15:23:14 1993  R. Bruce Tenison (btenison@eng.auburn.edu)

	* liboctave/Matrix-ext.cc (HESS and ComplexHESS): Added the 
	Hessenburg decomposition routines.
	* liboctave/Matrix.h Added fortran lapack functions definitions
	used in the Hessenburg procedure.
	* src/g-builtins.cc (builtin_hess): Hessenburg Decomposition routine
	added
	* src/g-builtins.h (builtin_hess): Added extern definition.
	* liboctave/Matrix.h Added classed HESS and ComplexHESS
	* src/tree_const.h added defs for hess.
	* src/tc-hess.cc (hess): New file for hess function.

	Tue Mar 16 10:46:32 1993  R. Bruce Tenison (btenison@eng.auburn.edu)

	* src/g-builtins.cc (builtin_schur): Schur Decomposition routine
	added.
	* src/g-builtins.h (builtin_schur): Added extern definition.
	* liboctave/Matrix.h Added Classes SCHUR and Complex SCHUR, and
	added defs for zgeesx and dgeesx (lapack schur decomp)
	* liboctave/Matrix-ext.cc (SCHUR and Complex SCHUR): Ditto.
	* src/tree-const.h added defs for schur.
	* src/tc-schur.cc (schur): New file for schur function.

Tue Jun 22 20:18:52 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* lex.l (check_for_garbage_after_fcn_def): New function
	* parse.y (fcn_end_or_eof): If reading from an M-file, use it to
	print warning about trailing garbage after the end of a function
	has been found.

Mon Jun 21 20:21:01 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tc-assign.cc (tree_constant_rep::assign): Handle case of
	assignment to unknown constant too.
	* (tree_constant_rep::do_scalar_assignment): Don't fail for
	unknown_constant type.
	* (tree_constant_rep::do_matrix_assignment): Likewise.

	* tree-const.cc (rows): Return 0 for unknown_constant type.
	* (columns): Likewise.

	* tree.cc (tree_identifier::assign): Defer defining symbol until
	assignment is successful.
	* When creating a new dummy tree_constant to assign a value to,
	leave it an unknown_constant type.

	* tc-assign.cc (do_scalar_assignment): If the right hand side
	isn't a scalar, maybe try to resize instead.
	* (do_matrix_assignment): For A(:,int) and A(int,:) cases, also
	resize if left hand side is a scalar.

	* norm.m: Allow "fro" to work for scalars and vectors too.

Sun Jun 20 01:17:03 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* NLConst.cc: New file.  Move inline function definitions here
	from NLConst.h.

	* Objective.cc: New file.  Move inline function definitions here
	from Objective.h

	* tree.cc (tree_word_list_command::eval): Call strsave for argv[0]
	too, and delete argv before returning.
	* (tree_builtin::eval): Likewise, for text functions with no
	arguments.

Sat Jun 19 01:37:09 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* octave.cc (parse_and_execute): Delete calls to delete_buffer
	and switch_to_buffer, since that is taken care of by unwinding the
	frame.

Fri Jun 18 00:08:36 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree.cc (tree_matrix::eval): Delete useless direct = ptr->direct
	and ptr = ptr->next statements from size-determining loop.

	* parse.y (opt_list): New rule.  Replace all occurrences of list
	with opt_list.

	* tree.cc: (tree_index_expression::eval (int, int)): Don't
	complain if the index expression has an empty argument list.

	* octave.cc (initialize_globals): Check return value of
	getenv ("HOME") against NULL, not the global variable
	home_directory that we are trying to initialize.

	* tree.cc (tree_function::eval): Quick return if command list
	is empty.
	* parse.y (func_def3): Allow empty function bodies.

Thu Jun 17 02:08:02 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree.cc (tree_while_command): Add constructor for case of
	expression only.
	* parse.y (statement): Allow empty command list for while commands.

	* parse.y (list): Allow empty commands in more places.  This ups
	the shift/reduce error count by 6, to 19.

	* octave.cc (execute_startup_files): Don't delete sd.

	* octave.cc (initialize_globals): Make copies of all strings.
	* Store more humorous messages if things fail.

Tue Jun 15 11:03:39 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tc-extras.cc (get_user_input): Finish incomplete change to get
	input using readline.

	* tc-extras.cc (match_sans_spaces): New function.
	* (get_user_input): Use it when checking to see if the user
	entered a `quit' command.

	* liboctave/Makefile.in: Don't distribute Makedeps.in or include
	Makedeps since we generate dependencies automatically now.
	* configure.in: Don't create liboctave/Makedeps.

Sun Jun 13 18:31:17 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* src/xdiv.cc (xdiv): Solve least-squares problem if system of
	equations is not square, or if it is singular.
	* (xleftdiv): Likewise.

	* liboctave/Matrix.h (Matrix::lssolve): New functions for
	least-squares solutions of linear systems.
	* (ComplexMatrix::lssove): Ditto.

Sat Jun 12 19:07:07 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* libcruft/misc/xstopx.f (xstopx): Call dostop, not do_stop.
	* libcruft/misc/dostop.c: Rename from do_stop.c
	* (dostop): Likewise.

	* src/mappers.cc (xisnan (double)): Define even for systems that
	don't have xisnan by always returning false.
	* (xisnan (const Complex&)): Likewise.

Fri Jun 11 19:54:58 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* doc/Makefile.in (install): Try harder to install info files.

	* libcruft/Makefile.in (install): Run ranlib on installed library.
	* liboctave/Makefile.in (install): Ditto.
	* readline/Makefile.in (install): Ditto.

Thu Jun 10 00:15:41 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.72 released.

	* libcruft/*/*.f: Don't call xstopx with '' since some Fortran
	compilers object to zero-length strings.
	* libcruft/misc/xstopx.f (xstopx): Don't print empty strings or
	single blanks.
	* libcruft/misc/gen-d1mach.c (main): Likewise, for generated code.

	* test/Makefile.in (check): Set the Tcl variable OCTAVE_PATH.
	* test/config/unix-octave.exp: Pass OCTAVE_PATH to OCTAVE using
	the new -p flag.

	* builtins.cc (install_builtins): Use load_path instead of calling
	default_path().

	* octave.cc (load_path): New global variable.
	* (initialize_globals): Initialize it here by calling default_path().
	* (main): Call initialize_globals() before getting command line
	arguments.
	* Accept new argument, -p PATH.

	* octave.cc (clean_up_and_exit): Don't print a message when Octave
	exits.

	* doinstall.sh: Install M-files in $(libsubdir), not $(libdir).
	* Use mkpath to create directories.
	* Extract version from version.h.

	* Makeconf.in (version): Compute version just once.

	* (libsubdir): New directory that includes version number, for
	installing M-files in (old versions of Octave may not be able to
	understand new M-files).

	* src/Makefile.in, libcruft/Makefile.in, liboctave/Makefile.in,
	doc/Makefile.in, readline/Makefile.in, scripts/Makefile.in
	(install): Use mkpath to create directories.
	* scripts/Makefile.in (install): Install M-files in $(libsubdir),
	not $(libdir).

	* mkpath.c: New file, from Emacs-19.
	* Makefile.in (mkpath): New rule.
	* (all): Depend on mkpath
	* (binary-dist): Distribute it.

	* config.guess: Update from bothner@cygnus.com.

	* lex.l (<STRING>{QSTR}*[\n\']): Set start state to 0 or MATRIX,
	depending on value of braceflag.
	* (<DQSTRING>{DQSTR}*[\n\"]): Ditto.

	* tree.cc (tree_matrix::eval): Make sure that strings are nul
	terminated.

Tue Jun  8 16:08:10 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* octave.cc (clean_up_and_exit): Print `bye-bye' here.
	* g-builtins.cc (builtin_quit): Not here.

	* pager.cc (terminal_columns): If screenwidth <= 0, return a
	default value of 80 columns.
	* (terminal_rows): Likewise for screenheight and a default of 24
	rows.

	* octave.cc (parse_and_execute): Don't fiddle with interactive
	states since that screws paging output.
	* tree.cc (parse_m_file): Likewise.

	* parse.y (input): For `simple_list error END_OF_INPUT' and
	`error END_OF_INPUT' use ABORT_PARSE.
	* Always accept `simple_list END_OF_INPUT'.
	* Always abort for `END_OF_INPUT'.

Mon Jun  8 13:55:41 1993  John C. Campbell  (jcc@schoch.che.utexas.edu)

	* file-io.h (fopen_file_for_user): New function declaration.

	* file-io.cc (fopen_file_for_user): New function.
	* (fgets_internal): If file doesn't exist open it for user,
	also return (double) -1 on EOF
	* (fseek_internal), (ftell_internal), (frewind_internal),
	(do_printf): Ditto.
	* (fopen_internal): Remove warn_on_not_open flag, limit warns.

Mon Jun  7 00:28:13 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* file-io.cc (do_scanf): Use `type' wherever possible instead of
	hardcoding name in messages.
	* (do_printf): Ditto.

	* file-io.cc (fflush_internal): If flushing stdout, flush output
	to the pager instead of calling fflush on a stream.
	* (do_printf): Make fprintf (stdout, ...) exactly the same as
	printf (...).
	* (do_scanf): Make fscanf (stdin, ...) exactly the same as
	scanf (...).

	* tc-extras.cc (get_user_input): Flush output to pager before
	prompting for input.

	* libcruft/Makefile.in (DISTFILES): Distribute STOP.patch to show
	the changes made to the Fortran sources.

	* libcruft/*/*.f: Replace STOP statements with calls to xstopx, so
	that Fortran programs won't just quit on us.

	* libcruft/misc/xstopx.f: New file.
	* libcruft/misc/do_stop.c: New file.
	* libcruft/misc/Makefile.in (SPECIAL): Add do_stop.c to the list.
	* (SPECIAL_DEPEND): Likewise, for do_stop.o.
	* libcruft/Makefile.in (CRUFT_OBJ): Ditto.

	* lex.l (")"): Don't pop the top of the in_brace_or_paren stack if
	it's empty.

Sun Jun  6 00:41:28 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* liboctave/CollocWt.cc (init): Always compute Gaussian quadrature
	weights instead of trying to compute Radau or Lobatto weights if
	the endpoints are included.
	* Really do compute roots and derivative weights corresponding to
	Legendre polynomials if alpha and beta are zero, even if the
	endpoints are included.

Sat Jun  5 22:19:55 1993  John C. Campbell  (jcc@schoch.che.utexas.edu)

	* builtins.cc (builtin_general_functions): Correct max arg counts
	for fscanf, scanf, and sscanf.

	* g-builtins.cc (builtin_fscanf): Correct argument checks.
	* (builtin_sscanf): Likewise.

	* file-io.cc (fopen_internal): Don't warn for opening new file.

	* file-io.cc (process_printf_format): Handle * for field width and
	precision.
	* Pass array of arguments and nargin instead of just one arg.
	* (do_printf): Call process_printf_format() with new args.

	* file-io.cc (process_scanf_format): New function to handle scanf
	dirty work.
	* (do_scanf): New function.

Sat Jun  5 14:09:41 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* lex.l (YY_FATAL_ERROR): Redefine here to keep from exiting on
	fatal scanner errors.

Fri Jun  4 16:35:25 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree.cc (tree_multi_assignment_expression::eval (int)): Check to
	see if result is NULL before trying to use it.

	* tc-extras.cc (get_user_input): Call gnu_readline() to get input.

Thu Jun  3 00:30:28 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* scripts/*.m: Convert single-quoted strings to use double quotes
	since the manual says they are better.

	* Version 0.71.10.

	* doc/Makefile.in (DISTFILES): Distribute octave.info*.

	* Makefile.in (.fname): Delete target and move actions back to the
	individual dist targets because this always needs to be done.
	* (binary-dist): Strip src/octave.

	* doinstall.sh: New file, for binary distributions.

Wed Jun  2 15:11:54 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Makefile.in (binary-dist): New target, just like dist, except
	also distribute libcruft.a, liboctave.a, libreadline.a and
	src/octave.

	* Makefile.in (.fname): New target.
	* (links-for-dist): New target.
	* (local-dist): Depend on .fname.
	* (dist): Depend on .fname and use links-for-dist.

	* octave.cc: Move code to print startup message to just after
	option processing so that any messages from startup files will
	appear after the normal startup message.

	* utils.cc (get_site_defaults): New function.
	* (OCTAVE_HOME): Provide default definition.

	* (SITE_DEFAULTS): Delete definition.
	* octave.cc (execute_startup_files): Use get_site_defaults instead.

	* src/Makefile.in (utils.o): Define OCTAVE_HOME to be $(prefix)
	here.

	* Makeconf.in: Don't define SITE_DEFAULTS or OCTAVE_M_FILE_DIR.

	* lex.l (do_string_escapes): Recognize `\"'.

Tue Jun  1 01:28:20 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.71.9.

	* parse.y (maybe_convert_to_ans_assign): Greatly simplify.

	* file-io.cc (File_info): Convert from struct to proper class.
	* (valid_mode): New function.

	* parse.y, parse.h, lex.l, tree-extras.cc (convert_to_ans_assign):
	Delete unused variable.

	* builtins.cc (SEEK_CUR): Set to 1 to match (normal) system values.
	* (SEEK_END): Likewise, set to 2.

	* statdefs.h: New file.
	* Makefile.in (INCLUDES): Add it to the list.
	* octave-hist.cc: Include it.
	* variables.cc (identifier_exists): Likewise.
	* utils.cc (is_newer): Likewise.

	* builtins.cc (SEEK_SET): New builtin varible.
	* (SEEK_CUR): Ditto.
	* (SEEK_END): Ditto.
	* (stdin): Ditto.
	* (stdout): Ditto.
	* (stderr): Ditto.

	* lex.l (strip_trailing_whitespace): New function.
	* ({IDENT}{S}*): Use it.
	* (<TEXT_FCN>[^ \t\n\;\,]*): Fix to grab trailing spaces.
	Use strip_trailing_whitespce() to delete it before returning.

Mon May 31 21:00:00 1993  John C. Campbell  (jcc@june.che.utexas.edu)

	* file-io.cc, file-io.h: New files to implement C-style file
	handling and I/O functions.
	* (do_printf): Move here from tc-extras.cc.
	* (process_printf_format): Likewise.  Also renamed from
	process_format.

Mon May 31 00:52:55 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* (tree_function::eval): Now that we can restore values, enable
	code to give error for attempts to call functions recursively.

	* octave.cc (parse_and_execute): Use unwind-protect functions to
	save and restore state.
	* tree.cc (parse_m_file): Likewise.
	* (tree_function::eval): Likewise.
	* tc-extras (eval_string): Likewise.

	* unwind-prot.cc (saved_variable): New class to hold values of and
	pointers to variables we want to restore.
	* (restore_saved_variable): New function.

	* unwind-prot.cc (unwind_protect_int_internal): New function.
	* (unwind_protect_ptr_internal): Ditto.
	* (unwind_protect_var_internal): Ditto.

	* unwind-prot.h (unwind_prot_int): New macro.
	* unwind-prot.h (unwind_prot_ptr): Ditto.
	* unwind-prot.h (unwind_prot_var): Ditto.

	* variables.cc (symbol_out_of_date ()): Move here from tree.cc.
	* (is_valid_function): Fix logic for finding a function
	definition, including checking to see if the current symbol
	definition is out of date.

	* tree-const.h (is_numeric_or_range_type): New function.
	* tree-const.h (is_string_type): New function.
	* tree.cc (tree_matrix::eval): Use !is_string_type() instead of
	is_numeric_type() to decide that we've seen something other than
	a string.

	* parse.y (maybe_warn_assign_as_truth_value ()): New function.
	* user-prefs.h (warn_assign_as_truth_value): New preference.
	* user-prefs.cc (warn_assign_as_truth_value ()): New function.
	* builtins.cc (string_variables): Add it to the list.

	* tree.h (tree_simple_assignment_expression): Rename class from
	tree_assignment_expression.
	* (tree_assignment_expression): New class, derived from
	tree_expression.
	* (tree_simple_assignment_expression): Derive from new
	tree_assignment_expression class, not tree_expression class.
	* (tree_multi_assignment_expression): Ditto.

Sun May 30 22:40:58 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* src/Makefile.in (%.d: %.cc): First remove target file, then
	redirect into tmp file, and finally move tmp file to target file
	only if creating tmp file was successful.
	* liboctave/Makefile.in (%.d: %.cc): Ditto.

Sat May 29 18:18:16 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree.cc (tree_constant *tree_multi_assignment_expression
	::eval (int print, int nargout)): New function.
	* (tree_constant tree_multi_assignment_expression::eval (int print)):
	Use it to do the real work.

	* tree.cc (tree_matrix::to_param_list ()): Also allow index
	expressions as long as the argument list is missing.

	* parse.y (ans_expression): Now that assignments are just
	expressions, don't convert expressions to assignemnts to `ans' if
	they already are assignments.
	* maybe_convert_to_ans_assign (tree *expr): New function to do the
	real work.

	* tree.cc (tree_multi_assignment_expression::
	is_assignement_expression ()): Return 1.

	* tree-base.h (tree::is_index_expression ()): New virtual
	function, returns 0.
	* tree.cc (tree_index_expression::is_index_expression ()): Return 1.

	* tree.cc (tree_assignment): Construct from tree_index_expression
	and a tree.
	* (tree_index_expression::ident ()): New function.
	* (tree_index_expression::arg_list ()): New function.

	* parse.y (variable): New rule, returns tree_index_expression.

	* parse.y: Rewrite assignment rules so that they are simply
	expressions, not special cases.
	* Rearrange fact and expression rules into expression (assignement
	or simple expression), simple_expr (binary and postfix expressions
	or secondary simple expression), and simple_expr1 (constants and
	prefix expressions) rules.
	* Delete fact rules.

	* parse.y: Make EXPR_EQ and EXPR_NE have the same precedence as
	the other relational operators.

Fri May 28 10:14:01 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* unix-octave.exp: Delete use of OCTAVEFLAGS.

	* test/config: New directory.
	* test/config/Makefile.in: New file.
	* test/config/unix-octave.exp: Rename from test/octave-init.exp.
	* test/Makefile.in (SOURCES): Delete octave-init.exp from list.
	* configure.in: Add test/config/Makefile to the list of Makefiles
	to build.

	* utils.cc (send_to_plot_stream): Plot lines by default.

Thu May 27 08:03:31 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* lex.l (\]): Don't pop the top of the in_brace_or_paren stack if
	it's empty.

	* tree.cc (tree_matrix::eval): Make it work for single element
	strings as well.

	* Version 0.71.8.

	* lex.l (next_token_is_postfix_unary_op): New function.
	* (<MATRIX>{SN}*\]{S}*): Use it as well, to decide whether to
	insert a comma.
	* (<MATRIX>{S}+): Likewise.
	* ({IDENT}{S}*): Likewise.

Wed May 26 15:37:27 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* pr-otput.cc (pr_any_float): Use form() now that iostream
	formatting bug has been fixed (libg++-2.3.1).

Mon May 24 15:36:22 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree.cc (any_arg_is_magic_colon): New function.
	* (tree_builtin::eval) Use it to avoid calling builtin functions
	with `:' arguments.

Sun May 23 14:07:19 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* g-builtins.cc (builtin_fprintf): Correct usage message.

Fri May 21 10:35:40 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.71.7.

	* octave.cc (main): Always reset_parser() before every call to
	yyparse(), not just on a longjmp return.

	* doc/Makefile.in (install): For now, don't try to install
	anything.

	* lex.l (<MATRIX>{S}+): Call next_token_is_bin_op() instead of
	making the check in line.
	* (<MATRIX>{SN}*\]{S}*): Likewise.
	* (<MATRIX>{S}+): Likewise.

	* lex.l (looks_like_bin_op): New function.
	* (next_char_is_space): Ditto.
	* (next_token_is_bin_op): Ditto.

	* lex.l ({IDENT}{S}*): If we're in a brace context and the next
	character is an open paren, set convert_spaces_to_comma to 0.
	* tree-const.cc (convert_to_str): New function.
	* g-builtins.cc (builtin_setstr): New function.
	* builtins.cc (builtin_general_functions): Add it to the list.

Thu May 20 17:56:15 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* doc/Makefile.in (SOURCES): Define to be all .texi files.
	* (octave.info): Depend on $(SOURCES).
	* (octave.dvi): New target.
	* Don't distribute the man page.

	* lex.l (<MATRIX>{S}+): If the next character is a plus or minus
	followed by a space or tab, don't insert a comma.  This makes
	input like [1 + 1] == 2 and input like [1 +1] == [1 1].
	* (<MATRIX>{SN}*\]{S}*): Likewise.

	* lex.l (<MATRIX>{S}+): Use in_brace_or_paren and
	convert_spaces_to_comma to decide whether to convert spaces to a
	comma.

	* lex.l ({IDENT}{S}*): If we're in a brace context and the next
	character is an open paren, set convert_spaces_to_comma to 0.

	* lex.l (<MATRIX>{SN}*\]{S}*): Even if we're still inside some braces,
	don't always push a comma onto the input.

	* lex.l (<MATRIX>{SN}*\]): Also grab trailing spaces.
	* ({IDENT}): Ditto.

	* lex.l (in_brace_or_paren): New stack to keep track of whether
	the closest enclosing scope is a pair of braces or parens.  When
	we see a `[' or a `(', push a flag on the stack.  When we see a
	`]' or a `)', pop the top of the stack.

	* lex.l (convert_spaces_to_comma): New flag to control lexer behavior.
	* (RETURN): Reset it to 1.
	* (most other returns): Reset it to 1.

	* lex.l (BIN_OP_RETURN): New macro.  Set convert_spaces_to_comma to 0.
	* (most binary operators): Use it instead of RETURN.

	* lex.l (match_any): New function.

Wed May 19 12:51:54 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Range.cc (nelem_internal): Don't allow ranges with more than
	INT_MAX elements.  Return -1 to indicate failure.
	* tree-const.cc (tree_constant_rep::tree_constant_rep (double,
	double, double)): Check nelem() to see if the range is valid.

	* pr-output.cc (all_elements_are_ints (Range&)): We only need to
	check the base and the increment, not the limit too.

	* Range.cc (nelem_internal): Move function definition here from
	Range.h and do a better job of determining the number of elements
	in the range.

Tue May 18 09:06:20 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.71.6.

	* tc-extras.cc (find_nonzero_elem_idx): Declare inner loop
	iteration variables that are used inside later nested loops
	in the outer enclosing scope to make this work for old and new
	language definitions (see the ARM, chapter 19: "ANSI/ISO
	Resolutions", 6.4/6.5: "The statement or statements immediately
	controlled by the condition in a selection-statement, or an
	iteration-statement introduce an implicit local scope".
	* xpow.cc (elem_xpow (Matrix&, Matrix&)): Likewise.

	* tree.cc (tree_identifier::parse_m_file (char*, int)): Set
	reading_script_file before calling parse_m_file and restore it
	afterward.

Mon May 17 20:04:54 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* octave.h (prog_name): Declare extern.
	* (raw_prog_name): Ditto.

	* f2c-compat.sh (ctest.c): Also write a dummy MAIN_ since gcc 2.4
	doesn't seem to create an executable now if there are unresolved
	externals, and the linker wants to see it on Suns.

Thu May 13 01:06:18 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Makefile.in (DISTFILES): Include Makeconf.in.

	* configure.in: Set defaults for CFLAGS, CXXFLAGS, LDFLAGS, and
	FFLAGS.
	* Don't substitute CDEBUG, COPTIMIZE, FOPTIMIZE, or CXXOPTIMIZE.
	* Use AC_PROGRAMS_CHECK instead of our own code for checking for a
	Fortran compiler.
	* Add Makeconf to the list of files to create.

	* src/Makefile.in (octave): Use ALL_LDFLAGS instead of LDFLAGS.

	* Makeconf.in (ALL_CFLAGS, ALL_CXXFLAGS, ALL_LDFLAGS): New macros.
	* Allow the user to set CFLAGS, CXXFLAGS, and FFLAGS without
	screwing things up.
	* (CDEBUG, COPTIMIZE, FOPTIMIZE, CXXOPTIMIZE): Delete.
	* Provide rules for making .o from .cc or .c files that use
	ALL_CXXFLAGS and ALL_CFLAGS.

	* src/Makefile.in: Generate dependencies automatically using the
	method described in the GNU make manual.
	* liboctave/Makefile.in: Likewise.

	* All Makefile.in files: Set TOPDIR and include $(TOPDIR)/Makeconf.
	* Makeconf.in: New file, for most configuration options.

	* tc-rand.cc (rand_internal): Return an empty matrix for rand (0).

Wed May 12 01:32:36 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* octave.cc (clean_up_and_exit): Call close_plot_stream before
	quitting.

	* Version 0.71.4.

	* pr-output.cc (octave_print_internal (ostrstream&, Matrix&)):
	Handle wrapping columns neatly, respecting value of split_long_rows.
	* (octave_print_internal (ostrstream&, ComplexMatrix&)): Ditto.
	* (octave_print_internal (ostrstream&, Range&)): Ditto.

	* user-prefs.cc (split_long_rows): New preference variable and
	function.
	* builtins.cc (builtin_string_variables): Add to list with default
	value == true.

Tue May 11 02:20:43 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* pr-output.cc (pr_max_internal): Don't count Inf or NaN when
	looking for max value.
	* (pr_min_internal): Likewise, for min values.

	* pr-output.cc (pr_any_float): Merge pr_float and pr_imag_float.

	* pr-output.cc (any_element_is_inf_or_nan (Matrix&)): New function.
	* (any_element_is_inf_or_nan (ComplexMatrix&)): New function.
	* (all set_format functions (except Range)): Consider Inf and NaN
	when computing field width (we'll either print "Inf" (possibly
	with a sign) or "NaN").

	* pr-output.cc (pr_float): Handle Inf and NaN.
	* (pr_imag_float): Ditto.

	* pr-output.cc (set_format_style): Make format short set precision
	to 3 and max field width to 8.

	* pr-output.cc (pr_float): Don't print a sign for -0.0.
	* (pr_imag_float): Ditto.

	* pr-output.cc (all set_format functions): Return the actual field
	width computed or 0 if free format.  For complex, return both real
	and imaginary field widths.
	* Include pager.h for terminal_rows() and terminal_columns().

	* pr-output.cc (pr_complex): If imaginary part is -0.0, print a
	minus sign but convert the value to 0.0 before printing.

	* octave.cc (parse_and_execute (FILE *, int)): Don't use readline
	to read commands from files.
	* (parse_and_execute (char *, int)): Set reading_script_file
	before calling get_input_from_file.

	* Version 0.71.3.

	* src/Makefile.in (deps): New target.
	* Update dependencies using the output from running `make deps'.

	* pr-output.cc (set_output_prec_and_fw): New function.
	* (set_format_style): Use it.
	* (set_format functions): Use user_pref variables for precision
	and field width.

	* variables.cc (octave_real_scalar_variable): New function.
	* buitlins.cc (builtin_string_varaibles): Add output_precision and
	max_field_width to the list (really need a separate list for
	numeric values...).
	* user-prefs.cc (set_output_max_field_width): New function to be
	called when output_max_field_width changes.
	* (output_precision): Likewise, for output_precision.

	* sighandlers.cc (pipe_handler_error_count): New global variable.
	* (sigpipe_handler): Use it to keep from printing more than one
	broken pipe message between prompts.
	* (input.cc): Reset pipe_handler_error_count before printing the
	prompt.

Mon May 10 13:06:52 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* sighandlers.cc (sigpipe_handler): Issue warning and return
	instead of aborting.

	* user-prefs.cc (all sv_* functions): Don't delete previous value
	of a preference string if the new value is bogus.

	* user-prefs.cc (all sv_* functions and all functions that handle
	user preferences): Return 0 for success, -1 for failure.
	* symbtab.cc (symbol_record::define): Check return value of sv_fcn
	and restore previous value on failure.
	* symtab.h (sv_Function typedef): Change to return int, not void.
	* builtins.h (sv_Function typedef): Ditto.

Sun May  9 18:25:00 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* user-prefs.cc (all sv_* functions): Issue a warning if the user
	gives us something that's not a string.

Sat May  8 23:40:59 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* ColVector.cc (ColumnVector::min): Upper loop limit is len, not 0.
	* (ComplexColumnVector::min): Ditto.
	* RowVector.cc (RowVector::min): Ditto.
	* (ComplexRowVector::min): Ditto.

Fri May  7 18:41:29 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* pr-output.cc (set_format_style): New function, extracted from
	builtin_format().
	* t-builtins.cc (builtin_format): Call set_format_style to do real
	work.

	* pr-output.cc: New file for special formatted printing funcions.
	* tree-const.cc (tree_constant_rep::eval): Use new functions.

	* user-prefs.cc (sv_pager_binary): New function.
	* user-prefs.h (user_preferences) Add new field, pager_binary.
	* builtins.cc (builtin_string_variables): Add PAGER to the list.
	* utils.cc (default_pager): New function.
	* Makefile.in: Define DEFAULT_PAGER for utils.cc, not pager.cc.
	* pager.cc (get_pager): Delete function.
	* Use user_pref.pager_binary instead of calling get_pager().

Thu May  6 11:05:06 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* pager.cc (pager_buf): Declare as static pointer to ostrstream.
	* (initialze_pager): Delete old pager_buf and create new one for
	each batch of output.  This is needed because once str() is called
	for pager buf, it will no longer grow.

	* pager.cc (maybe_page_output): Take care of deleting buffer after
	str() is called.
	* (flush_output_to_pager): Likewise.
	* t-builtins.cc (builtin_ls): Likewise.
	* (builtin_set): Likewise.
	* (builtin_show): Likewise.
	* tc-extras.cc (process_format): Likewise.
	* (process_format): Likewise.
	* tree-plot.cc (tree_plot_command::eval): Likewise.

Wed May  5 10:45:39 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* g-builtins.cc (builtin_shell_command): Buffer characters with an
	ostrstream and call maybe_page_output instead of writing directly
	to cout.
	* (builtin_warranty): Likewise.
	* tc-extras (do_printf): Likewise.
	* tree.cc (tree_identifier::eval): Likewise.
	* (tree_assignment_expression::eval): Likewise.
	* (tree_multi_assignment_expression::eval): Likewise.
	* tree-const.cc (tree_constant_rep::eval): Likewise.
	* t-builtins.cc (builtin_help): Likewise.
	* (builtin_ls): Likewise.
	* (builtin_who): Likewise.

	* user-prefs.h user-prefs.cc (page_screen_output): New preference.
	* builtins.cc (string_variables): Add to list with default value
	of true.

	* input.cc (octave_gets): If interactive, call flush_to_pager()
	before prompting. 

	* utils.cc (terminal_rows): Move to pager.cc
	* (terminal_columns): Likewise.
	* (get_pager): Likewise.

	* pager.h, pager.cc: New file to handle pager stuff.
	* src/Makefile.in: Fix things to distribute and compile them.

	* libcruft/Makefile.in (CRUFT_OBJ): Strip $(srcdir)/ and convert
	from .f to .o in two steps since some versions of GNU make strip
	the leading ./ from the output of $(wildcard), causing my pattern
	match to fail if compiling in the source tree.

Tue May  4 09:13:52 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* symtab.cc (symbol_record::define (symbol_record *)): Delete old
	name before saving new name.
	* (symbol_record::document): Likewise, for var.help and fcn.help.

	* parse.y (ABORT_PARSE): Renamed from DO_ABORT.

Mon May  3 01:00:04 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree.cc: Define destructors for every class in tree.h.  It
	appears that it should always be ok to delete everything in a
	command tree once we're done executing it.  Function definitions
	are still ok because the parser doesn't set global_command to the
	tree_function we've built (that's saved somewhere in the symbol
	table and shouldn't be deleted until we clear or redefine the
	function).

	* utils.cc (pathstring_to_vector): Do memory management here so
	callers don't have to.
	* (default_path): Likewise.

	* utils.cc (make_absolute): Return current_path (not a copy) since
	it is static.
	* (get_working_directory): Return the_current_working_directory
	(not a copy) since it is global.

	* utils.cc (cleanup_tmp_files): Delete filename when done.

	* parse.y: Replace output to cerr with calls to error() or warning().
	* DO_ABORT: New macro.  Use it instead of YYERROR for errors that
	we detect, and call yyerror since bison doesn't.
	* (param_list1): Detect invalid parameter lists.
	* (yyerror): Don't print pointer if it is past the end of the line.

Sun May  2 13:03:09 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tc-extras.cc (process_format): Use ostrstream instead of a
	fixed-size character string to buffer the format.

	* utils.cc (terminal_rows): Get info from readline variable
	instead of hardcoded constants.
	* (terminal_columns): Likewise.

	* utils.cc (maybe_page_output): New function.
	* t-builtins.cc (builtin_help): Use it.
	* (builtin_who): Ditto.
	* Don't include procstream.h anymore since we no longer need it.

	* utils.cc (jump_to_top_level): Call run_all_unwind_protects ()
	before jumping back to the top level.

Sat May  1 20:59:12 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* unwind-prot.cc unwind-prot.h: New files to implement memory
	cleanup stuff.
	* src/Makefile.in: Distribute them.

	* Version 0.71.2.

	* computer.m: Delete file.
	* scripts/Makefile.in (computer.m): Add $(srcdir)/ prefix to
	computer.in.

Fri Apr 30 17:03:04 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Matrix.h (<CLASS>::row (int i)): New function for extracting a
	row of a matrix where CLASS is one of Matrix, DiagMatrix,
	ComplexMatrix, or ComplexDiagMatrix. 
	* (<CLASS>:: column (int i)): Likewise for columns.
	* (<CLASS>::row (char *s)): Likewise, but selection is done with a
	character string.  Currently we accept anything beginning with `F'
	or `f' to mean the first row and anything beginning with `l' or
	`L' to mean the last row.

Wed Apr 28 14:23:49 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* scripts/computer.in: New template file for computer.m.
	* scripts/Makefile.in (computer.m): Generate a custom computer.m
	file using $target_host_type. 
	* (clean): Delete computer.m.

	* configure.in: If last argument is not empty, use its value as
	the TARGET.
	* If we aren't given a TARGET, use config.guess to find one.
	* Substitute target_host_type.

	* config.guess: New file, taken from gdb distribution.
	* Makefile.in: Distribute it.

	* tree-const.cc (force_numeric): New parameter, force_str_conv to
	allow us to ignore user preference on string to numeric
	conversion.
	* (make_numeric): Likewise.

	* tree.cc (tree_matrix::eval): Allow range constants in matrix
	lists by simply converting them to matrices.
	* Ditto for string constants.

Tue Apr 27 17:21:12 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* utils.cc (smells_like_X11): Delete unneeded function.
	* builtins.cc (install_builtins): Don't initialize
	graphics_terminal since it's no longer needed.

	* utils.cc (pathstring_to_vector): Call tilde_expand on each
	element of the path.

	* mappers.cc: Include float.h for DBL_MAX.

Wed Apr 21 19:31:12 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* mappers.cc (xisnan (Complex&)): Rename from isnan.
	* builtins.cc (mapper_functions): Use xisnan instead of isnan.
	* (install_builtins): Special case for linux for geenerating
	infinity and NaN.

Mon Apr 19 14:10:55 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.71.1 released.

	* symtab.cc (char **sorted_list (int& count)) New function.
	* (char **sorted_var_list (int& count)): Ditto.
	* (char **sorted_fcn_list (int& count)): Ditto.
	* t-builtins.cc (builtin_who): Check symbol count too.

	* utils.cc (send_to_plot_stream): Check is_open(), not just the
	state of the stream.
	* (close_plot_stream): Likewise.

	* procstream.cc, procstream.h: Rewrite, taking a hint from the GNU
	fstream class.

Sun Apr 18 17:40:54 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* t-builtins.cc (builtin_help): Don't call list_in_columns if
	there isn't anything to list.

Fri Apr 16 20:57:15 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Makefile.in (DISTDIRS): List dld here.
	* (DISTSUBDIRS): Not here.

Thu Apr 15 12:17:08 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.71 released.

	* scripts/*.m: Improve help messages for most files.

	* libcruft/Makefile.in: Make libcruft.a here.
	* libcruft/Makerules.in: Not here.

	* PLOTTING: New file.
	* Makefile.in: Add it to the list of files we distribute.

	* g-builtins.cc (builtin_shell_command): New function.
	* builtins.cc (general_functions): Add it to the list.

	* procstream.h, procstream.cc (iprocstream): New class.

	* lex.l (<MATRIX>{SN}*\]): Maybe insert a comma after reading a `]'.

	* t-builtins.cc (builtin_load): Do tilde expansion for the file name.
	* (builtin_save): Ditto.

Wed Apr 14 10:40:44 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree.cc (tree_function::eval): Until we have a proper call frame
	unwinding scheme, comment out previous change.

	* tree.cc (tree_matrix::eval): Brain Transplant.
	* (tree_matrix::length): New function.

	* tree-base.h (matrix_dir): Delete md_none, md_left, and md_up.
	The only valid values are md_unknown, md_right, and md_down.

Tue Apr 13 20:07:25 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree.h (tree_function::call_depth): New member variable.
	* tree.cc (tree_function::eval): Check it to make recursive
	function calls fail (waiting for proper symbol table handling).

	* utils.cc (pathstring_to_vector): Don't prepend `.' here.  We do
	that already in default_path() if the user hasn't given us a
	loadpath.

	* t-builtins.cc (builtin_help): Get help for M-files even if they
	haven't been compiled yet.
	* List M-files we find in the loadpath.

	* utils.cc (get_m_file_names): Split into two functions, add
	parameter to specify whether .m suffix is deleted.

	* lex.l (grab_help_text): New function.
	* (beginning_of_function): New global variable.
	* (%|#): Call grab_help_text() if at beginning of a function.
	* tree.cc (tree_identifier::document): New function.
	* parse.y (func_def2): Use it.
	* (help_buf): New global buffer for help text.

Mon Apr 12 00:31:09 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* utils.cc (get_m_file_names): New function.
	* variables.cc (make_name_list): Use it.

	* t-builtins.cc (list_in_columns): Put output on an strstream
	instead of in a String.
	* (builtin_help): Use an strstream instead of a String for buffering.
	* (builtin_who): Likewise.

	* g-builtins.cc (builtin_keyboard): New function.
	* builtins.cc (general_functions): Add to list.

	* tc-extras.cc (get_user_input): If the user enters `exit',
	`quit', or `return', return instead of eval'ing the string.
	* Don't abort on empty input.
	* Add additional argument to handle debugging via new `keyboard'
	function.  If doing debugging, keep reading until we see `exit',
	`quit', or `return'.

	* menu.m: New M-file.

	* New top level plotting functions:

	    plot.m    semilogx.m  semilogy.m  loglog.m   polar.m
	    title.m   xlabel.m    ylabel.m    grid.m     bar.m
            stairs.m  mesh.m      meshdom.m   contour.m

	* New internal plotting functions:

	    plot_int.m    plot_2_s_s.m  plot_2_v_v.m  plot_2_v_m.m
	    plot_2_m_v.m  plot_2_m_m.m  polar_int.m

	* New utility functions:

	    is_scalar.m  is_vector.m  is_matrix.m

Sun Apr 11 11:10:29 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* t-buitlins.cc (builtin_ls): New function.
	* builtins.cc (text_functions): Add it to the list under the names
	`ls' and `dir'.

Sat Apr 10 15:13:05 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* procstream.cc (oprocstream::close): Set badbit for stream after
	it is closed.

	* utils.cc (close_plot_stream): New function.
	* g-buitlins.cc (closeplot): New builtin function.
	* builtins.cc (general_functions): Add to list.

	* lex.l (cant_be_identifier): New cruft to properly handle the
	plot command's `using', `title', and `with' keywords.

Fri Apr  9 09:38:25 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* configure.in: Warn if it looks like gnuplot isn't installed.

	* utils.cc (send_to_plot_stream): Check the user's preference for
	the gnuplot binary.

	* user-prefs.cc (sv_graphics_terminal): Delete function.
	* user-prefs.h (graphics_terminal): Delete variable.

	* tree-plot.cc (tree_subplot_using::print): Add argument to allow
	checking of columns given in using command and use it.
	* (tree_plot_command::eval): Change caller.

	* parse.y (title): Allow plot title to be any expression.
	* tree-plot.cc (subplot_list): Likewise.

	* tree-plot.cc (tree_plot_command::eval): Don't let lusers try to
	make 2D parametric plots, since that seems to crash gnuplot.

	* tree.cc (tree_identifier::parse_m_file): Don't try to stash
	m-file name or time parsed if we were actually executing a script
	file.

	* sombrero.m: New M-file to demonstrate 3D plotting.

	* parse.y (plot_options): Allow them to be specified in any order.

	* g-builtins.cc (builtin_purge_tmp_files): New function.
	* builtins.cc (general_functions): Add to list.

	* g-builtins.cc, g-builtins.h (builtin_plot): Delete.
	* builtins.cc (general_functions): Delete entry for builtin_plot.

	* t-builtins.cc (builtin_set): Check to see if the user is setting
	up parametric plotting.
	* tree-plot.cc (parametric_plot): New global variable.
	* tree_const.cc (save_three_d): New function.
	* tree-plot.cc (tree_subplot_list::print): Handle 3D plots.

	* Makefile.in: Delete everything having to do with distributing or
	making gnuplot.
	* configure.in: Likewise.

Thu Apr  8 10:02:52 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* utils.cc (send_to_plot_stream): New function.  Move declaration
	of plot_stream to utils.cc and make static.

	* t-builtins.cc (builtin_set): New function.
	* (builtin_show): Ditto.

	* lex.l: Handle set command.
	* (doing_set): Yet another global variable to control behavior of
	the lexer.

	* tree-plot.cc (tree_subplot_using::print): Print warning if scanf
	format string is given.

	* parse.y (ranges1): Allow lower and upper bounds to be optional.
	* tree-plot.cc (tree_plot_range::print): Make it work.

	* tree-plot.cc: New file, extracted from tree.cc.

	* sighandlers.cc (install_signals): New function.
	* (*_handler): New set of functions to handle signals that would
	otherwise cause us to abort.
	* (my_friendly_exit): Call exit from most signal_handlers to clean
	up tmp files, etc.

	* lex.l (do_string_escapes): Correctly handle '' quotes.
	* Warn about unrecognized escape sequences but convert them to the
	escaped character anyway.
	* (EXPON): New definition.  Use it and ? qualifier to shorten the
	expressions for matching numbers.
	* (ECHAR): New definition.  Use it to correctly match
	backslash-escaped characters in strings.
	* Definitions: Surround multi-character definitions in ()'s to
	avoid potential problems with things like {DEF}*.
	* (QQ): Rename from DQ.
	* (DQSTR): New definition for strings in double quotes.
	* (DQSTRING): New start state.  Recognizing a naked " puts us here.
	* ("\n"): Turn off quote_is_transpose at the beginning of each line.
	* Use error functions instead of writing messages directly.
	* Don't include iostream.h -- we don't need it now.
	* Do include error.h.

Wed Apr  7 13:12:17 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* sighandlers.h, sighandlers.cc: New files for signal handling
	functions.
	* Makefile.in: Include them in the usual places.
	* octave.cc (interrupt_handler): Move to sighandlers.cc and rename
	to sigint_handler.

	* utils.cc (mark_for_deletion): New function.
	* octave.cc (cleanup_tmp_files): New function.
	* octave.cc (main): Register cleanup_tmp_files with atexit
	(on_exit for sun).

	* Stack.h: Template based stack class converted from libg++
	genclass files.
	* SLStack.h: Likewise.
	* (SLStack::pop): Avoid apparent bug in SLList::remove_front.

Tue Apr  6 10:01:52 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* lex.l (almost_match): New function.
	* (plot_style_token): New function.

	* t-buitlins.cc: Include procstream.h instead of procbuf.h.
	* (builtin_help): Simplyfy opening of process output stream.
	* (builtin_who): Likewise.

Mon Apr  5 13:48:20 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tc-extras.cc (tree_constant_to_scalar): Move to tree-const.cc
	and make it a member function called to_scalar.
	* (tree_constant_to_vector): Likewise.
	* (tree_constant_to_matrix): Likewise.

	* procstream.h, procstream.cc: New files/classes that implement
	an ostream to a process.  Built on top of procbuf from libg++.
	* src/Makefile.in: Add them to the lists of files/objects.

Sat Apr  3 23:11:56 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Lots of clean-up changes to parse.y, tree.cc, tree.h, and
	tree-base.h.  Use more specific types than just <tree *> for
	nonterminals.  This allows us to have fewer virtual functions in
	the base class.  Safer.  Cleaner.  Should have always been this
	way...

Fri Apr  2 10:04:32 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* parse.y, lex.l: Fix grammar to accept plot command very similar
	to the gnuplot plot command.

Wed Mar 31 13:11:56 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree.cc (eval_undefined_error): Until we can figure out how to
	clear names without causing problems later on, just remove the
	symbol name.

	* tree.h (tree_plot_command): New class.
	* (tree_plot_limits): Ditto.
	* (tree_plot_range): Ditto.
	* (tree_subplot_list): Ditto.
	* (tree_subplot_using): Ditto.
	* (tree_subplot_style): Ditto.

	* tree-base.h (command_type): Add plot_command to list.

Mon Mar 29 09:53:50 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* find_exec.c (ABSOLUTE_FILENAME_P): Also return true if the
	given filename begins with `.'.

	* DAE.cc, DAE.h, DAEFunc.h, tc-dassl.cc: Make sure all calls to
	dassl and the user-supplied functions have consistent argument
	lists.

	* octave.cc (raw_program_name): New global variable to hold the
	unprocessed argv[0].  This is to help dld find the absolute path
	to the executing program.
	* (initialize_globals): Pass in argc and argv from main.
	Initialize raw_prog_name.

	* builtins.cc (general_functions): Correct help message for dassl.
	* g-builtins.cc (dassl_usage): Likewise.

	* src/Makefile.in: Lots of changes to make things work with or
	without dld.
	* Makefile.in: Likewise.
	* configure.in: Likewise.

	* dld: New directory, containing our copy of the dld sources.

	* dynamic-ld.cc, dynamic-ld.h: New files to implement dynamic
	loading functions.
	* src/Makefile.in: Add them to the distribution, compile them if
	doing dynamic loading.

Sun Mar 28 11:03:15 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* configure.in: When looking for Fortran compilers, check for fc
	last to avoid confusion with some vendor's /bin/sh fc builtin.
	* Handle new argument --with-dld.

	* g-builtins.cc (builtin_warranty): Add 1993 to list of copyright
	dates.

Sat Mar 27 17:58:23 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tc-extras.cc: Rename from tree-extras.cc.
	* tc-colloc.cc, tc-dassl.cc, tc-det.cc tc-eig.cc, tc-fft.cc,
	tc-fsolve.cc, tc-fsqp.cc, tc-ifft.cc, tc-inv.cc, tc-lsode.cc,
	tc-lu.cc, tc-npsol.cc, tc-qr.cc, tc-quad.cc, tc-rand.cc,
	tc-svd.cc: Split individual functions from tree-extras.cc.

	* g-builtins.cc (npsol_usage): Improve message.
	* (dassl_usage): Likewise.
	* (builtin_lsode): Likewise.
	* (builtin_fsolve): Likewise.
	* (builtin_quad): Likewise.
	* builtins.cc (general_functions): Improve corresponding messages.

	* libcruft/fftpack: New directory for fftpack functions.
	* libcrutf/fftpack/*.f: Add implicit double precision (a-h,o-z) at
	the top of every subroutine.

	* tree-extras.cc (fft): Allow propagation of empty matrices.
	* (ifft): Ditto.

	* Matrix.cc (Matrix::fourier): New function.
	* (Matrix::ifourier): Ditto.
	* mx-inlines (make_complex): New function.
	* tree-extras.cc (fft): Use Matrix::fourier instead of doing real
	to complex conversion here and calling ComplexMatrix::fourier.
	* (ifft): Likewise, for ifourier.

Sat Mar 27 17:56:59 1993  Fook Fah Yap (ffy@eng.cam.ac.uk)

	* Matrix.cc (ComplexMatrix::fourier): New function for fft.
	* (ComplexMatrix::ifourier): New function for inverse fft.

	* builtins.cc (general_functions): Add fft and ifft to the list of
	builtin functions.

	* g-builtins.cc (fft): New function.
	* (ifft): Ditto.

	* tree-extras.cc (fft): New function.
	* (ifft): Ditto.

Sat Mar 27 13:53:39 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* octave.cc (usage_string): New file scope constant.
	* (getopt_option_string): Ditto.

	* error.cc: Declare all arguments const since we don't change them.

	* utils.cc (print_str_or_null): Delete unused function.
	* utils.h: Delete declaration.

	* tc-assign.cc, tc-index.cc, tc-inlines.cc, tree.cc,
	tree-const.cc: More error message cleanups.

	* tree-const.cc (print_if_string): Don't write to cerr
	unconditionally.

Fri Mar 26 22:00:18 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree-extras.cc (min): Avoid function calls as arguments for MIN.
	* (column_min): Ditto.
	* (max): Likewise, for MAX.
	* (column_max): Ditto.

	* tree-const.h (NINT): Make it an inline function instead of a
	macro.

	* tree-extras.cc (fill_matrix (tree_constant&, double, char*)):
	Convert to scalar type for complex values too.

	* error.h (panic_impossible): New macro to be used in place of
	assert (0) calls.
	* All .cc files: Replace calls to assert (0) and abort () with
	panic_impossible ().

	* Many .cc files:: Replace many instances of `cerr << ...' with
	calls to gripe() functions.

	* gripes.h, gripes.cc: New functions for reporting common errors.
	* Makefile.in: Include them in the usual places.

Thu Mar 25 18:42:49 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Many .cc files:: Replace many instances of `cerr << ...' with
	calls to error() functions.

	* error.h, error.cc: New functions for reporting errors in a
	consistent way.
	* Makefile.in: Include them in the usual places.

Wed Mar 17 17:29:44 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* symtab.cc (symbol_table::save): New functions.
	* t-buitlins.cc (builtin_save): Use new functions for saving
	symbols.  Handle case of saving all variables.

	* g-builtins.cc (builtin_pause): If one argument is given, pause
	for that many seconds before continuing.  Otherwise, wait for user
	input.

	* symtab.cc (clear): Actually delete undefined symbol_records and
	remove their names from the list.

	* lex.l (lookup_identifier): New function.  Avoid putting global
	names in the local symbol table.
	* ({IDENT}): Use it
	* ({IDENT}/{S}*=): Ditto.

	* tc-index.cc (do_scalar_index (tree_constant*, int)): Make
	indexing like a([1,1,1,1]) work for scalars.  GAG.

Tue Mar 16 20:08:23 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* t-buitlins.cc (builtin_cd): Call tilde_expand (from readline) on
	the argument.

	* lex.l (discard_until): Delete unused function.
	* When reading numbers, abort if scanf fails to read a number that
	we think it should.
	* (IDENT): New macro to match identifiers.
	* ([_a-zA-Z][_a-zA-Z0-9]*): Use the / operator for trailing
	context and split into two cases instead of trying to do the
	lookahead ourselves.

        * lex.l (do_comma_insert_check): Return the value yyleng had
        before yyinput() is called.
        * (DO_COMMA_INSERT_CHECK): New macro.  This avoids the use of
        unput() in do_comma_insert_check() since there seems to be a bug
        in flex when calling unput() for '\n'.

	Note that this change is necessary if we want to use yyless()
	since we cant call yyless() from outside of yylex(), because
	Flex's yyless() is a macro that uses some variables local to
	yylex().

Mon Mar 15 11:03:43 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree.cc (tree_matrix::eval): Undo part of previous change to
	make a = [1,2;3,4]; [a,a;a,a] work again.

	* parse.y (input): Don't abort for simple_list followed by EOF.

Sun Mar 14 14:38:56 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* RowVector.cc (RowVector::operator << ()): Insert a space between
	each element.
	* (ComplexRowVector::operator << ()): Ditto.

	* g-buitlins.cc (plot): Don't declare plot_prog or plot_term as
	static, and don't delete them.

	* Matrix.h (all checkelem functions): Don't check for range errors
	if NO_RANGE_CHECK is defined.

Sat Mar 13 10:18:51 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Matrix.cc (ComplexMatrix::prod): Make it work.

Thu Mar 11 00:08:09 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Matrix.h (ellum): Delete function.
	* Declare and define new const elem, checkelem, and operator()
	functions.

	* ColVector.cc, DiagMatrix.cc, RowVector.cc, Matrix.cc, ODE.cc,
	LinConst.cc, FEGrid.cc, DAE.cc, Bounds.cc, FEGrid.h:
	Change all callers.
	* tree-const.cc, tree-extras.cc, xdiv.cc, xpow.cc: Ditto.

	* tree.cc (tree_matrix::eval): Improve row and column mismatch
	checking -- [[1,2];[3,4]] works now, and [1,2;3,4,[5,6]] is
	rejected.
	* Reformat error messages to include `error:' prefix.

Wed Mar 10 14:02:09 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* lex.l (do_comma_insert): New global variable.
	* (reset_parser): Reset it.
	* lex.l (do_comma_insert_check): New function.  Call it wherever a
	token can be directly followed by '['.
	* (\[{S}*): Check the value of do_comma_insert.

	* lex.l ([_a-zA-Z][_a-zA-Z0-9]*): Only look for names in the
	current symbol table.

	* parse.y (word_list_cmd): Special case to disallow use of clear
	inside a fuction body.

	* parse.y (CLEAR): New %token.
	* lex.l ([_a-zA-Z][_a-zA-Z0-9]*): Return it if token is "clear".

	* t-builtins.cc (builtin_clear): Allow global symbols to be
	cleared.

	* symtab.cc (symbol_table::undefine): Clarify comment.
	* (symbol_table::clear): Don't actually remove names from the
	table, just force them to be undefined.

	* tree.h (tree_function): Delete unused data member `id'.
	* tree.cc (tree_function constructors): Don't initialize id.

Mon Mar  8 15:50:28 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.70 released.

	* src/Makefile.in: Update dependencies.

	* tree.h: Include stdio.h, for FILE.

	* gnuplot-build: For now, always define -DNOGAMMA.
	* configure.in: Don't check for gamma().

	* libcruft/Makerules.in: Don't use lib.a(obj.o) style dependencies
	because it's too slow for large archives.
	* liboctave/Makefile.in: Ditto.

Sun Mar  7 16:33:39 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* octave.cc (parse_and_execute): Save and restore current column
	number.  Set input line and column number to zero.
	* tree.cc (parse_m_file): Likewise.

	* tree.cc (tree_identifier::parse_m_file (FILE*, int*)): New
	function.  If a parse error occurs, ensure that the symbol is
	cleared from the global symbol table.
	* (tree_identifier::parse_m_file (char*, int): Use it.

	* tree.cc (tree_identifier::do_lookup): New function.
	* (tree_identifier::eval): Use it.

	* utils.cc (decode_prompt_string): Really do use value of PWD.

	* user_prefs.cc (sv_loadpath, sv_ps1, sv_ps2, sv_pwd,
	sv_gnuplot_binary, sv_graphics_terminal): New functions.
	* (sv_graphics_terminal): Warn if terminal isn't valid, but set it
	anyway (it's too late to do anything by the time the function is
	called).
	* In functions that use these variables:  Use the value from the
	user_pref structure instead of doing a symbol table lookup.

	* builtins.cc (builtin_string_variables): Add functions to call
	for LOADPATH, PS1, PS2, PWD, gnuplot_binary, and graphics_terminal.

	* builtins.cc (PS2): New builtin_string_variables.  Set default
	value to "> ".
	* input.cc (octave_gets): Use it instead of no prompt for
	continued input.

	* parse.y (yyerror): Use line, column, file name, and text of
	current input line to print better parse error messages.

	* lex.l (NEW_MATRIX): New exclusive start state.  Need this to be
	able to match \[{SN}* _and_ get secondary prompting right.

	* input.cc (octave_read): Keep track of current input line.
	* tree.cc (parse_m_file): Save and restore current line number.

	* lex.l (all patterns): Keep track of current input column.
	* (fixup_column_count): New function to deal with patterns that
	match more than one line.

	* input.h, input.cc (current_input_line): Global pointer to
	the text of the current input line.

	* parse.y, parse.h (input_line_number, current_input_column): New
	global variables.

	* Almost all source files: Finish (for now, at least) the
	reorganization we started for global variables.

Wed Mar  3 14:49:59 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tc-assign.cc, tc-index.cc, tc-inlines.cc: New files, split out
	from tree-const.cc.

	* Almost all source files: reorganize so that all global data is
	declared in some include file or another.  It probably wouldn't
	hurt to do some more reorganizing to try to eliminate the amount
	of global information...

Tue Mar  2 20:49:35 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* variables.h, variables.cc: New files for handling things that
	need symbol table information.  Lots of files changed to include
	variables.h, which now includes the extern declarations for the
	symbol tables.  The declarations of the symbol tables are now in
	variables.cc, but they are still initialized in octave.cc.

Mon Mar  1 11:35:03 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* builtins.h (builtin_string_variables): New field, sv_function,
	holds a pointer to the function to call when a variable changes.
	* builtins.cc (string_variables): Initialize sv_function field.
	* (install_builtins): While installing builtin string variables,
	stash sv_function and, if it isn't NULL, call it to initialize
	global variable user_pref.

	* symtab.h (symbol_record): New field, sv_fcn, holds a pointer to
	the function to call when a variable changes.
	* symtab.cc (symbol_record::define): Call sv_fcn if it isn't NULL.
	* symtab.cc (symbol_record::set_sv_function): New function.

	* utils.cc, parse.y, tree.cc, tree-extras.cc, tree-const.cc,
	idx-vector.cc, builtins.cc, symtab.cc: Instead of calling
	functions like do_fortran_indexing(), get the user's preference
	from the global struct user_pref.

	* utils.h, utils.cc: Delete all functions like do_fortran_indexing() 
	that lookup user variables to find integer values.
	* user-prefs.h, user-prefs.cc: Move them here, but instead of
	returning values, set elements of the new global struct user_pref.

	* user-prefs.h, user-prefs.cc: New files for handling global
	variables for user preferences.
	* Makefile.in: Add them to the SOURCES and INCLUDES macros.

	* bsd-math/{acosh,asinh,atanh,log1p}.c: Declare all external
	functions used in each file since they might not be in math.h.
	* bsd-math/{scalb,copysign,logb,finite,drem,sqrt}.c: New files
	from BSD's support.c.  Only using scalb, copysign, logb, and
	finite for now.

	* configure.in: Move tests for f77 closer to the top.
	* Allow configuration to proceed even if we can't find a Fortran
	compiler or f2c.
	* Use `here' documents instead of multiple echos for multi-line
	messages.
	* Imrpoved checking for missing math functions.

Sun Feb 28 17:45:53 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* test/Makefile.in (check): Try to avoid errors from cp.

	* mappers.cc (xfinite): Put test for HAVE_FINITE first.

	* libcruft/Makerules.in (LIBCRUFT_DEPEND): Use `=' in assignment
	instead of `:='. 

	* liboctave/Makefile.in: Make an explicit list of sources instead
	of using $(wildcard).

Thu Feb 25 20:18:12 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* bsd-math/copysign.c: New file.  HP's don't have this?
	* configure.in (LIBOBJS): Also check for copysign, log1p, and
	log__L.  For each missing user-level function, add -DFOO_MISSING=1
	to DEFS.
	* src/missing-math.h: For each function we declare, check the
	corresponding XXX_MISSING macro.  Add declarations for copysign
	and log1p.

Wed Feb 24 20:39:32 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* lex.l (<MATRIX>{SN}*\]/{S}*==): Change scanning pattern to
	<MATRIX>{SN}*\]{S}*/== in order to keep flex from generating any
	backtracking code.
	* (<MATRIX>{SN}*\]/{S}*=): Likewise.

Tue Feb 23 02:45:00 1993  John W. Eaton  (jwe@ward.che.utexas.edu)

	* Version 0.69 released.

	* mappers.cc [_AIX && __GNUG__] : Provide a definition for
	finite(), since whatever version we get from the system when using
	g++ doesn't work (note that it does seem to work with gcc, xlc,
	and xlC).

	* bugs.texi: Note that the math.h file from libg++ declares
	finite() incorrectly for some systems.

Mon Feb 22 02:04:16 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* configure.in: Look for runtest, but only believe that it exists
	if we can also find expect.
	* test/Makefile.in (check): Run tests in build directory, not
	source directory.

	* tree.cc (reading_script_file): New global variable.
	* (parse_m_file): Use it, and properly save and restore state so
	that nested script files will work.

	* octave.cc (parse_and_execute): Properly save and restore state
	so that nested script files will work.
	* Don't close input file here.

	* input.cc (get_input_from (FILE*)): Don't declare mf_instream
	static.  Set mf_instream if reading and M-file or a script file.

	* parse.y: Minor changes to accomodate new lexer.

	* lex.l: Major overhaul in an attempt to do better string
	handling.  Looks much simpler and even seems to work. 
	* (do_string_escapes): New function.

Sat Feb 20 00:40:32 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* g-builtins.cc (builtin_npsol): If npsol is missing, return empty
	matrices for x and phi, and -1 for inform.

	* num2str.m: Use %g, not %f.

	* tree.cc (parse_m_file): Save and restor curr_sym_tab, because
	yyparse may mess with it if it encounters a function definition.
	* tree-extras.cc (eval_string): Ditto
	* octave.cc (parse_and_execute): Ditto

	* Makefile.in (DISTDIRS): Add bsd-math to list.

	* src/Makefile.in (LIBOBJS): New macro, value set by configure.
	(vpath): Add @srcdir@/../bsd-math for LIBOBJS.
	(octave): Add $(LIBOBJS) to deps.
	* gnuplot-build/Makefile.in: Likewise, for notgnuplot.

	* configure.in: Use AC_REPLACE_FUNCS to Check for acosh, asinh,
	atanh, and gamma.

	* bsd-math: New directory for functions from the BSD math library
	to use as replacements for missing functions.

	* parse.y (semi_comma, comma_semi): New rules.
	(simple_list, simple_list1): Use them to allow empty statements.
	(list, list1): Likewise.  This allows empty commands as long as
	the empty command doesn't contain any newlines.

	* parse.y (simple_assign): New rule, allows things like a = b = c.
	(multi_assign): Extracted from assignment.
	(assignment): Split into simple_assign and multi_assign.
	(expression): Allow '(' simple_assign ')' to be an expression.

	* tree-extras.cc (eval_string): Return result of last expression
	evaluated, to make things like `eval ('1+1;')*2' work.

Fri Feb 19 19:45:21 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* g-builtins.cc (builtin_pwd): Use getcwd, which is defined in
	unistd.h, instead of getwd, which seems to be a BSDISM.
	* utils.cc (decode_prompt_string): Ditto.
	* (get_working_directory): Ditto.

	* arith_ops.cc (DIVIDE_BY_ZERO_ERROR):  Don't rely on
	HAVE_IEEE_MATH, use HAVE_ISINF, HAVE_FINITE, and HAVE_ISNAN
	instead.
	* configure.in: Don't define HAVE_IEEE_MATH.

	* tree-extras.cc: Include stdio.h for FILE.

Thu Feb 18 10:17:38 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree.cc (gobble_leading_white_space): New function.
	* (is_function_file): New function.

	* (parse_m_file): Handle case of .m file being just a file of
	commands to execute.
	* Add optional argument to specify whether to execute a script
	file.
	* Return whether a script file was executed. 
	* (tree.cc, tree-extras.cc): Change callers.

	* octave.cc (parse_and_execute): new functions.
	* (execute_startup_files): Use them.

	* lex.l (<COMMENT>\n): Don't gobble new line.

	* num2str.m: Don't print '\n'.

Wed Feb 17 21:59:55 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* mappers.cc: Simplify and correct finite, isinf, isnan functions.
	* test/octave/t7.oct: New test for finite, isinf, and isnan
	functions.

	* configure.in: Define HAVE_IEEE_MATH if isnan and either finite
	or isinf is available.

	* builtins.cc (mapper_functions): Check HAVE_ISNAN instead of
	HAVE_IEEE_MATH to determine whether or not to define isnan().

	* mappers.cc: Don't check for HAVE_IEEE_MATH.  Just check for
	individual functions directly.

	* g-builtins.cc (npsol_usage): Correct usage message.

	* g-builtins.cc: Don't include unistd.h unless HAVE_UNISTD_H is
	defined.
	* t-builtins.cc: Ditto.
	* utils.cc: Ditto.

Tue Feb 16 00:35:44 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.68 released.

	* tree.cc (parse_m_file): Set reading_m_file before calling
	get_input_from_file.
	* Don't mess with current_infile.

	* input.cc (get_input_from_file): Set mf_instream if we are
	reading an M-file.  Otherwise, set rl_instream, (even if we aren't
	really using readline -- this is just the `normal' input stream).
	* Don't use current_infile.
	* (octave_read): If not interactive, check reading_m_file to
	determine where to look for input.

	* octave.cc (main): Don't use readline if we aren't interactive.

	* libcruft/misc/Makefile.in (local-dist): Make sure we don't
	distribute a bogus d1mach.f.
	(dist): Ditto.

	* tree-extras.cc (convert_to_ans_assign): New global variable.
	(eval_string): Conditionally turn off assignment to `ans', for
	get_user_input (). 
	* parse.y (ans_expression): Use it.
	* lex.l (reset_parser): Reset it.

	* g-builtins.cc (builtin_input): New function.
	* builtins.cc (general_fucntions): Add it to the list.
	* tree-extras.cc (get_user_input): Do most of the real work.

Mon Feb 15 01:14:40 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* t-builtins.cc (load_variable): New function.
	(builtin_load): Use it.

	* Makefile.in (SUBDIRS): Add the test directory.
	(check): Don't depend on all.

Sat Feb 13 05:17:53 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree-extras.cc (determinant, lu, matrix_exp, matrix_log,
	matrix_sqrt): Handle empty matrix argument.

	* Matrix.h: Add constructors of the form Matrix (double a) and
	ColumnVector (double a) to make it even easier to form single
	element vectors.

Fri Feb 12 03:27:34 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* octave.cc (main): Add -v option that will print the version
	string and quit with a successful exit status.

Thu Feb 11 00:46:34 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree-extras.cc (eig): If given an empty argument, return enough
	empty matrices to fill all possible LHS variables.
	(qr): Likewise.
	(svd): Likewise.

	* tree-const.cc (fortran_style_matrix_assignment): Do the right
	thing if LHS is an empty matrix.

	* tree-extras.cc (qr): Handle empty matrix argument.

	* Matrix-ext.cc (QR): Make it work (really!).
	(ComplexQR): Ditto.

Wed Feb 10 00:56:31 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* xdiv.cc (xdiv (ComplexMatrix& a, ComplexMatrix& b)): Do
	btmp.solve (atmp), like the other three xdiv's.  Argh!

	* tree-extras.cc (eval_string): New function.  Mostly works but
	could be very fragile.  We desperately need some sort of
	`unwind-protect' scheme to avoid disaster when octave is
	interrupted.

	* g-builtins.cc (builtin_eval): Instead of just aborting, call
	eval_string if given one argument.

	* input.cc (octave_read): If get_input_from_eval_string is
	nonzero, stuff current_eval_string into buf for flex to read.

	* tree-extras.cc (char *current_eval_string): New global variable
	for eval().
	* (int get_input_from_eval_string): Ditto.

	* Update copyright notices to include 1993 (now that it's
	February...).

Tue Feb  9 14:35:08 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.67 released.

	* tree-extras.cc, tree-const.cc: Check the value of the variable
	`propagate_empty_matrices' to decide what to do about empty
	matrices in binary and unary operations and some function calls.

	* builtins.cc (builtin_string_variables): New global variable
	`propagate_empty_matrices' with initial value `warn'.
	* utils.cc (propagate_empty_matrices): New function.

Mon Feb  8 19:46:51 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree-const.cc: Finish changes required to make zero-one indexing
	work for indexing and assignment.

Sat Feb  6 15:54:10 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* builtins.cc (builtin_string_variables): New global variable
	`prefer_zero_one_indexing' with initial value `false'.
	* utils.c (prefer_zero_one_indexing): New function.

Fri Feb  5 13:03:14 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* idx-vector.h, idx-vector.cc: Major overhaul to help with
	zero-one style indexing.
	* tree-const.cc (matrix_to_index_vector): Delete functions.
	* (functions that use idx_vectors): Update for new idx-vector
	stuff.

	* arith-ops.cc: Don't declare matrix_to_fortran_indices.

	* tree-const.cc (matrix_to_index_vector): Add new argument,
	allow_neg_one, with default value of false.
	* (matrix_to_fortran_indices): Add new argument, allow_zero, with
	default value of false.

	* g-builtins.cc (builtin_find): New function.
	* builtins.cc (general_fucntions): Add it to the list.
	* tree-extras.cc (find_nonzero_elem_idx (tree_constant)): Do
	most of the real work.
	* tree-extras.cc (find_nonzero_elem_idx (const Matrix&): Do the rest.
	* (find_nonzero_elem_idx (const ComplexMatrix&): Ditto, for complex.

Wed Feb  3 00:54:01 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* configure.in (DEFAULT_DOT_O_FROM_DOT_F): If using f2c, quote
	with single quotes instead of double quotes to avoid problems on
	systems (like the NeXT) that strip \'s from double quoted strings.

	* utils.c (empty_list_elements_ok): New function.
	* tree.cc (matrix_list::eval): Use it.
	* builtins.cc (builtin_string_variables): New global variable
	`empty_list_elements_ok' with initial value `warn'.

	* utils.cc (check_str_pref): New function.
	* (resize_on_range_error, prefer_column_vectors,
	warn_comma_in_global_decl, do_fortran_indexing,
	implicit_str_to_num_ok, treat_neg_dim_as_zero,
	ok_to_lose_imaginary_part, return_last_computed_value,
	silent_functions, print_answer_id_name): Use it instead of
	needlessly duplicating code.

Tue Feb  2 16:58:02 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* lex.l ("'"): If it looks like we're defining a matrix, don't set
	the start condition to be MAYBE_QSTRING.  GAK.  There has to be a
	better way...

	* lex.l: Increment and decrement promptflag instead of just
	setting its value.  This should help get prompting right for
	things like if [1,2;3,4] NL ...
	* input.cc (octave_gets): In order to issue a prompt, Require
	propmtflag to be greater than zero, not just nonzero.

	* tree.cc (tree_if_command): Allow matrices as the expression to
	test.  Unlike Matlab, a complex value is false only if both the
	real and imaginary parts are 0.
	* tree.cc (tree_while_command): Ditto.

	* tree.cc (tree_for_command): Allow matrices and complex values
	in the expression.  For matrices, assign each column in turn to
	the dummy variable.

	* Matrix-ext.cc (qr): Make it work.  The LAPACK book gags me again!

	* xdiv.cc: When computing right division with complex matrices,
	use hermitian() instead of transpose().

	* lex.l: Return IMAG_NUM for a numeric constant followed by
	[iIjJ], but don't allow spaces between the numeric constant and
	the letter (it causes problems inside `[]' where spaces matter...

Mon Feb  1 17:15:19 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree_extras.cc (rand_internal): Make the random number generator
	give us a different sequence every time we start octave unless we
	specifically set the seed.

Thu Jan 28 00:10:24 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.66 released.

	* configure.in: Define PLOTLIB in addition to adding -DUNIXPLOT to
	DEFS if we find -lplot, and call AC_SUBST for PLOTLIB.

	* QP.cc: Define constructors here.
	* QP.h: Not here.

	* QP.cc (All constructors that are given H): Force H to be
	symmetric.
	* (make_h_symmetric): New function.

Wed Jan 27 01:35:53 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* arith-ops.cc (do_unary_op): Do the right thing for complex
	logical not operator.
	* Matrix.cc (ComplexMatrix::operator ! (void)): Return Matrix
	instead of ComplexMatrix.
	* mx-inlines.cc (not (Complex *d, int len)): For each element of
	d, return (d[i] == 0.0), not (d[i] != 0.0), and return it as a
	pointer to double, not Complex.

	* configure.in: Check for libcruft/qpsol/qpsol.f.
	* Create Makefile in libcruft/qpsol.

	* libcruft/qpsol: New directory.  Copy QPSOL sources here.
	* libcruft/qpsol/Makefile.in: New file.
	* libcruft/qpsol/README.MISSING: New file.
	* libcuft/Makefile.in: Include qpsol in list of directories to
	make.

	* QPSOL.h, QPSOL.cc: New file for solving QPs with Gill and
	Murray's QPSOL.

	* QLD.h, QLD.cc: Delete all minimize functions except
	Vector minimize (double&, int&).

	* QP.h: Declare minimize functions virtual.
	* (Vector minimize (double&, int&): Declare as a pure virtual
	function.

	* QP.cc: New file to implement generic minimize functions.

Tue Jan 26 00:27:13 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* lex.l: Recognize numbers of the form .{digits}E{digits} and
	.{digits}E[+-]{digits}

	* lex.l: Recognize .\ as ELEFTDIV.
	* parse.y: Handle ELEFTDIV.
	* tree.cc (tree_binary_expression::eval): Handle el_leftdiv.

	* arith-ops.cc (do_binary_op): Handle element by element left
	division.  Fix some errors in element by element right division.

	* tree-base.h (enum expression_type): Add el_leftdiv.

	* Version 0.65 released.

	* tree-const.cc (tree_constant_rep::eval (tree_constant *args, int
	nargin, int nargout, int print)): Fix another brain-o in making
	recursive call.s

	* src/Makefile.in: Complete changes for CXX instead of C++ make
	variables.

	* tree-const.cc: For assignment and indexing functions, treat
	complex scalars and matrices in the same branch of the switch as
	real scalars and matrices -- the double_value() and matrix_value()
	functions take care of checking to see if it's ok to lose the
	imaginary part.

	* tree-const.h (tree_constant_rep::is_numeric_type): New function.
	* tree-const.h (tree_constant::make_numeric functions): Use it.

	* tree-const.h (tree_constant::make_numeric functions): Return
	*this for complex constants too.

Mon Jan 25 18:31:06 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree-extras.cc (Matrix min (Matrix&, Matrix&)): Loop over nc and
	nr, not nr and nr.
	* (Matrix max (Matrix&, Matrix&)): Ditto.

	* tree-const.cc (tree_constant_rep::mapper): Fix brain-o in making
	recursive call.

Sun Jan 24 20:05:39 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* configure.in: If using f2c, explicitly check for -lf2c.  If it's
	not found, look for -lF77 and -lI77.  If a suitable combination
	isn't found, print a warning.

	* src/Makefile.in liboctave/Makefile.in: GNU Make 3.63 uses CXX
	and CXXFLAGS instead of C++ and C++FLAGS.  Fix things so that 3.63
	will work without sacrificing compatibility with earlier versions.
	
	* tree-const.cc (tree_constant_rep::diag (tree_constant&)): Fix
	brain-o in forcing argument to be numeric.

Fri Jan 22 15:03:42 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* octave.cc (interrupt_handler): Declare to take int argument.

	* NPSOL.cc (npsol_objfun): Delete leftover debugging message.

Thu Jan 21 14:28:24 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* configure.in: Check version of gcc and issue a warning if it
	looks like 1.something.
	* Check for g++.  Issue a warning if it is missing or if it is
	there but it looks like verion 1.something.

	* flibs.sh, f2c-compat.sh: Change file permission to 755 to avoid
	problems if the uid of the installer is different from the uid of
	the owner of the files.

Wed Jan 20 04:18:49 1993  John W. Eaton  (jwe@june.che.utexas.edu)

	* libcruft/Makerules.in (@DOT_O_DOT_F_C[1234]@): Patterns deleted.
	* configure.in: Do multiple line sed substitutions the right way.

Tue Jan 19 14:50:50 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* configure.in: Use new AC_WITH to accept --with-f2c instead of
	--use-f2c.
	* Use new AC_HAVE_LIBRARY to find -lplot.

	* flibs.sh: Actually avoid including duplicate -lflags.
	* Use test, not `['.

Sun Jan 17 16:57:02 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Matrix.h: Declare operator+ and operator- functions for vectors.
	* RowVector.cc: Define half of them.
	* ColVector.cc: Define the other half.

Fri Jan 15 03:00:46 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* src/Makefile.in (install): Include version number in name of
	installed binary and make a link to $(bindir)/octave.

	* Version 0.64 released.

	* t-builtins.cc (builtin_clear): Don't allow the user to clear
	global symbols by name.  If he tries, issue a warning.

	* tree.cc (tree_identifier::eval_undefined_error):  Don't clear
	undefined symbols from the global or local (function) symbol
	tables.

Thu Jan 14 02:10:20 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree.cc (tree_function::eval): Save old and set current symbol
	table context, so eval_undefined_error() doesn't wipe out top
	level symbols.

	* Version 0.63 released.

Wed Jan 13 13:16:56 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Nearly every .h and .cc file: Add interface and implementation
	#pragmas for G++ in hopes of making smaller objects with -g.

	* tree-const: Properly handle assignments like A(:) = RHS when
	do_fortran_indexing is true.

	* g-builtins.cc (builtin_eig): Correct usage message.

	* tree-const.cc (tree_constant_rep (ComplexDiagMatrix&)): Create
	and initialize a new complex_scalar.  Don't just try to copy the
	value...

	* Matrix.h: Declare new fill functions for diagonal matrices.
	* DiagMatrix.cc: Define them.

	* Matrix.h: Declare map functions for row and column vectors.
	* RowVector.cc: Define them.
	* ColumnVector.cc: Likewise.

	* CollocWt.h: Declare data protected instead of private.
	* CollocWt.cc (CollocWt::CollocWt (const CollocWt&)): Fix brain-o.

	* lex.l: Return IMAG_NUM for a numeric constant followed by
	[ \t]*[iIjJ].

	* parse.y (IMAG_NUM): New token.
	* (fact): Recogize IMAG_NUM and convert its value to a complex
	constant.

	* Version 0.62 released.

	* Makefile.in (local-dist): Include -local in tar.Z filename.
	* (split-local-dist): New target.
	* (dist): Don't depend on newversion.
	* (local-dist): Ditto.

	* tree-extras.cc (npsol): If the first argument isn't a vector,
	print an error message and return.

	* tree.cc (tree_matrix::eval): Always set prev_row_total and
	prev_column_total when starting out.

	* octave.cc (main): Don't try to detect signal handler failures,
	but do call signal() to set up the interrupt handler.

Tue Jan 12 19:59:33 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree-extras.cc (npsol): Fix brain-o in checking length of bounds
	vectors.

Mon Jan 11 20:32:24 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree-extras.cc (set_rand_seed): New function.
	(force_to_fit_range): New function.
	(current_seed): Really return current seed.
	(rand_internal): Allow the user to actually set the seed for the
	random number generator.

Sun Jan 10 16:46:06 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.61 released.

	* builtins.h, builtins.cc: Rename from builtin-fcns.h, 
	builtin-fcns.cc (too long for Linux/SysV).

	* mappers.cc (xisinf): For non-IEEE machines, consider DBL_MAX to
	be infinite.

Fri Jan  8 09:15:57 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* gnuplot-build/Makefile.in (x11targets): Don't worry about
	checking HAVE_X11_X_H.

	* configure.in: Check for gamma and lgamma for gnuplot.

	* gnuplot-build/Makefile.in (Makefile.X11): Only move Makefile to
	../Makefile.X11 if xmkmf succeeds.

	* gnuplot-build/Makefile.in (x11targets): Check to see that XMKMF
	is set *and* that Makefile.X11 exists.
	* If making notgnuplot_x11 with Makefile.X11 fails, try again with
	Makefile.

	* gnuplot-build/Makefile.in: Use @PLOTLIB@ in definintion of LIBS.
	* Don't define UNIXPLOT in TERMFLAGS.
	* Don't define LN_S; it isn't used anywhere, and configure doesn't
	give it a value.

	* configure.in: Check for closepl().  If found, define UNIXPLOT,
	and substitute -lplot for @PLOTLIB@.

	* arith-ops.cc (DIVIDE_BY_ZERO_ERROR): New macro.  On systems that
	have IEEE math, give a warning but also go ahead and divide by
	zero.  On systems that don't have IEEE math, just give an error
	message and return an undefined tree_constant (it would probably
	be possible to handle this so that it works the same everywhere,
	but I'm not sure it's worth the effort...).

	* builtin-fcns.cc (install_builtins): On systems that don't have
	IEEE_MATH, define Inf to be MAX_DBL, but don't define NaN at all.

	* configure.in: Check for finite, isnan, and isinf.
	* Set HAVE_IEEE_MATH if we find finite and isnan.

	* builtin-fcns.cc (install_builtins): Use HAVE_IEEE_MATH instead
	of IEEE_MATH.
	* mappers.cc: Check HAVE_IEEE_MATH and HAVE_ISINF macros rather
	than checking system type.

	* graph3d.c (hidden_line_plot): Declare dy and y as double, not
	float, since VERYLARGE can be DBL_MAX.

	* lsoda.f, lsodar.f, lsodes.f, lsodi.f, lsoibt.f, stoda.f,
	stodi.f, zrotg.f, sdot.f: Remove unused files.

	* texas_lotto.m: Renamed from win_texas_lotto.m to keep the
	filename less than 14 characters.

Thu Jan  7 15:45:29 1993  John W. Eaton  (jwe@june.che.utexas.edu)

	* utils.cc: Declare ioctl extern "C".

	* tree.cc: Include stdio.h to be sure FILE is defined (apparently
	not required by older versions of GNU iostream library).
	* t-builtins.cc: Likewise.
	* g-builtins.cc: Likewise, but for tmpnam.

	* tree-const.h (rand_internal): Rename from rand to avoid
	conflict with standard library rand (a macro in Linux).
	* tree-extras.cc (rand_internal): Fix function definition.
	* g-builtins.cc (builtin_rand): Call rand_internal instead of rand.

	* octave.cc (main): Don't try to detect signal handler failures.
	What's the proper way to do this if RETSIGTYPE is void?

Tue Jan  5 08:14:29 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree.cc (tree_matrix::eval): When adding a matrix down or to the
	right, column or row dimension mismatches are always errors.

Mon Jan  4 04:58:55 1993  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.60 released.

	* xdiv.h, xdiv.cc: New files for Octave-specific matrix division
	stuff.
	* src/Makefile.in (INCLUDES, SOURCES, OBJECTS): Add xdiv stuff.

	* arith-ops.cc: Include xdiv.h.

Sun Jan  3 12:24:04 1993  John W. Eaton  (jwe@ward.che.utexas.edu)

	* gnuplot-build/Imakefile.in (notgnuplot_x11): In the compile
	command, put source file before	libraries.

	* libcruft/misc/Makefile.in: Don't use -O to compile gen-dimach.c.

Thu Dec 31 00:45:50 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree-extras.cc (matrix_sqrt): Don't create D until it is really
	needed.
	* (matrix_log): Ditto.
	* (matrix_exp): Ditto.
	[this should really be just one function instead of three...]

	* g-builtins.cc (builtin_sqrtm): New function.
	* builtin-fcns.cc (general_fucntions): Add it to the list.
	* tree-extras.cc (matrix_sqrt): Do the real work.

	* Makefile.in: Distribute INSTALL.OCTAVE and configure.in.
	* (INSTALL.info): Make ../INSTALL.OCTAVE, not ../INSTALL.

	* doc/Makefile.in: Make ../INSTALL.OCTAVE, not ../INSTALL.

	* INSTALL.OCTAVE: Rename from INSTALL.
	Refer to INSTALL for more info.

	* INSTALL: Copy from autoconf distribution.
	Refer to INSTALL.OCTAVE for more info.

	* octave.cc (main): Remove leading blank line from startup message.
	* Don't print it everytime the user types C-c...

	* xpow.cc: Finish off remaining cases.

	* tree-extras.cc (process_format): New function.
	(do_printf): Use it.

Wed Dec 30 00:43:14 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.56.

	* g-builtins.cc (builtin_logm): New function.
	* builtin-fcns.cc (general_fucntions): Add it to the list.
	* tree-extras.cc (matrix_log): Do the real work.

	* g-builtins.cc (builtin_expm): New function.
	* builtin-fcns.cc (general_fucntions): Add it to the list.
	* tree-extras.cc (matrix_exp): Do the real work.

	* Matrix-ext.cc (LU): Construct LU decomp. here, not in Matrix class.
	(ComplexLU): Likewise.
	* Matrix.cc (lu): Deleted.  Use LU constructor instead.
	Change all uses in octave sources.

	* Matrix-ext.cc (EIG): Construct EIG object here, not in Matrix class.
	* Matrix.cc (eig): Deleted.  Use EIG constructor instead.
	Change all uses in octave sources.

	* Matrix-ext.cc (SVD): Construct SVD here, not in Matrix class.
	(ComplexSVD): Likewise.
	* Matrix.cc (svd): Deleted.  Use SVD constructor instead.
	Change all uses in octave sources.

	* Makefile.in: Update for new Matrix file organization.
	Don't compile mx-inlines separately -- it's included where needed.
	* Matrix.h: Declare Fortran routines we call here, not in Matrix.cc.
	Don't declare every class to be a friend of every other class.
	* mx-inlines.cc: New file, included by all Matrix-related .cc files.
	* Matrix.cc: Split into several files. 
	* ColVector.cc: New file, from Matrix.cc
	* RowVector.cc: Ditto.
	* DiagMatrix.cc: Ditto.
	* Matrix-ext.cc: Ditto.

	* tree-extras.cc (svd): Take advantage of new constructors and
	diag functions.

	* Matrix.cc (DiagMatrix::diag) New function.
	(ComplexDiagMatrix::diag) Ditto.

	* tree-extras.cc (eig): Take advantage of new constructors.

	* tree-const.cc (tree_constant (DiagMatrix)): New constructor.
	(tree_constant (ComplexDiagMatrix)): Ditto.

	* Matrix.cc (Matrix (const DiagMatrix)): New constructor.
	(ComplexMatrix (const DiagMatrix)): Ditto.
	(ComplexMatrix (const ComplexDiagMatrix)): Ditto.

Tue Dec 29 01:14:49 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* octave.cc (main): Print message at startup by default.
	Don't print it until just before main loop.
	* New -q option (inhibit_startup_message) turns it off.
	* New -f option (read_init_files) inhibits reading of startup files.
	* Delete -v option.
	* (verbose_usage): Reflect changes in arguments, document -d.

	* win_texas_lotto.m: Sort picks before returning.

	* tree-extras.cc (eig): Return [v,d], not [l,v], where d is a
	diagonal matrix made from l.

	* builtin-fcns.cc (mapper_functions): Fix last element of
	initialization list to have correct number of elements.

	* Version 0.55.

	* Quad.h: Move all inline functions to Quad.cc to avoid apparent
	g++ bug on the RS/6000.

	* configure.in: If we find flex, don't define LEXLIB.

	* COPYING.LIB: Deleted -- we're not actually distributing anything
	under these terms.
	* Makefile.in: Don't distribute COPYING.LIB.

Mon Dec 28 00:46:21 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* xpow.h, xpow.cc: New files for safer pow() interface for octave.
	* src/Makefile.in (INCLUDES, SOURCES, OBJECTS): Add xpow stuff.

	* arith-ops.cc: Include xpow.h.
	* Don't declare toplevel jmp_buf.

	* t-builtins.cc (builtin_save): Make file and stream static to
	avoid dumping core on return (is this a bug in libg++ or g++?).
	* (builtin_load): Ditto.

	* symtab.cc (load): Make it work again.  Yikes!  This hasn't
	worked since the big symbol table overhaul...

	* tree-const.cc (tree_constant_rep::save): Handle complex scalars
	and matrices.

	* (symbol_def::undefine): Delete previous symbol definition before
	defining.  This should be ok now, after the parse_m_file fix of
	27 Dec. 

	* getting_help: New global flag.
	* ([_a-zA-Z][_a-zA-Z0-9]*): Set it if looking at "help".
	* (reset_parser): Clear it.
	* lex.l (STRING): Use it to determine what to do with ' ; and , .

	* lex.l (QSTRING): Handle the following (C-style) backslash escape
	sequences correctly(?).

	  \a  bell	   \r  carriage return
	  \b  backspace    \t  horizontal tab
	  \f  formfeed     \v  vertical tab
	  \n  newline	   \\  backslash

	* median.m: New M-file.

	* g-builtins.cc (builtin_sort): New function.
	* builtin-fcns.cc (general_fucntions): Add it to the list.
	* tree-extras.cc (sort): Do most of the real work.
	* tree-extras.cc (mx_sort): Do the rest.

Sun Dec 27 17:40:24 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* t-builtins.cc (builtin_casesen): New function.
	* builtin-fcns.cc (text_functions): Add it to the list.

	* strcmp.m: Temporarily allow string to numeric conversions.
	Maybe strcmp() should be built in to the interpreter?

	* norm.m: New M-file.

	* builtin-fcns.cc (install_builtins): Treat i and j as functions,
	not variables.
	* Install inf as an alias for Inf.
	* Install nan as an alias for NaN.

	* tree.cc (tree_identifier::parse_m_file (char*)): Force new
	global symbol to be a function, not a variable.

Tue Dec 22 14:15:57 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree.cc (tree_function::eval): Check with silent_functions()
	and return_last_value_computed() to determine proper behavoir.

	* builtin-fcns.cc (silent_functions): New builtin variable.
	* (return_last_value_computed) Ditto.

	* utils.cc (silent_functions): New function.
	* (return_last_value_computed) Ditto.
	[This scheme for determining preferences needs to be reworked...]

	* lex.l ([_a-zA-Z][_a-zA-Z0-9]*): Only force yytext[len] to be the
	end of the identifier if we gobbled some whitespace.
	* Always unput the last character read.

	* tree.cc (tree_function::eval) Always turn on printing for
	commands inside functions.

Sat Dec 19 14:03:49 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.54.

Fri Dec 18 16:02:59 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* (symbol_def::undefine): Undo previous change.  Someone is
	calling this function when they shouldn't be...

	* tree.cc (parse_m_file): If the script file is successfully
	parsed, Ensure that the new symbol is defined in the global
	symbol table.

	* lex.l: Handle continuation lines with the pattern
	{EL}{S}*\n { promptflag = 0; }  // Line continuation.

Thu Dec 17 01:47:14 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* symtab.cc (symbol_def::define): Delete previous symbol
	definition before defining.
	(symbol_def::undefine): Ditto, but new definition is always NULL.

	* readline/Makefile.in:  Don't compile emacs_keymap.c and
	vi_keymap.c since they are included by keymaps.c.

	* configure.in: If RETSIGTYPE isn't int, then define
	VOID_SIGHANDLER="-DVOID_SIGHANDLER=1".
	Substitute VOID_SIGHANDLER.

	* readline/Makefile.in (CFLAGS): Add -DVOID_SIGHANDLER if
	appropriate.

	* tilde.c: Declare xmalloc, not malloc.

	* lex.l ([_a-zA-Z][_a-zA-Z0-9]*): Only call unput if we've
	actually read something.

	* Version 0.53.

Wed Dec 16 01:35:48 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* lex.l ([_a-zA-Z][_a-zA-Z0-9]*): Look in the global symbol table
	for names, but ignore functions.

	* tree.cc (tree_identifier::eval): Use symbol_out_of_date() to
	simplify logic for re-parsing M-files.
	Always look in global symbol table for functions in case the
	definition has changed (shouldn't the local symbols be undefined
	anyway??).

	* tree.cc (symbol_out_of_date): New function.

	* symtab.cc (symbol_table::undefine): Actually do something.
	* (symbol_table::remove_name): Ditto.
	* (symbol_table::clear): And so on.

	* Matrix.cc (ComplexMatrix::svd): Use complex conjugate transpose,
	not simple transpose, for V.

	* Version  0.52.

	* gnuplot-build/Imakefile (notgnuplot_x11): In the compile
	command, put source file before	libraries.

	* parse.y (assignment): If trying to warn against assignment to a
	function, check is_function() instead of !is_variable().

	* src/Makefile.in: Distribute input.h.

Tue Dec 15 10:48:22 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* octave.cc (main): Call initialize_readline to set up completion
	functions.

	* input.cc (make_name_list, command_generator, command_completer,
	initialize_readline): New functions.

	* input.h: New file.
	* lex.l: Include it instead of input.cc.
	* src/Makefile.in: Create input.o rather than including it
	directly in lex.l.

	* builtin-fcns.cc: do_fortran_indexing is now initially false.
	prefer_column_vectors is now initially true.

	* builtin-fcns.cc (install_builtins): Install i and j
	 (== sqrt(-1)) as permanent global variables.

	* g-builtins.cc (MAXPATHLEN) Provide default definition here.
	* t-builtins.cc: Not here.

	* g-builtins.cc (quitting_gracefully, interactive,
	clean_up_and_exit, verbatim_pwd, getwd) Declare here.
	* t-builtins.cc: Not here.

	* g-builtins.cc: Also include readline.h and history.h.

	* g-builtins.cc: Include version.h and sys/param.h here.
	* t-builtins.cc: Not here.

	* g-builtins.cc: Move builtin_clc, builtin_clock, builtin_date,
	builtin_pause, builtin_quit, builtin_warranty here from
	t-builtins.cc.

	* builtin-fcns.cc (general_functions): Move builtin_clc,
	builtin_clock, builtin_date, builtin_pause, builtin_quit,
	builtin_warranty here from text_functions to limit the number of
	reserved words.

	* scripts/*.m: Check for correct number of input arguments before
	proceeding.

	* configure.in (DEFAULT_PAGER): Look for less, more, page, and pg.

	* t-buitlins.cc (builtin_help): If no arguments are given, list
	all the known operators, keywords, functions, and variables.

	* t-builtins.cc (builtin_help) Pass the output through PAGER using
	a libg++ procbuf.
	(builtin_who): Ditto.

	* utils.cc (get_pager): New function.

	* help.h, help.cc: New files to manage lists of help info for
	keywords and operators.

	* symtab.cc (symbol_record): Implement the Matlab-style semantics
	of functions using two symbol_def objects.
	* (symbol_table): Store identifier names in a hash table instead
	of a linear list.
	* symtab.cc (symbol_def): New class.

Sat Dec 12 00:00:00 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* parse.y (yyerror): Change error text to be more accurate.

	* lex.l ([_a-zA-Z][_a-zA-Z0-9]*): Only look in the current symbol
	table for names.  Function names and other global symbols are now
	resolved at execution time.

	* symtab.cc (sorted_var_list): New function.
	* (sorted_fcn_list): Ditto.
	* (var_list): Ditto.
	* (fcn_list): Ditto.
	These should probably not all be separate functions...

	* t-functions.cc (builtin_who): Call sorted_var_list for each
	symbol table to print variable names only.
	* Accept -fcn, -fcns, or -functions to also list function names.
	* Make -all list function names, but under a separate heading from
	other symbols.

	* builtin-fcns.cc (is_text_function_name): New function.
	* lex.l ([_a-zA-Z][_a-zA-Z0-9]*): Use is_text_function_name to
	find if a name is a text function name instead of relying on the
	symbol tables.

	* lex.l (is_keyword): New function.
	([_a-zA-Z][_a-zA-Z0-9]*): Use is_keyword instead of having a
	special lex pattern for each keyword.

Thu Dec 10 12:25:12 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* t-builtins.cc: Declare top_level_sym_tab extern.

	* Version 0.51.

Wed Dec  9 02:00:38 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree-extras.cc (all user_functions): If the return value from a
	user's function is bogus, print an error message and abort to the
	top level.

	* tree-const.cc (all do_matrix_index functions): Major overhaul to
	simplify and apply range checking before doing the indexing.

	* tree-const.cc (fortran_row, fortran_column, valid_scalar_indices,
	matrix_to_fortran_indices): Move here from arith-ops.cc and
	declare as `static inline'.  Delete declarations from arith-ops.h.

	* arith-ops.cc (gripe_nonconformant_assignment): Delete function.

	* tree-const.h (TREE_TO_MAT_IDX): Delete macro.
	* tree-const.cc (tree_to_mat_idx): Make it an inline function.

	* tree-const.cc (all do_matrix_assignment functions): Major
	overhaul to simplify resizing and range checking.

	* tree-const.cc (): Move here from arith-ops.cc.
	Jump to top level on errors.
	Return max value.
	(indexed_assign_conforms) New function.
	(index_check (int)): New function.
	(index_check (Range)): New function.

Tue Dec  8 21:07:23 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree-const.cc (tree_constant_rep::tree_constant_rep (Range):
	Don't create range constants that have less than 2 elements.

	* utils.cc (jump_to_top_level): New function.
	* All: Replace calls to longjmp with calls to jump_to_top_level().
	Don't include <setjmp.h>, except in octave.cc, and utils.cc.

Mon Dec  7 01:57:30 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* configure.in: Create Imakefile in gnuplot-build directory.
	Look for xmkmf, then X11/X.h.
	* gnuplot-build/Makefile.in: Try harder to get notgnuplot_x11 to
	build correctly.
	* gnuplot-build/Imakefile.in: New file, for building
	notgnuplot_x11 if xmkmf is available.

	* Version 0.50.

	* gnuplot-build/Makefile.in (SUBDIRS): Add docs.

	* tree-const.h (make_numeric_or_range_or_magic): New function.
	* tree-const.cc (do_matrix_index): Use it instead of make_numeric
	so that we actually take advantage of all the special cases we
	have for range types as matrix indices.

	* tree-const.cc (tree_constant_rep::do_matrix_index (int, Matrix)):
	Fix typo.

	* DAE.cc (integrate): If returning a matrix of values, don't mix
	time with the states.
	* ODE.cc (integrate): Likewise.

Sun Dec  6 16:58:41 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree-extras.cc (dassl): New function.
	* g-builtins.cc (builtin_dassl): Make it work.
	* doc/octave.1: Document it.

	* DAEFunc.h, DAEFunc.cc, DAE.h, DAE.cc: New files.

	* tree-extras.cc (lsode): Clean up.  Use available functions
	instead of doing everything in line.

	* tree.cc (tree_multi_assignment_expression::eval): Don't define
	constants that are of unknown type.
	Try to be smarter about padding after last value.

	* tree-extras.cc (lu): Don't bother trying to return the LU
	factorization in a single matrix since this isn't really useful
	and isn't compatible with Matlab anyway (they use Linpack, we use
	Lapack).

	* tree.cc (tree_identifier::assign (rhs, args, nargs)): Only try
	to do assignment if rhs is defined.

Sat Dec  5 18:23:55 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree-extras.cc (qr): New function.
	* g-builtins.cc (builtin_qr): New function.
	* builtins.cc: Add builtin_qr to list of builtin functions.
	* doc/octave.1: Document it.

	* Matrix.cc (Matrix::lu): Use dgesv from Lapack instead of dgefa
	since it returns L and U, not some factors that need decoding. 
	(ComplexMatrix:lu): Likewise.

Fri Dec  4 01:51:05 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* configure.in (INCDIRS): Don't include /usr/local/include.
	(LIBDIRS): Don't include /usr/local/lib.

	* tree-extras.cc (lu): New function.
	* g-builtins.cc (builtin_lu): New function.
	* builtins.cc: Add builtin_lu to list of builtin functions.
	* doc/octave.1: Document it.

	* Matrix.cc (Matrix:lu, ComplexMatrix:lu): New functions.
	* Matrix.h, Matrix.cc (LU, ComplexLU): New classes.

	* tree-extras.cc (do_quad): New function.
	* g-builtins.cc (builtin_quad): New function.
	* builtins.cc: Add builtin_quad to list of builtin functions.
	* doc/octave.1: Document it.

	* doc/Makefile.in (install): Edit the manpage to substitute
	correct values in the FILES section.
	(dist) Depend on octave.info.
	(local-dist): Ditto.

	* Quad.h, Quad.cc: New files to implement quadrature.

	* NPSOL.cc (npsol_objfun): If compiling with GCC on a Sun, assign
	to objf via assign_double().

	* sun-utils.h, sun-utils.cc: New files.
	* sun-utils.cc: Move declaration and definition of MAIN_ here from
	utils.cc.
	(access_double): New function, from GCC manual.
	(assign_double): New function, after access_double.

Thu Dec  3 03:16:03 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* NEWS: New file.
	* Makefile.in: Distribute it.

	* scripts/*.m: Change to use new end feature.

	* lex.l: Recognize `endif', `endfor', `endfunction', `endif', and
	`endwhile', in addtion to `end'.
	* parse.y: Check for command/end mismatches.
	(end_error): New function.
	* doc/octave.1: Document it.

Wed Dec  2 11:57:18 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* libcruft/villad: New directory.  Move and split villad.f here
	from libcruft/misc.
	* configure.in: Create Makefile in libcruft/villad.
	* libcruft/Makefile.in: Add libcruft/villad to list of dirs to make.

	* All Makefile.in (uninstall): New target.
	(distclean): Likewise.
	(check): Ditto.
	* Try to make clean targets conform with GNU coding standards.

	* utils.cc (smells_like_X11): New function.
	* builtin-fcns.cc (install_builtins): Don't set graphics terminal
	to x11 unless it looks like we're running X11.

	* win_texas_lotto.m: New M-file.
	* octave.1: Document it.

	* arith-ops.h: New file.
	* src/Makefile.in: Build arith-ops.o, distribute arith-ops.cc,
	arith-ops.h.  Maybe this will at least speed up recompiles.

	* THANKS: New file
	* Makefile.in: Distribute it.

	* configure.in: Create Makefile in gnuplot-build/docs.
	* gnuplot-build/docs/Makefile.in: New file.
	* Create and install notgnuplot.gih.

Tue Dec  1 00:15:48 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree.cc (tree_identifier::eval (int)): Only pad after if printing.
	(tree_multi_assignment_expression::eval (int)): Ditto.
	(tree_assignment_expression::eval (int)): Ditto.

	* hankel.m: Use disp to print message.
	* toeplitz.m: Ditto.

	* lex.l (<MATRIX>{SN}*\]/{S}*=): Check maybe_screwed_again to
	decide whether to return SCREW_TWO or ']'.

	* doc/Makefile.in (install): Really install the manpage.

	* Version 0.49.

	* Matrix.cc (ComplexMatrix::operator !): New function.
	* arith-ops.cc (do_unar_op): Use it.

	* tree-extras.cc (inverse, svd, eig): Don't try to operate on
	empty matrices.

	* Matrix.h, Matrix.cc: (EIG): New class.
	(Matrix::eig): New functions.
	(ComplexMatrix::eig): Ditto.
	* tree-extras (eig): Use them.
	* g-builtins.cc (builtin_eig): New function.
	* builtin-fcns.cc (general_functions): Add eig to list.
	* dococtave.1: Document it.

	* Matrix.h, Matrix.cc: (ComplexDET): New class.
	* tree-extras (determinant): Use it.

Mon Nov 30 04:02:29 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Matrix.h, Matrix.cc (ComplexSVD): New class.
	* tree-extras (svd): Use it.

	* Matrix.cc (svd): Use lapack instead of linpack to compute SVD.

	* libcruft/Makefile.in: Replace eispack with lapack in
	subdirectory list.
	* libcruft/eispack: Delete directory.
	* libcruft/lapack/Makefile.in: New file.
	* configure.in: Create Makefile in libcruft/lapack, not
	libcruft/eispack.

	* libcruft/lapack: New directory.
	* Copy files for SVD and Eigenvalue computation here.

	* lex.l (<MATRIX>{SN}*\]/{S}*=): Only return SCREW_TWO if not
	defining a function.

	* arith-ops.cc (do_binary_op (double, double)): For pow operator,
	don't create complex value if exponent is really an int.

	* configure.in: Check for f77 last.
	* Print warnings if bison or lex is not found.
	* Reformat fatal no f2c/f77 error message.

	* flib.sh: Make it work even if xlf is called f77.

Sun Nov 29 01:55:41 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree-extras.cc: Include f77-uscore.h.
	* Use F77_FCN macro when declaring or calling Fortran functions.

	* configure.in: After checking to see that it's not garbage, add
	the output of f2c-compat.sh to DEFS.

	* f2c-compat.sh: Figure out whether or not we need to append an
	underscore to Fortran function names.

	* flibs.sh: Handle xlf -v output as special case.

	* octave.cc: Only define BADSIG if it isn't already defined.
	* g-builtins.cc: Ditto.

	* configure.in: Don't create man/Makefile.
	* man: Directory deleted.
	* doc/Makefile.in: Distribute and install octave.1.
	* doc/octave.1: Renamed from man/octave.1.

Sat Nov 28 15:54:39 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* man/Makefile.in (install): Install manpage.
	* octave.1: rename from octave.man
	* octave.1: Document builtin variables and command line editing
	(stolen from bash man page).

	* tree-const.cc (eval (int print)): Convert complex values to real
	if imaginary part is zero.

	* octave.cc (log_usage): Deleted.
	(main): Don't call log_usage.

	* g-builtins.cc (builtin_sqrt): Delete.
	(builtin_log): Ditto.
	(builtin_log10): Ditto.

	* tree-const.h, tree-const.cc (sqrt_internal): Delete.
	(log_internal): Ditto.
	(log10_internal): Ditto.

	* tree-const.cc (mapper): Handle neg_arg_complex.

	* builtin-fcns.h (Mapper_fcn): New field neg_arg_complex.
	* builtin-fcns.cc: (mapper_functions[]): Initialize it for list of
	mapper functions.
	* builtin-fcns.cc: (mapper_functions[]): Move log, log10, and sqrt
	back here from general_functions[].

Fri Nov 27 17:05:21 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree-extras.cc (tree_constant_to_vector): Handle complex scalars
	and matrices.

Wed Nov 25 17:32:42 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* man/octave.man: New file, very incomplete.
	* man/Makefile.in: Include octave.man in list of files to
	distribute.

	* g-buitlins.cc (builtin_rand): Handle nargin == 1.
	* tree-extras.cc (rand): Likewise.

	* rem.m: New M-file.  Implemented as M-file because it's much
	simpler!

	* configure.in (DEFAULT_DOT_C_FROM_DOT_F): Escape % characters in
	rule to avoid problems with autoconf, which uses % for sed command
	delimeters.
	(DEFAULT_DOT_O_FROM_DOT_F): Ditto.

Tue Nov 24 00:21:34 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree-extras.cc (fill_matrix): Don't try to create matrices with
	negative dimensions.
	(frobit): Likewise.

	* utils.cc (check_dimensions): New function.

	* utils.cc (treat_neg_dim_as_zero): New function.
	* builtin-fcns.cc (treat_neg_dim_as_zero): New builtin variable,
	default value is false. 

	* tree-const.h (tree_constant::bump_value): Like, assign, check
	reference count and possibly make a new copy before changing
	anything.

	* tree-base.h (is_builtin): New virtual function.
	* tree.cc (tree_builtin::is_builtin): New function.

	* parse.y (ans_expression): Also check to see if the lone
	expression is a builtin text-style function invoked without any
	arguments.

	* octave.cc, t-builtins.cc: Print copyright and other normal
	(non-error) message on cout instead of cerr.

	* t-builtins.cc (builtin_warranty): Don't return message in
	retval.
	(builtin_history): Likewise.
	(builtin_help): Also.
	(builtin_who): Ditto.

	* Version 0.48.

	* tree-extras.cc: Fix most functions to handle complex arguments.
	Still need to finish SVD and DET (waiting for these functions in
	the Matrix class).

	* tree.cc (tree_multi_assignment::eval): Optionally print names
	for result variables.

	* tree-const.h (tree_constant::eval (int print, int nargout)):
	New function.  Simply ignore nargout.
	* tree.cc (tree_matrix::eval (int print, int nargout)): Ditto.

	* tree.cc (tree_parameter_list::name): New function.

	* lex.l (<NEWMAT>): Delete rules, start condition because they are
	unecessary.

	* lex.l (<MATRIX>{SN}*\]): Split into three rules.  Use trailing
	context instead of home-brew lookahead.

Mon Nov 23 00:51:51 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* utils.cc (ok_to_lose_imaginary_part): New function.
	* builtin-fcns.cc (ok_to_lose_imaginary_part): New builtin
	variable, default value is warn.

	* tree-const.h (double_value): Maybe return real part if invoked
	for complex tree_constant.
	* tree-const.h (matrix_value): Ditto.

	* Version 0.47.  This one wasn't tested, but there have been a lot
	of significant changes and I wanted a backup.

	* tree-const.cc (sqrt_internal): New function.  Sqrt isn't
	implemented as a mapper function since negative real arguments
	give complex results.
	(log_internal): Ditto.
	(log10_internal): Ditto.
	* builtin-fcns.cc: Move sqrt, log, and log10 from mapper struct
	initializer to general function struct initializer.

	* rot90.m: New M-file.  Still needs rem() to be complete.

	* tree-const.cc (mapper): Handle mapper functions for complex
	variables.

	* mappers.h, mappers.cc: New file for mapper functions.

	* builtin-fcns.h, builtin-fcns.cc: Rename from builtins.h
	builtins.cc.

	* flipud.m: Don't do indexing on lhs.
	* fliplr.m: Likewise.

Sun Nov 22 17:09:36 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* arith-ops.cc (do_binary_op (double, double)): Handle a^b for
	a < 0.

	* builtins.cc: Make sqrt a general builtin function instead of a
	mapper function.
	* g-builtins.cc (builtin_sqrt): New function.
	* tree-const.cc (sqrt_internal): New function.

Sat Nov 21 16:41:02 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree-const.h, tree-const.cc:  Complete most changes required to
	handle complex types.  There are lots of details, most will be
	omitted here.

	* tree-const.h (is_real_type) New function.
	(is_complex_type): Ditto.
	(is_scalar_type): Ditto.
	(is_matrix_type): Ditto.

	* tree-const.h (REP_RHS_MATRIX, REP_ELEM_ASSIGN, CRMATRIX,
	ASSIGN_CRMATRIX_TO, CRMATRIX_ASSIGN_REP_ELEM,
	CRMATRIX_ASSIGN_ELEM): New macro for dealing with real and complex
	matrices in the same tree_constant_rep function.  

	* tree-const.cc: Include arith-ops.cc.

	* arith-op.cc: New file for functions that implement unary and
	binary operations for the tree_constat classes.
	* Mark all operations that aren't implemented yet with a
	XXX FIXME XXX comment.  There are about 35-40 things left to fix
	in this file.

Thu Nov 19 00:25:16 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.46.
	[ This one wasn't tested, but there have been a lot of significant
	changes and I wanted a backup. ]

	* tree-const.cc (tree_constant_rep::do_unary_op): Handle Complex.
	(do_unary_op (Complex&, tree::expression_type)): New function.
	(do_unary_op (ComplexMatrix&, tree_expression_type): Ditto.

	* tree-const.cc (tree_constant_rep::assign): Handle Complex
	(still needs updated support functions in order to work).

	* tree.cc (tree_matrix::eval): Handle Complex.
	(tree_identifier::eval): Ditto.
	(tree_for_command::eval): Ditto.

Wed Nov 18 23:33:13 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree_const.cc (tree_constant_rep::rows): Handle Complex.
	(tree_constant_rep::columns): Ditto.
	(tree_constant_rep::all): Ditto.
	(tree_constant_rep::any): Ditto.
	(tree_constant_rep::cumprod): Ditto.
	(tree_constant_rep::cumsum): Ditto.
	(tree_constant_rep::prod): Ditto.
	(tree_constant_rep::sum): Ditto.
	(tree_constant_rep::sumsq): Ditto.

	* tree_const.h, tree_const.cc (tree_constant::complex_value): New
	function.
	(tree_constant_rep::complex_value): Ditto
	(tree_constant::complex_matrix_value): New
	(tree_constant_rep::complex_matrix_value): New

	* tree_const.cc (tree_constant_rep::~tree_constant_rep): Handle
	complex scalars and matrices.
	(tree_constant_rep::force_numeric): Ditto.
	(tree_constant_rep::make_numeric): Ditto.
	(tree_constant_rep::eval): Ditto.
	(tree_constant_rep::bump_value): Ditto.  C++, for C == a
	complex value is C = C + 1.  Should I even do this?  Hmmm.

	* tree-const.h, tree-const.cc: Begin adding support for Compelex.
	* Add complex_scalar and complex_matrix to value union.
	* Add complex_scalar_constant and complex_matrix_constant to type
	tag enum.
	* New constructors.

	* Matrix.h, Matrix.cc: Major changes to add Complex support.

Tue Nov 17 14:40:45 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Matrix.cc (RowVector::operator (const Matrix&)): New function.

	* Matrix.cc (ColumnVector::transpose): New function.
	Eliminate friend function that served the same purpose.
	(RowVector::transpose): Ditto.

Mon Nov 16 09:57:33 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* lex.l (QSTRING): Fix to allow '' inside a string to represent a
	single quote.  Makes computer.m a little funnier.

Fri Nov 13 18:46:39 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.45.

	* computer.m: New M-file.
	* tril.m: Ditto.
	* triu.m: Ditto.

	* doc (*.texi): Can now produce BUGS, INSTALL, and octave.info
	files without generating errors, though the organization is
	probably till very wrong.

	* Makefile.in (newversion): Add magic to handle major versions
	other than 0, and major/minor versions of any length.

Thu Nov 12 01:37:45 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* g-builtins.h, tree-const.h, builtins.cc, g-builtins.cc,
	tree-extras.cc: Conditionally compile code for NPSOL and FSQP
	based on FSQP_MISSING and NPSOL_MISSING.
	* g-builtins.cc (builtin_npsol): If NPSOL is missing, always call
	npsol_usage() to print out message indicating why NPSOL doesn't
	work.
	* g-builtins.cc (builtin_fsqp): Likewise for FSQP.

	* configure.in: Check for srcdir/libcruft/npsol/npsol.f and 
	srcdir/libcruft/fsqp/fsqp.f.  If missing, define NPSOL_MISSING or
	FSQP_MISSING and add them to DEFS.

	* libcruft/npsol/README.MISSING: New file.
	* libcruft/fsqp/README.MISSING: Ditto.

	* libcruft/npsol/Makefile.in (dist): Don't distribute sources
	because of license restriction.  Do distribute Makefile.in and
	README.MISSING.
	* libcruft/fsqp/Makefile.in (dist): Ditto.

	* All Makefile.in files (local-dist): New target, usually the same
	as dist.

	* parse.y (ans_expression): Check to see that the RHS isn't just
	an identifier.
	* tree.cc (tree_identifier::eval (int)): Maybe print id name.
	* tree.cc (tree_assignment::eval (int)): Ditto.
	* buitlins.cc (print_answer_id_name): New builtin variable.
	* utils.cc (print_answer_id_name): New function.

Tue Nov 10 10:58:36 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* octave.cc (log_usage): Surround with #if 0/#endif.

Mon Nov  9 13:42:54 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* symtab.cc (load): Only issue error mesasge if attempt to find
	_first_ name keyword fails.

	* tree-const.cc (make_numeric_or_magic): New function.  Like
	make_numeric except also pass magic_colons.
	* tree-const.cc (all do_matrix_index functions): Matrix ndices can
	be naked colons, so use make_numeric_or_magic on index arguments
	instead of make_numeric.

	* liboctave/Makefie.in (install): Install .h files in $(includedir).
	(includedir): New macro, default value $(prefix)/include.

	* tree.cc (tree_function::eval (int print)): Force arguments to be
	undefined.

	* tree-const.h (tree_constant::assign (rhs, args, nargs)): Check
	reference count before assigning.
	* tree.cc (tree_identifier::assign (rhs, args, nargs)): Don't eval
	lhs before doing assignment.

	* tree.cc (parse_m_file): Gobble leading white space, including
	comments.

Fri Nov  6 16:52:59 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.44.

	* g-builtins.cc (builtin_getenv): New function.

	* isempty.m: New M-file.

	* g-builtins.cc (builtin_exist): New function.
	* utils.cc (identifier_exists): Handle the dirty details.

	* utils.cc (warn_comma_in_global_decl): New function.
	* builtins.cc (warn_comma_in_global_decl): New builtin variable.
	Initial value is true.
	* parse.y (global_decl): Handle global declarations here,
	including optional initialization.
	* t-builtins.cc (builtin_global): Deleted.

Thu Nov  5 23:59:39 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* g-builtins.cc (builtin_feval): New function.
	* tree-extras.cc (feval): Handle the dirty details.

	* g-builtins.cc (builtin_rand): New function.
	* tree-extras.cc (rand): Handle the dirty details.

Wed Nov  4 14:54:17 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* num2str.m: New M-file.
	* int2str.m: Ditto.

	* g-builtins.cc (builtin_disp): New function.

	* g-builtins.cc (builtin_fprintf, builtin_printf,
	builtin_sprintf):  New functions.
	* tree-extras.cc (do_printf): New function to handle the gory
	details.

	* g-builtins.cc (builtin_flops): Implement here because we may
	actually want to count operations at some point.

Tue Nov  3 17:06:40 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree-const.cc (do_binary_op): Detect and give error message for
	optations on empty matrices.
	(do_unary_op): Likewise.

	* parse.y (matrix): Convert `[]' and `[;]' to empty matrices
	instead of (tree_matrix *) NULL.

Mon Nov  2 11:23:40 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* src/Makefile.in: Update dependencies.
	* liboctave/Makefile.in: Ditto.

	* tree-const.cc (force_numeric): Consult matlab_strings()
	before doing string to number conversion.
	* builtins.cc (matlab_strings): New builtin variable.
	* utils.cc (matlab_strings): New function.

	* tree-extras.cc (linear_constraints_ok): New function.
	(linear_constraints_ok): Ditto.
	(npsol): Use them to avoid creating inconsistent sets of
	constraints and crashing.  It would really be nice to have
	exception handling.

	* symtab.cc (load): Issue error mesasges if attempt to find
	name keyword fails.

	* Version 0.43.

	* tree-extras.cc (npsol): Use new minimize (phi, inform).
	Handle nargout == 3.

	* g-builtins.cc (builtin_npsol): Allow nargout == 3.

	* NPSOL.cc (set_default_options): New function.
	(all constructors): Use it.
	(operator =): Use it and print warning message (setting default
	options doesn't represent a true copy and it would be somewhat
	difficult to fix this...).

	* npchkd.f (npchkd): Only write message if msglvl > 0.

Sun Nov  1 00:58:16 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* gnuplot-build/Makefile.in (LIBDIRS): Set correctly.
	(notgnuplot): Use it.

	* libcruft/misc/gen-d1mach.c: Generate d1mach.f at build time
	instead of depending on the installer to get it right.
	* libcruft/Makefile.in (gen-d1mach): New target.

	* libcruft/Makerules.in (SPECIAL): New macro.
	(DISTFILES): Include it.

	* libcruft/Makerules.in (SPECIAL_DEPEND): Ditto.
	(../../libcruft.a): Use it.

Mon Oct 26 02:25:11 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree-extras.cc (is_valid_function): Try harder to find M-files
	that may not have been parsed yet.

	* symtab.cc (define (symbol_record*)): New function.  Make it
	simple to copy all fields of a symbol_record if we already have
	one.
	* utils.cc (force_global): Use it.

	* utils.cc (valid_identifier): Allow underscores in names.

	* tree-extras.cc (npsol): Force column vector to be returned.
	(fsolve): Ditto.

	* Version 0.42.

	* tree-extras.cc (fsolve): New function for solving nonlinear
	algebraic equations.  This needs much more work if it is to
	provide all the functionality of Matlab's fsolve.

	* tree-extras.cc (fsolve_user_function): New function.

	* libcruft/minpack: Import needed functions.

	* tree-extras.cc: (npsol (tree_constant*, int, int): Completely
	rewrite to handle all of the follwing:

	  1. npsol (x, phi)
	  2. npsol (x, phi, lb, ub)
	  3. npsol (x, phi, lb, ub, llb, c, lub)
	  4. npsol (x, phi, lb, ub, llb, c, lub, nllb, g, nlub)
	  5. npsol (x, phi, lb, ub,              nllb, g, nlub)
	  6. npsol (x, phi,         llb, c, lub, nllb, g, nlub)
	  7. npsol (x, phi,         llb, c, lub)
	  8. npsol (x, phi,                      nllb, g, nlub)

	* tree-extras.cc (npsol_constraint_function): New function.

	* tree-extras.cc (tree_constant_to_vector): New function.
	(tree_constant_to_matrix): Ditto.
	(takes_correct_nargs): Ditto.

Fri Oct 23 10:19:51 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree-extras.cc (is_valid_function): New function.
	(npsol): Use it.

	* utils.cc (s_plural): New function.
	(es_plural): Ditto.

	* tree-extras.cc (npsol): Improve checks for valid objective
	function.

	* tree.cc (tree_function::max_expected_args): New function.

Thu Oct 22 18:42:07 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* g-builtins.cc (builtin_lsode): Quick check of arguments, then
	call lsode (tree_constant *, int, int).
	* Move rest of code for implementing builtin_lsode to
	tree-extras.cc.

	* g-builtins.cc (builtin_npsol: Quick check of arguments, then
	call npsol (tree_constant *, int, int).
	* Move rest of code for implementing builtin_npsol to
	tree-extras.cc.

	* tree-const.cc: Simplify functions that require numeric arguments
	by always calling make_numeric for them instead of doing it
	conditionally.
	* tree.cc: Ditto.
	* tree-extras.cc: Ditto.

	* tree-const.h (tree_constant::make_numeric): Return *this if
	already a numeric type.

	* NLP.cc: In constructors, don't try to assign NULL to bounds
	objects.

	* tree-const.cc (tree_constant_rep::valid_as_scalar_index (void)):
	New function.
	* tree-const.cc (valid_scalar_indices (tree_constant*, int):
	New function.
	* tree-const.cc (tree_constant_rep::do_scalar_index): Simplify by
	using functions to determine if arguments are valid as indices.
	(tree_constant_rep::do_scalar_assignment): Likewise.

Wed Oct 21 14:11:58 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree-extras.cc (determinant): Make it work again.

	* tree.cc (tree_identifier::eval (tree_constant*, int, int, int):
	Simplify logic.  Only have one ans->eval() call.

	* tree-const.cc (tree_constant_rep::eval (tree_constant*, int,
	int, int): Properly handle indexing of range constants.

	* tree-const.cc (stupid_fortran_style_matrix_index): Preserve row
	or column orientation for vectors.

	* toeplitz.m: New M-file.
	* invhilb.m: Ditto.
	* hankel.m: Ditto.

	* tree-extras.cc (max): Handle two arg case.
	tree-extras.cc (max): Likewise.
	(min (Matrix&, Matrix&): New function.
	(max (Matrix&, Matrix&): Ditto.

Tue Oct 20 15:13:57 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.41.

Mon Oct 19 16:46:35 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* rows.m: New M-file.
	* g-builtins.cc (builtin_rows): Delete function.
	* g-builtins.h (builtin_rows): Delete declaration.
	* builtins.cc (general_functions): Delete from initialization list.

	* columns.m: New M-file.
	* g-builtins.cc (builtin_columns): Delete function.
	* g-builtins.h (builtin_columns): Delete declaration.
	* builtins.cc (general_functions): Delete from initialization list.

	* length.m: New M-file.
	* g-builtins.cc (builtin_length): Delete function.
	* g-builtins.h (builtin_length): Delete declaration.
	* builtins.cc (general_functions): Delete from initialization list.

	* g-builtins.cc (builtin_size): If two values are expected to be
	returned, put nr and nc in separate registers.

Sun Oct 18 13:37:17 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree-base.h: Extract base tree class declarations from tree.h.
	* tree-const.cc, tree-const.h: Extract tree_constant class from
	from tree.cc, tree.h.
	Change all uses of tree.h to use either or both of tree-base.h and
	tree-const.h.

	* Matrix.cc (solve): Replaces LinEqn class.
	tree.cc (do_binary_op) Use it.

	* g-builtins.cc (builtin_max): New function.
	tree.cc (tree_constant::max): New friend.

	* g-builtins.cc (builtin_min): New function.
	tree.cc (tree_constant::min): New friend.

	* cond.m: New M-file.

	* rank.m: New M-file.

	* g-builtins.cc (builtin_svd): New function.
	tree.cc (tree_constant::svd): New friend function.

	* g-builtins.cc (builtin_svd): New function.
	tree.cc (tree_constant::svd): New friend function.

	* t-builtins.cc (builtin_format): New function.  Implement some of
	the Matlab options (sort of).

	* Major changes to liboctave source.  A new Matrix.cc/Matrix.h
	completely replaces the old Matrix/Vec/AVec code.  All other
	classes that use Matrix/Vector objects have been updated (or
	deleted, if they are no longer needed).  All callers changed in
	octave sources.

Sun Oct 11 21:22:16 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree.cc (tree_function::eval): Don't define more function
	parameters than are expected.  If fewer arguments than expected
	are actually supplied, force them to be undefined.

	* parse.y (fact): Give warning and abort for identifiers followed
	by '['.  This should catch most improper uses of [] instead of ()
	for indexing operators.

	* tree.cc (do_binary_op (Matrix&, Matrix&, tree::expression_type):
	Handle element by element exponentiation.

Tue Sep 22 10:09:06 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.40.

Mon Sep 21 13:09:06 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* lex.l: Accept ** and .** as well as ^ and .^ as exponentiation
	operators.

Fri Sep 18 15:19:51 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree.h tree.cc utils.cc g-builtins.cc: Elimitate need for
	overloaded operator-> in the tree_constant class.  Also eliminate
	uses of ->string, ->scalar, etc.  Instead, always call
	.string_value(), .double_value(), etc.

	* builtins.cc (install_builtins): Reserve `ans' as an
	uninitialized global variable (should it really be global?).

	* parse.y (ans_expression): Handle default assignemnt to builtin
	variable ans.
	(command): Use it.

Tue Sep 15 14:06:12 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.39.

	* tree.cc (tree_identifier::bump_value): Don't try to increment
	undefined symbols or values.
	(tree_prefix_expression::eval): Don't call bump_value if id is a
	NULL_TREE.
	(tree_prefix_expression::eval): Likewise.

	* g-builtins.cc (lsode_builtin): Handle extra arguments.
	liboctave/ODE.cc (integ): Add template for handling bad returns
	from lsode.

	* tree.cc (class tree_return_command): Implementation is just like
	break and continue.  Something seems wrong about this...
	lex.l (return): Recognize return statement.
	parse.y (statement): Handle function returns.
	tree.cc (various eval functions): Check to see if we are returning
	from a function.

	* tree.cc (tree_for_command::eval): Set abort_on_undefined when
	evaluating the loop body.
	(tree_while_command::eval): Ditto.	

	* tree.cc (class tree_idenfier): Improve searching/parsing M-files
	when handling undefined names.
	tree.cc (tree_identifier::parse_m_file (char*)): New function.
	(tree_identifier::parse_m_file (void)): Use it.
	
	* utils.cc (force_global): New function.
	* symtab.cc (symbol_table::remove_name(char *)): New function.

	* tree.h, tree.cc (class tree_constant): Split into two classes,
	tree_constant (handle) and tree_constant_rep (body) to enable use
	of `smart pointers' and reference counted memory management.
	(Lots of things are different with this change.)

Sat Aug 22 11:58:27 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.38.

	* lex.l (COMMA_KLUDGE): Delete production, all uses.  This doesn't
	seem to be necessary anymore, and the mystery output lines
	disappear without it.

	* builtins.cc (make_eternal (char *)): New function.
	(install_builtins): Make LOADPATH, eps, pi, Inf, and NaN eternal.

	* New M-files: mean.m, std.m, hadamard.m, vander.m, hilb.m,
	linspace.m, logspace.m.

	* tree.cc (tree_function::eval): Don't check number of arguments
	supplied against total number possible (previously thought to be
	`expected') so that user-defined functions can have variable
	numbers of arguments.

	* tree.cc (tree_identifier::eval_undefined_error): New function.
	(tree_identifier::eval): Use it.

	* octave.cc (abort_on_undefined): New global symbol to control
	whether we should jump to top level after an undefined symbol has
	been encountered.
	tree.cc (tree_function::eval) Set it before evaluating function
	body, restore to previous value after successful completion.
	tree.cc (tree_identifier::eval_undefined_error): Use it

Fri Aug 20 09:31:14 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* g-builtins.cc:  New mapper functions:
	isnan: Uses xisnan, which calls IEEE function isnan.
	isinf: Uses xisinf which calls IEEE functions finite and isnan,
	or isinf if available.
	finite: Uses xfinite, which calls IEEE function finite.
	abs: Uses fabs.

	* g-builtins.cc	(sumsq): New function.
	(diag): New function.

	* tree.cc (tree_constant::sumsq): New function
	(tree_constant::diag): New function

	* Matrix.cc (sumsq): New function.
	(diag): Ditto.

Thu Aug 20 00:36:44 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* g-builtins.cc (builtin_error): New function.

	* gnuplot-build/Makefile.in (dist): Actually create `term'
	subdirectory.

	* Lots of changes to tree.cc tree_assignment_expression::eval and
	tree_index_expression::eval to make matrix indexing work like
	Matlab.
	(do_fortran_indexing): New user-level variable to control this
	behavior.  If this variable is false, things like

	  a([1,2;3,4], [1,2;3,4]) = b

	become syntax errors.  Otherwise, Matlab braindamage prevails.

Tue Aug 18 13:15:46 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.37.

	* tree.cc (do_matrix_assignment): Conditionally allow single
	indices for Matrix assignments.
	(do_matrix_index): Ditto.

	* utils.cc (do_fortran_indexing): New function.
	utils.h: Declare it.
	builtins.cc (install_builtins): Default value for new
	do_fortran_indexing variable.

	* builtins.cc (install_builtins): Bind eps to the value
	DBL_EPSILON from float.h.  Make it read only (will this cause
	trouble)?
	* Bind Inf to 1/0 (will only work for IEEE machines.
	* Bind NaN to 0/0 (will only work for IEEE machines.
	* Add round, fix, floor, ceil, and sign to builtin mapper functions.
	(round): New function.
	(fix): Ditto.
	(signum): Ditto.
	* Add clc (clear screen function).
	* Add home (clear screen function).  To be just like Matlab, this
	wouldn't clear the screen.

	* New M-files: fliplr.m, flipud.m, trace.m, reshape.m.

	* utils.cc (bind_variable): Revise bind_string_variable so that it
	takes a tree_constant as an argument.
	(bind_protected_variable): Likewise for the function
	bind_protected_string_variable.
	(bind_string_variable): Delete.
	(bind_protected_string_variable): Ditto.
	utils.h: Fix declarations.
	builtins.cc t-builtins.cc: Fix callers.

	* builtins.cc (install_builtins): Bind LOADPATH here.
	octave.cc (initialize_globals): Not here.

	* Makefile.in (SOURCES): Add new scripts directory.
	(scripts): New target.
	libcruft/Makefile.in (install): Don't depend on all.

	* utils.cc (m_file_in_path): Get path from LOADPATH variable.
	tree.cc (tree_identifier::parse_m_file): Modify caller.

	* src/Makefile.in (OCTAVE_M_FILE_DIR): New variable.
	(utils.o): Use it.
	utils.cc (default_path): Use it.

	* utils.cc (pathstring_to_vector): New function.
	(default_path): Return colon separated path instead of vector of
	paths.
	* octave.cc (initialize_globals): Use pathstring_to_vector here.
	Bind output of default_path to LOADPATH variable.
	Eliminate octave_path global variable.

	* tree.cc (isstr): New function.
	(all): Ditto.
	(any): Ditto.
	(cumprod): Ditto.
	(cumsum): Ditto.
	(prod): Ditto.
	(sum): Ditto.

	* g-builtins.cc (builtin_isstr): New function.
	(builtin_all): Ditto.
	(builtin_any): Ditto.
	(builtin_cumprod): Ditto.
	(builtin_cumsum): Ditto.
	(builtin_prod): Ditto.
	(builtin_sum): Ditto.

	* Matrix.cc (all): New function.
	(any): Ditto.
	(cumprod): Ditto.
	(cumsum): Ditto.
	(prod): Ditto.
	(sum): Ditto.

	* scripts: New directory.
	scripts/strcmp.m: New file (first M-file function in distribution!).
	scripts/Makefile.in: New file.
	configure.in: Include scripts/Makefile in list of files to create.

Sat Aug 15 18:32:24 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.36.

Fri Aug 14 08:44:10 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree.cc (id_to_define): New global variable.
	(curr_m_file_name): Ditto.
	(current_infile): Ditto.

	* tree.h tree.cc (tree_identifier::parse_m_file): New function.
	(tree_identifier::eval): Handle M-files.

	* tree.h (stash_m_file_name): New virtual function.
	(stash_m_file_time): Ditto.
	(time_parsed): Ditto.
	(m_file_name): Ditto.

	* tree.h tree.cc (tree_function::stash_m_file_name) New function.
	(tree_function::stash_m_file_time): Ditto.
	(tree_function::time_parsed): Ditto.
	(tree_function::m_file_name): Ditto.

	* lex.l (reading_m_file): New global variable.
	(delete_buffer): New function.
	(yywrap): New function.  Always return 0 (is this a smart thing to
	do?).

	* parse.y (func_def2): Handle input from m-files (sort of).

	* octave.cc (octave_path): New global variable.
	(using_readline): Ditto.
	(no_line_editing): Ditto.

	* octave.cc (main): Initialize current_command_number before
	calling setjmp.
	* Increment it in main command loop, not in parse.y.

	* utils.h utils.cc (default_path): New function.
	(m_file_in_path): Ditto.
	(is_newer): Ditto.

	* octave.cc (main): Execute commands here.
	* parse.y (input): Not here.

	* octave.cc (tree *global_command): New global variable that
	points to the current command to be executed.

Thu Aug 13 07:08:11 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* parse.y: Make word_list_cmd a fact, not a command, so that
	things like `y = who -all' can work.  You can't do that in Matlab.

	* t-builtins.cc (builtin_who): Print symbols in columns, sorted.
	(list_in_columns) New function, mostly stolen from GNU ls.

	* symtab.h symtab.cc (char **list (void)) New function.
	(char **sorted_list (void) New function.

	* tree.cc (various eval functions): Handle printing results of
	text and general functions here.  Straighten out other printing
	stuff, maybe...

	* t-builtins.h t-builtins.cc: Make text functions return
	tree_constant* instead of int, delete print flag argument.

	* g-builtins.h g-builtins.cc: Delete print flag argument.

	* Version 0.35.

Wed Aug 12 15:12:23 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree.cc (tree_builtin::eval): Call mapper function with
	print = 0 to avoid getting two answers.
	(specific do_matrix_assignment functions): Handle resizing
	correctly for `:' indices.
	(tree_colon_expression::eval): Don't crash if the evaluation of
	an operand yields a NULL_TREE_CONST.

Mon Aug 10 07:31:37 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree.cc (tree_identifier::define):  Return NULL_TREE_CONST if
	symbol_record::define fails.
	(tree_identifier::assign): Likewise.

	* symtab.h (symbol_lifetime): New attribute for symbol_records.
	Can be either temporary or eternal.
	(symbol_class): Delete eternal attribute.
	* builtins.cc (install_builtins): Mark all builtins as eternal.

	* Version 0.34.

	* tree.h: Delete ttype, enum list of tree types.

	* g-builtins.h g-builtins.cc (builtin_colloc): New function.

	* liboctave (various): Add missing return values, etc. so that
	liboctave compiles cleanly.

	* tree.h tree.cc (tree_multi_assignment): New class to implement
	assignments to more than one variable.  Does it work?  Maybe...

	* tree.h (tree_constant **eval (int, int)): New virtual function.
	(is_identifier): Another one.

	* symtab.h (eternal): New class for symbol_records.
	* symtab.h symtab.cc (make_eternal): New function.
	* builtins.cc (install_builtins): Make builtin variables eternal.

	* tree.cc (list_to_vector): Surround by `#if 0/#endif' to avoid
	compilation warning. 

Sun Aug  9 03:18:38 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* t-builtins.h t-builtins.cc (builtin_cd): New function adapted
	from bash for changing the current working directory.
	(builtin_pwd): New function adapted from bash for printing the
	current working directory.

	* utils.h utils.cc: New functions from bash for changing and
	printing the current working directory:

            pathname_backup        make_absolute
            get_working_directory  change_to_directory

	* utils.h utils.cc (bind_string_variable): New function.
	(bind_protected_string_variable): Likewise.

	* octave.cc (initialze_globals): New function.

	* utils.h utils.cc: New functions from bash, mostly for fancy
	prompting:

	    polite_directory_format  absolute_pathname
	    absolute_program         base_pathname
	    read_octal               sub_append_string
	    decode_prompt_string

Thu Aug  6 02:39:31 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* octave.cc (initialize_history): Fix up to
	(octave_hist_file) New global variable.
	(octave_hist_size) Ditto.
	(history_lines_this_session) Ditto.
	(history_lines_in_file) Ditto.

	* input.cc (octave_gets): Keep track of number of lines read
	during the current session.

	* utils.cc (default_history_file): New function.  Look for
	OCTAVE_HISTFILE environment variable and use its value if
	possible.
	(default_history_size): New function.  Look for OCTAVE_HISTSIZE
	environment variable and use its value if possible.

	* t-builtins.cc (builtin_history): Steal from bash and modify to
	work with octave.

	* g-builtins.cc (builtin_det): New function.

	* tree.h tree.cc (determinant): New function

	* g-builtins.cc: Rewrite functions that use fill_matrix, inverse,
	and identity_matrix to use new versions implemented as friends of
	tree_constant.  This is being done in an attempt to get rid of all
	calls to tree_constant::const_type() outside of tree.cc.

	* tree.cc (tree_constant): Implement new functions for filling
	and inverting tree constants as matrices, and for creating an
	identity matrix from a tree_constant.

	* g-builtins.cc (builtin_inv): New function.
	builtins.cc: Allow builtin_inv to be called as either inv(A) or
	inverse(A).

	* tree.cc (do_binary_op (Matrix, Matrix)): Better handling of
	solution of linear equations for square coefficient matrices.

	* LinEqn.cc (solve): Don't exit on singular matrices.  Implement
	new variations of these functions that will allow status checking.

	* src/Makefile.in: Define GNUPLOT_BINARY and SITE_DEFAULTS.
	Specific rules for octave.o and builtins.o to avoid defining
	GNUPLOT_BINARY and SITE_DEFAULTS for all .cc targets.

	* builtins.cc: Use macro GNUPLOT_BINARY.

	* octave.cc (execute_startup_files): Use macro SITE_DEFAULTS.
	Execute commands from SITE_DEFAULTS file.

	* t-buitlins.cc (builtin_pause): Make it work.

	* configure.in: Check for termio.h and/or sgtty.h.

	* octave.cc (clean_up): Reset terminal state to cooked mode.
	(main) Likewise, after return from SIGINT signal handler.

	* utils.h utils.cc (raw_mode): New function (mostly stolen from
	less(1)) toggle input processing for stdin to raw/cooked modes.
	(kbhit): New function to read one character from cin in raw mode
	without echoing it.

	* builtins.cc: Fix expected number of arguments in lists of
	builtins.

	* tree.h tree.cc (max_args_expected (void)): New virtual function.
	(tree_builtins::) Provide a definition of it.

	* lex.l (identifier): Before gobbling up text function arguments,
	check to see that we expect some.

	* symtab.h symtab.cc (max_args_expected): Return max args expected
	by a symbol (currently only valid for tree_builtins).

Wed Aug  5 05:03:59 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* utils.h utils.cc (resize_on_range_error): Decide what to return
	based on value of global variable of same name.
	(prefer_column_vectors): Likewise.

	* Version 0.33.

	* parse.y (func_def2): Call define (tree *, symbol_type), not
	define (tree *), so that the symbol type is set for user-defined
	functions.
	(assignment): Catch assignments to functions here.

	* tree.h tree.cc (tree_identifier::define (tree *, symbol_type):
	New function (be careful out there...).

	* symtab.h (symbol_type): Add new `user_function' enum value.

	* tree.cc (do_matrix_assignment): Call prefer_column_vectors().

	* tree.h tree.cc (do_matrix_assignment (...)): New functions to
	implement assignment to indexed matrices.
	(do_scalar_assignment (...)): New function to implement assignment
	to an indexed scalar.

	* utils.h utils.cc (resize_on_range_error): New function.  Should
	eventually decide what to return based on value of global variable
	of same name.
	(prefer_column_vectors): New function.

Tue Aug  4 05:37:47 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree.cc (tree_constant::save): New function.
	(tree_constant::load): New function.

	* symtab.cc (symbol_record::save): New function.
	(symbol_table::load): New function.

	* t-builtins.cc (builtin_load): Start implementation.  Yikes, this
	is probably going to need a lot of work to be very robust...

	* t-builtins.cc (builtin_save): Implement by asking the
	symbol_record to save itself.  Maybe this should really be done by
	asking the symbol table to save a symbol...

	* utils.cc (extract_keyword): New function.
	(valid_identifier): New function.

Fri Jul 31 04:16:24 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* parse.y (func_def3): Extra error cases for empty function
	bodies.
	(func_def1, func_def1a, func_def1b): Slighly straighten out some
	truly twisted logic, eliminate func_def1a, rename func_def1b to
	func_def1a, and make statementss like function [x,y] = foo() end
	work properly (I think).
	(func_def*): Put function name in global symbol table, not top
	level symbold table.  This makes them accessible from other
	functions, eh?

	* t-builtins.cc (builtin_who): Accept -all, -local, -global, and
	-top flags.

Thu Jul 30 00:39:40 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* lex.l (current_buffer): New function to return current flex
	input buffer.  Will need this to be able to switch file contexts.

	* Version 0.32.

	* lex.l (create_buffer, switch_to_buffer): New functions to handle
	input from various streams.  This should be enough to allow us to
	implement Matlab-like M-files.
	octave.cc (main, execute_startup_files): Use them.

	* octave.cc (execute_startup_files): Execute commands from
	$HOME/.octaverc and ./.octaverc.

	* g-builtins.cc (builtin_plot): Delete temporary files.
	Ignore SIGINT while gnuplot is executing.

Wed Jul 29 20:16:25 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree.cc (all_args_defined): New function to check a
	tree_constant** vector to see if all elements are non-null.
	(tree_index_expression::eval (int)): Use it, and abort the
	evaluation if test fails.

	* terminals.h, terminals.cc: New files for doing things with
	gnuplot graphics terminal names.
	src/Makefile.in: Handle new files.

Tue Jul 28 00:25:24 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* g-builtins.cc (builtin_plot): Make it work, at least halfway.

	* g-builtins.cc (builtin_save): New function.

	* gnuplot-build/Makefile.in: Add -DREADLINE and remove readline.o
	from list of objects to actually enable the GNU command line
	editing.

	* configure.in: Use AC_PROG_CHECK macro to search for f2c and f77.
	Check for several common Un*x Fortran compilers.
	Add extra messages.

	* g-builtins.cc g-builtins.h: New files for builtin general
	functions extracted from builtins.cc.

	* t-builtins.cc t-builtins.h: New files for builtin text functions
	extracted from builtins.cc.

	* Makefile.in (split-dist): New target.

	* Version 0.31.

Mon Jul 27 22:01:58 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree.cc (tree_constant::do_matrix_index (tree_constant **, int):
	Allow single argument to work for matrices that are really row or
	column vectors.

	* lex.l: Accept `<>' in addition to `!=' and `~=' as `not equal'
	comparison operators.

	* libcruft/Makerules: Allow for compiling the Fortran routines
	with the native Fortran compiler instead of translating to C.

	* f2c-compat.sh, flibs.sh: New scripts which try to determine
	whether it will be possible for us to use the system's Fortran
	compiler directly, and if so, what libraries to add to the loader
	command.  These scripts are known to work on SPARCstations running
	SunOS and DECstations running Ultrix.  Not tested elsewhere...
	* configure.in: Use them.
	* Makefile.in: Distribute them.

Wed Jul 22 00:04:48 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* builtins.cc: Begin implementation of NLP solver using NPSOL.

Tue Jul 21 13:44:13 1992  John W. Eaton  (jwe@june.che.utexas.edu)

	* octave.cc: If printing version information, also print pointer
	to warranty info.

	* builtins.cc: Implement the Matlab functions ones, zeros, eye,
	clock, date, size, length, and global.
	Implement warranty builtin.
	(builtin_clear): Fix to work with global variables.

	* symtab.cc (clear): Fix to work properly with global variables.

Mon Jul 20 11:58:23 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree.cc (tree_constant::do_matrix_index (tree_constant**, int)): 
	Make string indices work.
	(tree_constant::force_numeric): Don't special case
	single-character strings (this uncovers a flaw in the design of
	the constructor for the magic colon operator...).

Fri Jul 17 16:33:00 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.30.

	* tree.cc: Delete undefined identifiers when trying to eval them.

	* builtins.cc: Add beginnings of builtin who and clear functions.

	* symtab.cc symtab.h (clear): New function.

	* tree.cc, tree.h, parse.y: Implement matrix indexing with colon
	expressions, implement the magic colon operator for column and row
	selection.

	* tree.cc tree.h: Completely rework colon expressions.

Thu Jul 16 09:27:48 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* gnuplot-dist: Rename from gnuplot-3.2 so we're not tied to a
	version number.

Tue Jul 14 11:22:35 1992  John W. Eaton  (jwe@ward.che.utexas.edu)

	* tree.cc builtins.cc: Make argc/nargs/nargin work like C:
	the argument count is the number of command line arguments plus
	the function name.  This goes for `argument lists' for matrices as
	well as functions.  It seems a bit awkward but at it's consistent,
	and it's like C.  Hmm.  Maybe this is a bad choice...

	* utils.cc utils.h: New files for utility functions.

Mon Jul 13 00:29:50 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.29.

	* tree.cc tree_constant::tree_constant (matrix): Automatically
	convert 1x1 matrices to scalars.

	* parse.y lex.l: Fix up a bunch of stupid stuff and reduce the
	number of shift/reduce conflicts to 16 (all but one because of the
	optional separator garbage).

	* parse.y lex.l: Allow for assignments to lists of identifiers to
	be partially parsed.  This will still require some error checking
	in tree.cc to ensure that the list is made up of identifiers only,
	since that's not enforced by the grammar (I don't see a way to do
	it, do you?)

Sun Jul 12 11:24:33 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* tree.cc tree.h parse.y lex.l: Implement logical AND (symbol &),
	OR (symbol |), and not (symbol ~).  Also provide the C-style
	operators &&, ||, and !).

	* Matrix.cc Matrix.h: Provide stupid element-wise logical
	operators for matrices.

	* Version 0.28.

	* parse.y lex.l tree.cc tree.h: Implement C-style prefix and
	postfix increment and decrement operators (symbols ++ and --
	respectively).

	* parse.y lex.l tree.cc tree.h: Implement break and continue.

	* tree.cc tree.h: Assignment to matrix elements roughed out.

	* gnuplot/tree.cc: Solution of linear equations via the lift
	division operator partially implemented.  Singular coefficient
	matrices aren't handled very well yet...

	* gnuplot-build/Makefile.in: Make this work to build gnuplot for
	generic X11/unix environments.
	* Remove -Wall from CFLAGS to avoid loads of warnings.
	* Use GNU readline instead of the one that comes with gnuplot.

	* gnuplot-build/*.diff: Various patches for various things.

Sat Jul 11 10:14:12 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.26

	* src/Makefile.in: Distribute lex.cc, parse.cc, y.tab.h.
	* src/Makefile.in (dist): Depend on lex.cc and parse.cc.

	* gnuplot-build: New directory for patching and building gnuplot.
	This is apparenty required because the gnuplot license won't allow
	distrubution of modified versions, but will allow patches to be
	distributed.
	* gnuplot-build/Makefile.in: New file.

	* gnuplot-3.2: New directory.

	* readline: New directory from the bash-1.12 distribution, plus
	tilde.c from bash's lib/glob directory and xmalloc.c from bash's
	lib/malloc directory.
	* readline/Makefile.in, readline/doc/Makefile.in,
	readline/examples/Makefile.in: New files.

	* All Makefie.in files: Allow make to work from any directory, not
	just the top level one.

Fri Jul 10 22:20:56 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* SERVICE: Remove, since it seems too specific to GNU products.

Thu Jul  9 07:48:33 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.20.

	* Solution of ODEs with LSODE partially implemented.  It's
	possible to solve some simple equations.

	* tree.cc tree.h (tree_constant): Add string constants and make
	them work more or less like string constants in Matlab (implicit
	conversion to ASCII numbers -- gag.  This isn't complete, and it
	it assumes that ASCII is the character set for the host
	machine/compiler...).

Tue Jul  7 07:28:35 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.19.

	* User defined function definitions and calls to them mostly work.
	Still need to implement multiple return values correctly.

Mon Jul  6 04:23:37 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.18.

	* lex.l parse.y tree.cc tree.h: Begin implementation of
	user-defined functions.

Sun Jul  5 19:27:08 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.17.

	* lex.l: Replace SAVE_STRING macro with a function.

	* builtins.cc (builtin_document): New builtin function.
	(builtin_help): Make it work.

	* lex.l: More rules for gathering text.  These are still not quite
	as they should be, but they will work in most cases.  I think the
	flex generated scanner is either going to have to be reworked or
	replaced with a handemade version at some point (probably soon)...

	* tree.cc tree.h: Add tree_word_list and tree_word_list_command
	classes for text functions.

Fri Jul  3 05:13:15 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.16.

	* builtins.h builtins.cc: New files for builtin functions.
	Implement a few simple builtin functions.

	* tree.cc tree.h: Add tree_builtin type for builtin functions.

	* tree.cc tree.h: eval (args...) New virtual function.

Thu Jul  2 01:27:38 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.15.

	* symtab.h, symtab.cc: Allow variables and functions to be tagged
	as read-only or read-write.

Wed Jul  1 15:54:36 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* input.cc and octave.cc: allow input to come from a file.

	* lex.l: to accept `#' as a comment character (allows one to
	use the `#!/bin/octave' style script hack).

	* doc: New directory containing skeleton stuff
	* SERVICE: New file from GCC.
	* BUGS: New file, now produced from doc/bugs.texi.
	* INSTALL: New file, now produced from doc/install.texi.

Sat Jun 27 15:52:37 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.14.

	* Fixed parser to eliminate reduce/reduce conflicts.

	* Fixed parser to recognize assignment to multiple identifiers
	(e.g., [E,V] = eig (A); ).

	* Quickie implementation of indexed array evaluation.  Works for
	scalar indices, but not range/array indices.

Fri Jun 26 04:23:12 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.12.

	* Hooks added for indexed array evaluation and assignment.
	* Colon expression implementation improved.
	* Implementation of for command eval() improved.

Thu Jun 25 00:28:12 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.11.

	* Colon expressions added.
	* For command added, but the implementation needs work.

Wed Jun 24 15:09:36 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.10.

	* Cheesy signal handler added to catch interrupts.

	* Matrix input works, even for nested matrices.  Some error
	checking is done while the matrix is evaluated to ensure that
	the number of rows and columns match up.

Mon Jun 22 00:21:49 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.9.

	* Command line matrix input partially implemented.  It's not yet
	possible to enter nested matrices, but it is possible to enter
	simple matrices (e.g. [1,2;a,b+c], where a, b, and c are scalars.

	* Version 0.8.

	* If commands added.

	* Version 0.7.

	* Command chains added.
	* Boolean operations added, tested for scalars.
	* While loop added, tested for simple commands.

Fri Jun 19 05:50:44 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.6.

	At this early stage, while a lot of changes are being made very
	quickly, ChangeLog entries will probably just list features added.

	* Variable assignment works for scalars.
	* Simple scalar expressions work.

Thu Jun 18 06:44:24 1992  John W. Eaton  (jwe@schoch.che.utexas.edu)

	* Version 0.5.

	* src/version.h: For all the pre-alpha distributions, count
	versions as 0.1, etc. instead of 0.01.

	* Makefile: (dist) Automatically update version_string in
	src/version.h.

	* symtab.h, symbtab.cc: New files for symbol tables.

	* tree.h, tree.cc: New files for parse trees.

	* Lots of work unrecorded here.  Octave is now self-contained, the
	tree routines are being redesigned, etc.

Fri Mar 20 17:03:16 1992  John W. Eaton  (jwe@andy.che.utexas.edu)

	* Version 0.02.  Octave understands some simple matrix
	expressions, but it is not yet possible for matrix elements to
	be constructed from expressions.

Thu Mar 19 06:13:39 1992  John W. Eaton  (jwe@andy.che.utexas.edu)

	* Version 0.01.  Octave understands simple scalar expressions.
	Hey, Hey!  It is not yet self contained -- I'm still linking to
	the old libraries in /usr/local/c++-classes, and this isn't likely
	to change for a while.  (Other things are much more important than
	making the distribution work on other machines.  Sorry...)

Fri Feb 21 05:06:38 1992  John W. Eaton  (jwe@andy.che.utexas.edu)

	* Version 0.00.  This includes the basic directory structure,
	makefiles, and a lot of the old Fortran source, including a way to
	make a libcruft.a.  Octave compiles and accepts input (with
	history and editing) but doesn't do much else.

Wed Feb 19 06:20:44 1992  John W. Eaton  (jwe@andy.che.utexas.edu)

	* ChangeLog: New file.
