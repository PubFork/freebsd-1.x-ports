@c Copyright (C) 1992 John W. Eaton
@c This is part of the Octave manual.
@c For copying conditions, see the file gpl.texi.

@node Plotting, Input and Output, Statistics, Top
@chapter Plotting

@findex gplot
@findex gsplot

All of Octave's plotting functions use gnuplot to handle the actual
graphics.  There are two primitive functions, @code{gplot} and
@code{gsplot}, that behave almost exactly like the corresponding
@code{gnuplot} functions @code{plot} and @samp{splot} functions.  A
number of other higher level plotting functions, patterned after the
graphics functions found in @sc{matlab} version 3.5, are also available.
These higher leverl functions are all implemented in terms of the two
primitive plotting functions.

@menu
* Two-Dimensional Plotting::    
* Three-Dimensional Plotting::  
* Miscellaneous Plotting Functions::  
@end menu

@node Two-Dimensional Plotting, Three-Dimensional Plotting, Plotting, Plotting
@section Two-Dimensional Plotting

The syntax for Octave's primitive two-dimensional plotting function,
@code{gplot}, is

@example
gplot @var{ranges} @var{expression} @var{using} @var{title} @var{style}
@end example

@noindent
where the @var{ranges}, @var{using}, @var{title}, and @var{style}
arguments are optional, and the @var{using}, @var{title} and @var{style}
qualifiers may appear in any order after the expression.  You may plot
multiple expressions with a single command by separating them with
commas.  Each expression may have its own set of qualifiers.

The optional item @var{ranges} has the syntax

@example
[ x_lo : x_up ] [ y_lo : y_up ]
@end example

@noindent
and may be used to specify the ranges for the axes of the plot,
independent of the actual range of the data.  The range for the y axes
and any of the individual limits may be omitted.  A range @code{[:]}
indicates that the default limits should be used.  This normally means
that a range just large enough to include all the data points will be
used.

The expression to be plotted must not contain any literal matrices
(e.g. @code{[ 1, 2; 3, 4 ]}) since it is nearly impossible to
distinguish a plot range from a matrix of data.

See the help for gnuplot for a description of the syntax for the
optional items.

By default, the @code{gplot} command plots the second column of a matrix
versus the first.  If the matrix only has one column, it is taken as a
vector of y-coordinates and the x-coordinate is taken as the element
index, starting with zero.  If there are more than two columns, you can
choose which columns to plot with the @var{using} qualifier.

For example,

@example
gplot rand (100,1) with linespoints
@end example

@noindent
will plot 100 random values and connect them with lines.  When
@code{gplot} is used to plot a column vector, the indices of the
elements are taken as x values.

Here is another example that demonstrates the use of the @var{using}
qualifier.  Given the data

@example
x = (-10:0.1:10)';
data = [x, sin(x), cos(x)];
@end example

@noindent
the command

@example
gplot [-11:11] [-1.1:1.1] data with lines, data using 1:3 with impulses
@end example

@noindent
will plot two lines.  The first line is generated by the command
@code{data with lines}, and is a graph of the sine function over the
range -10 to 10.  The data is taken from the first two columns of the
matrix because columns to plot were not specified with the @var{using}
qualifier.

The clause @code{using 1:3} in the second part of this plot command
specifies that the first and third columns of the matrix @code{data}
should be taken as the values to plot.

In this example, the ranges have been explicitly specified to be a bit
larger than the actual range of the data so that the curves do not touch
the border of the plot.

In addition to the basic plotting commands, the whole range of
@code{set} and @code{show} commands from @code{gnuplot} are available,
as is @code{replot}.  For example, 

@example
set term tek40
set title "sine with lines and cosine with impulses"
replot
show title
@end example

The @sc{matlab}-style two-dimensional plotting commands are:

@ftable @code
@cindex plotting
@cindex graphics
@item plot (@var{x}, @var{y})
This function produces two-dimensional plots.

If the first argument is a vector and the second is a matrix, the
the vector is plotted versus the columns (or rows) of the matrix.
(using whichever combination matches, with columns tried first.)

If the first argument is a matrix and the second is a vector, the
the columns (or rows) of the matrix are plotted versus the vector.
(using whichever combination matches, with columns tried first.)

If both arguments are vectors, the elements of @var{y} are plotted versus
the elements of @var{x}.

If both arguments are matrices, the columns of y are plotted versus the
columns of @var{x}.  In this case, both matrices must have the same
number of rows and columns and no attempt is made to transpose the
arguments to make the number of rows match.

If both arguments are scalars, a single point is plotted.

If only one argument is given, it is taken as the set of y
coordinates and the @var{x} coordinates are taken to be the indices of
the elements, starting with 1.

@c XXX FIXME XXX -- add info about what to do to get plots on remote X
@c terminals.  People often forget how to properly set DISPLAY and run
@c xhost.

@c XXX FIXME XXX -- add info about getting paper copies of plots.

@item loglog (@var{x}, @var{y})
Make a two-dimensional plot of @var{y} versus @var{x} using log scales
for both axes.

@item semilogx (@var{x}, @var{y})
Make a two-dimensional plot of @var{y} versus @var{x} using a log scale
for the @var{x} axis. 

@item semilogy (@var{x}, @var{y})
Make a two-dimensional plot of @var{y} versus @var{x} using a log scale
for the @var{y} axis. 

@item contour (@var{z}, @var{n}, @var{x}, @var{y})

@item polar (@var{theta}, @var{rho})
Make a two-dimensional plot given polar the coordinates @var{theta} and
@var{rho}.
@end ftable

@node Three-Dimensional Plotting, Miscellaneous Plotting Functions, Two-Dimensional Plotting, Plotting
@section Three-Dimensional Plotting

The syntax for Octave's primitive three-dimensional plotting function,
@code{gsplot}, is

@example
gsplot @var{ranges} @var{expression} @var{using} @var{title} @var{style}
@end example

@noindent
where the @var{ranges}, @var{using}, @var{title}, and @var{style}
arguments are optional, and the @var{using}, @var{title} and @var{style}
qualifiers may appear in any order after the expression.  You may plot
multiple expressions with a single command by separating them with
commas.  Each expression may have its own set of qualifiers.

The optional item @var{ranges} has the syntax

@example
[ x_lo : x_up ] [ y_lo : y_up ] [ z_lo : z_up ]
@end example

@noindent
and may be used to specify the ranges for the axes of the plot,
independent of the actual range of the data.  The range for the y and z
axes and any of the individual limits may be omitted.  A range
@code{[:]} indicates that the default limits should be used.  This
normally means that a range just large enough to include all the data
points will be used.

The expression to be plotted must not contain any literal matrices (e.g.
@code{[ 1, 2; 3, 4 ]}) since it is nearly impossible to distinguish a
plot range from a matrix of data.

See the help for gnuplot for a description of the syntax for the
optional items.

By default, the @code{gsplot} command plots each column of the
expression as the z value, using the row index as the x value, and the
column index as the y value.  The indices are counted from zero, not
one.  For example,

@example
gsplot rand (5, 2)
@end example

@noindent
will plot a random surface, with the x and y values taken from the row
and column indices of the matrix.

If parametric plotting mode is set (using the command
@samp{set parametric}, then @code{gsplot} takes the columns of the
matrix three at a time as the x, y and z values that define a line in
three space.  Any extra columns are ignored, and the x and y values are
expected to be sorted.  For example, with @samp{parametric} set, it
makes sense to plot a matrix like
@iftex
@tex
$$ \left[\matrix{
1 & 1 & 3 & 2 & 1 & 6 & 3 & 1 & 9 \cr
1 & 2 & 2 & 2 & 2 & 5 & 3 & 2 & 8 \cr
1 & 3 & 1 & 2 & 3 & 4 & 3 & 3 & 7 \cr
}\right] $$
@end tex
@end iftex
@ifinfo
@example
1 1 3 2 1 6 3 1 9
1 2 2 2 2 5 3 2 8
1 3 1 2 3 4 3 3 7
@end example
@end ifinfo

@noindent
but not @code{rand (5, 30)}.

The @sc{matlab}-style three-dimensional plotting commands are:

@ftable @code
@item mesh (@var{x}, @var{y}, @var{z})
Plot a mesh given matrices @code{x}, and @var{y} from @code{meshdom} and
a matrix @var{z} corresponding to the @var{x} and @var{y} coordinates of
the mesh.

@item meshdom (@var{x}, @var{y})
Given vectors of @var{x} and @var{y} coordinates, return two matrices
corresponding to the @var{x} and @var{y} coordinates of the mesh.

See the file @file{sombrero.m} for an example of using @code{mesh} and
@code{meshdom}.
@end ftable

@node Miscellaneous Plotting Functions,  , Three-Dimensional Plotting, Plotting
@section Miscellaneous Plotting Functions

@ftable @code
@item bar (@var{x}, @var{y})
Given two vectors of x-y data, @code{bar} produces a bar graph.

If only one argument is given, it is taken as a vector of y-values
and the x coordinates are taken to be the indices of the elements.

If two output arguments are specified, the data are generated but
not plotted.  For example,

@example
bar (x, y);
@end example

@noindent
and

@example
[xb, yb] = bar (x, y);
plot (xb, yb);
@end example

@noindent
are equivalent.

@item grid
For two-dimensional plotting, force the display of a grid on the plot.

@item replot
Redisplay the current plot.  This is useful if you have changed
something about the plot, such as the title or axis labels.

@item set
@itemx show
Set and show @code{gnuplot} parameters.  For more information about the
set and show commands, see the @code{gnuplot} user's guide (also
available on line if you run @code{gnuplot} directly, instead of from
Octave)

@item stairs (@var{x}, @var{y})
Given two vectors of x-y data, bar produces a `stairstep' plot.

If only one argument is given, it is taken as a vector of y-values
and the x coordinates are taken to be the indices of the elements.

If two output arguments are specified, the data are generated but
not plotted.  For example,

@example
stairs (x, y);
@end example

@noindent
and

@example
[xs, ys] = stairs (x, y);
plot (xs, ys);
@end example

@noindent
are equivalent.

@item title (@var{string})
Specify a title for the plot.  If you already have a plot displayed, use
the command @code{replot} to redisplay it with the new title.

@item xlabel (@var{string})
@itemx ylabel (@var{string})
Specify x and y axis labels for the plot.  If you already have a plot
displayed, use the command @code{replot} to redisplay it with the new
labels.

@item sombrero (@var{n})
Display a classic three-dimensional mesh plot.  The parameter @var{n}
allows you to increase the resolution.

@item closeplot
Close stream to the gnuplot subprocess.  If you are using X11, this will
close the plot window.

@item purge_tmp_files
Delete the temporary files created by the plotting commands.

Octave creates temporary data files for gnuplot and then sends commands
to gnuplot through a pipe.  Octave will delete the temporary files on
exit, but if you are doing a lot of plotting you may want to clean up in
the middle of a session.
@end ftable
