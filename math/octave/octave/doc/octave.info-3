This is Info file octave.info, produced by Makeinfo-1.52 from the input
file octave.texi.

   Copyright (C) 1993 John W. Eaton.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions.


File: octave.info,  Node: Bug Reporting,  Next: Sending Patches,  Prev: Bug Lists,  Up: Trouble

How to Report Bugs
==================

   The fundamental principle of reporting bugs usefully is this:
*report all the facts*.  If you are not sure whether to state a fact or
leave it out, state it!

   Often people omit facts because they think they know what causes the
problem and they conclude that some details don't matter.  Thus, you
might assume that the name of the variable you use in an example does
not matter.  Well, probably it doesn't, but one cannot be sure.
Perhaps the bug is a stray memory reference which happens to fetch from
the location where that name is stored in memory; perhaps, if the name
were different, the contents of that location would fool the
interpreter into doing the right thing despite the bug.  Play it safe
and give a specific, complete example.  That is the easiest thing for
you to do, and the most helpful.

   Keep in mind that the purpose of a bug report is to enable someone to
fix the bug if it is not known.  It isn't very important what happens if
the bug is already known.  Therefore, always write your bug reports on
the assumption that the bug is not known.

   Sometimes people give a few sketchy facts and ask, "Does this ring a
bell?"  This cannot help us fix a bug, so it is basically useless.  We
respond by asking for enough details to enable us to investigate.  You
might as well expedite matters by sending them to begin with.

   Try to make your bug report self-contained.  If we have to ask you
for more information, it is best if you include all the previous
information in your response, as well as the information that was
missing.

   To enable someone to investigate the bug, you should include all
these things:

   * The version of Octave.  You can get this by noting the version
     number that is printed when Octave starts, or running it with the
     `-v' option.

     Without this, we won't know whether there is any point in looking
     for the bug in the current version of Octave.

   * A complete input file that will reproduce the bug.

     A single statement may not be enough of an example--the bug might
     depend on other details that are missing from the single statement
     where the error finally occurs.

     Without a real example one can execute, all anyone can do about
     your bug report is wish you luck.  It would be futile to try to
     guess how to provoke the bug.

   * The command arguments you gave Octave to execute that example and
     observe the bug.  To guarantee you won't omit something important,
     list all the options.

     If we were to try to guess the arguments, we would probably guess
     wrong and then we would not encounter the bug.

   * The type of machine you are using, and the operating system name
     and version number.

   * The command-line arguments you gave to the `configure' command when
     you installed the interpreter.

   * A complete list of any modifications you have made to the
     interpreter source.  (We don't promise to investigate the bug
     unless it happens in an unmodified version of Octave.  But if
     you've made modifications and don't tell us, then you are sending
     us on a wild goose chase.)

     Be precise about these changes--show a context diff for them.

     Adding files of your own (such as a machine description for a
     machine we don't support) is a modification of the interpreter
     source.

   * Details of any other deviations from the standard procedure for
     installing Octave.

   * A description of what behavior you observe that you believe is
     incorrect.  For example, "The interpreter gets a fatal signal,"
     or, "The output produced at line 208 is incorrect."

     Of course, if the bug is that the interpreter gets a fatal signal,
     then one can't miss it.  But if the bug is incorrect output, the
     maintainer might not notice unless it is glaringly wrong.  None of
     us has time to study all the code from a 50-line program just on
     the chance that one instruction might be wrong.  We need `you' to
     do this part!

     Even if the problem you experience is a fatal signal, you should
     still say so explicitly.  Suppose something strange is going on,
     such as, your copy of the interpreter is out of synch, or you have
     encountered a bug in the C library on your system.  Your copy
     might crash and the copy here would not.  If you said to expect a
     crash, then when the interpreter here fails to crash, we would
     know that the bug was not happening.  If you don't say to expect a
     crash, then we would not know whether the bug was happening.  We
     would not be able to draw any conclusion from our observations.

     Often the observed symptom is incorrect output when your program
     is run.  Sad to say, this is not enough information unless the
     program is short and simple.  None of us has time to study a large
     program to figure out how it would work if compiled correctly,
     much less which line of it was interpreted incorrectly.  So you
     will have to do that.  Tell us which source line it is, and what
     incorrect result happens when that line is executed.  A person who
     understands the program can find this as easily as finding a bug
     in the program itself.

   * If you wish to suggest changes to the Octave source, send them as
     context diffs.  If you even discuss something in the Octave source,
     refer to it by context, not by line number.

     The line numbers in the development sources don't match those in
     your sources.  Your line numbers would convey no useful
     information to the maintainers.

   * Additional information from a debugger might enable someone to
     find a problem on a machine which he does not have available.
     However, you need to think when you collect this information if
     you want it to have any chance of being useful.

   Here are some things that are not necessary:

   * A description of the envelope of the bug.

     Often people who encounter a bug spend a lot of time investigating
     which changes to the input file will make the bug go away and
     which changes will not affect it.

     This is often time consuming and not very useful, because the way
     we will find the bug is by running a single example under the
     debugger with breakpoints, not by pure deduction from a series of
     examples.  You might as well save your time for something else.

     Of course, if you can find a simpler example to report *instead* of
     the original one, that is a convenience.  Errors in the output
     will be easier to spot, running under the debugger will take less
     time, etc.  Most Octave bugs involve just one function, so the
     most straightforward way to simplify an example is to delete all
     the function definitions except the one where the bug occurs.
     Those earlier in the file may be replaced by external declarations
     if the crucial function depends on them.

     However, simplification is not vital; if you don't want to do
     this, report the bug anyway and send the entire test case you used.

   * A patch for the bug.

     A patch for the bug is useful if it is a good one.  But don't omit
     the necessary information, such as the test case, on the
     assumption that a patch is all we need.  We might see problems
     with your patch and decide to fix the problem another way, or we
     might not understand it at all.

     Sometimes with a program as complicated as Octave it is very hard
     to construct an example that will make the program follow a
     certain path through the code.  If you don't send the example, we
     won't be able to construct one, so we won't be able to verify that
     the bug is fixed.

     And if we can't understand what bug you are trying to fix, or why
     your patch should be an improvement, we won't install it.  A test
     case will help us to understand.

   * A guess about what the bug is or what it depends on.

     Such guesses are usually wrong.  Even I can't guess right about
     such things without first using the debugger to find the facts.


File: octave.info,  Node: Sending Patches,  Next: Service,  Prev: Bug Reporting,  Up: Trouble

Sending Patches for Octave
==========================

   If you would like to write bug fixes or improvements for Octave,
that is very helpful.  When you send your changes, please follow these
guidelines to avoid causing extra work for us in studying the patches.

   If you don't follow these guidelines, your information might still be
useful, but using it will take extra work.  Maintaining Octave is a lot
of work in the best of circumstances, and we can't keep up unless you do
your best to help.

   * Send an explanation with your changes of what problem they fix or
     what improvement they bring about.  For a bug fix, just include a
     copy of the bug report, and explain why the change fixes the bug.

     (Referring to a bug report is not as good as including it, because
     then we will have to look it up, and we have probably already
     deleted it if we've already fixed the bug.)

   * Always include a proper bug report for the problem you think you
     have fixed.  We need to convince ourselves that the change is
     right before installing it.  Even if it is right, we might have
     trouble judging it if we don't have a way to reproduce the problem.

   * Include all the comments that are appropriate to help people
     reading the source in the future understand why this change was
     needed.

   * Don't mix together changes made for different reasons.  Send them
     *individually*.

     If you make two changes for separate reasons, then we might not
     want to install them both.  We might want to install just one.  If
     you send them all jumbled together in a single set of diffs, we
     have to do extra work to disentangle them--to figure out which
     parts of the change serve which purpose.  If we don't have time
     for this, we might have to ignore your changes entirely.

     If you send each change as soon as you have written it, with its
     own explanation, then the two changes never get tangled up, and we
     can consider each one properly without any extra work to
     disentangle them.

     Ideally, each change you send should be impossible to subdivide
     into parts that we might want to consider separately, because each
     of its parts gets its motivation from the other parts.

   * Send each change as soon as that change is finished.  Sometimes
     people think they are helping us by accumulating many changes to
     send them all together.  As explained above, this is absolutely
     the worst thing you could do.

     Since you should send each change separately, you might as well
     send it right away.  That gives us the option of installing it
     immediately if it is important.

   * Use `diff -c' to make your diffs.  Diffs without context are hard
     for us to install reliably.  More than that, they make it hard for
     us to study the diffs to decide whether we want to install them.
     Unidiff format is better than contextless diffs, but not as easy
     to read as `-c' format.

     If you have GNU diff, use `diff -cp', which shows the name of the
     function that each change occurs in.

   * Write the change log entries for your changes.  We get lots of
     changes, and we don't have time to do all the change log writing
     ourselves.

     Read the `ChangeLog' file to see what sorts of information to put
     in, and to learn the style that we use.  The purpose of the change
     log is to show people where to find what was changed.  So you need
     to be specific about what functions you changed; in large
     functions, it's often helpful to indicate where within the
     function the change was.

     On the other hand, once you have shown people where to find the
     change, you need not explain its purpose. Thus, if you add a new
     function, all you need to say about it is that it is new.  If you
     feel that the purpose needs explaining, it probably does--but the
     explanation will be much more useful if you put it in comments in
     the code.

     If you would like your name to appear in the header line for who
     made the change, send us the header line.

   * When you write the fix, keep in mind that I can't install a change
     that would break other systems.

     People often suggest fixing a problem by changing
     machine-independent files to do something special that a
     particular system needs.  Sometimes it is totally obvious that
     such changes would break Octave for almost all users.  We can't
     possibly make a change like that.  At best it might tell us how to
     write another patch that would solve the problem acceptably.

     Sometimes people send fixes that *might* be an improvement in
     general--but it is hard to be sure of this.  It's hard to install
     such changes because we have to study them very carefully.  Of
     course, a good explanation of the reasoning by which you concluded
     the change was correct can help convince us.

     Please help us keep up with the workload by designing the patch in
     a form that is good to install.


File: octave.info,  Node: Service,  Prev: Sending Patches,  Up: Trouble

How To Get Help with Octave
===========================

   If you need help installing, using or changing Octave, the mailing
list

     help-octave@che.utexas.edu

   exists for the discussion of Octave matters related to using,
installing, and porting Octave.  If you would like to join the
discussion, please send a short note to

     help-octave-request@che.utexas.edu
                 ^^^^^^^

   *Please do not* send requests to be added or removed from the the
mailing list, or other administrative trivia to the list itself.


File: octave.info,  Node: Concept Index,  Next: Variable Index,  Prev: Trouble,  Up: Top

Concept Index
*************

* Menu:

* acknowledgements:                     Acknowledgements.
* addition:                             Arithmetic Ops.
* and operator:                         Boolean Expressions.
* answers, incorrect:                   Bug Criteria.
* answers, incorrect:                   Bug Reporting.
* arguments in function call:           Calling Functions.
* arithmetic operators:                 Arithmetic Ops.
* assignment expressions:               Assignment Ops.
* assignment operators:                 Assignment Ops.
* boolean expressions:                  Boolean Expressions.
* boolean operators:                    Boolean Expressions.
* break command:                        Jump Statements.
* bug criteria:                         Bug Criteria.
* bug report mailing lists:             Bug Lists.
* bugs:                                 Reporting Bugs.
* bugs, guessing causes:                Bug Reporting.
* bugs, investigating:                  Bug Reporting.
* bugs, known:                          Trouble.
* bugs, reporting:                      Bug Reporting.
* bugs, reporting:                      Bug Lists.
* built-in functions:                   Built-in Functions.
* built-in variables:                   Built-in Variables.
* character strings:                    Constant Expressions.
* command options:                      Invoking Octave.
* comparison expressions:               Comparison Ops.
* complex-conjugate transpose:          Arithmetic Ops.
* continue command:                     Jump Statements.
* contributors:                         Contributors.
* core dump:                            Bug Criteria.
* diffs, submitting:                    Sending Patches.
* division:                             Arithmetic Ops.
* equality operator:                    Comparison Ops.
* equality, tests for:                  Comparison Ops.
* erroneous messages:                   Bug Criteria.
* erroneous results:                    Bug Reporting.
* erroneous results:                    Bug Criteria.
* error messages, incorrect:            Bug Criteria.
* escape sequence notation:             Constant Expressions.
* exponentiation:                       Arithmetic Ops.
* expression, range:                    Ranges.
* expressions:                          Expressions.
* expressions, assignment:              Assignment Ops.
* expressions, boolean:                 Boolean Expressions.
* expressions, comparison:              Comparison Ops.
* expressions, logical:                 Boolean Expressions.
* fatal signal:                         Bug Criteria.
* for command:                          Iteration Statements.
* function command:                     Defining Functions.
* Functions:                            Built-in Functions.
* functions, built-in:                  Built-in Functions.
* getting started:                      Getting Started.
* graphics:                             Built-in Functions.
* greater than operator:                Comparison Ops.
* help, where to find:                  Service.
* Hermitian operator:                   Arithmetic Ops.
* if command:                           Selection Statements.
* improving Octave:                     Bug Criteria.
* improving Octave:                     Sending Patches.
* incorrect error messages:             Bug Criteria.
* incorrect output:                     Bug Criteria.
* incorrect output:                     Bug Reporting.
* incorrect results:                    Bug Criteria.
* incorrect results:                    Bug Reporting.
* installation trouble:                 Trouble.
* installing Octave:                    Installation.
* interaction, readline:                Readline Interaction.
* introduction:                         Introduction.
* invalid input:                        Bug Criteria.
* keywords:                             Keywords.
* known causes of trouble:              Trouble.
* less than operator:                   Comparison Ops.
* logical expressions:                  Boolean Expressions.
* logical operators:                    Boolean Expressions.
* lvalue:                               Assignment Ops.
* matrices:                             Matrices.
* matrix multiplication:                Arithmetic Ops.
* multiplication:                       Arithmetic Ops.
* negation:                             Arithmetic Ops.
* not operator:                         Boolean Expressions.
* numeric constant:                     Constant Expressions.
* numeric value:                        Constant Expressions.
* Octave command options:               Invoking Octave.
* operators, arithmetic:                Arithmetic Ops.
* operators, assignment:                Assignment Ops.
* operators, boolean:                   Boolean Expressions.
* operators, logical:                   Boolean Expressions.
* operators, relational:                Comparison Ops.
* options, Octave command:              Invoking Octave.
* or operator:                          Boolean Expressions.
* patches, submitting:                  Sending Patches.
* plotting:                             Built-in Functions.
* quotient:                             Arithmetic Ops.
* range expressions:                    Ranges.
* relational operators:                 Comparison Ops.
* reporting bugs:                       Reporting Bugs.
* reporting bugs:                       Bug Lists.
* results, incorrect:                   Bug Reporting.
* results, incorrect:                   Bug Criteria.
* side effect:                          Assignment Ops.
* statements:                           Statements.
* strings:                              Constant Expressions.
* submitting diffs:                     Sending Patches.
* submitting patches:                   Sending Patches.
* subtraction:                          Arithmetic Ops.
* tests for equality:                   Comparison Ops.
* transpose:                            Arithmetic Ops.
* transpose, complex-conjugate:         Arithmetic Ops.
* troubleshooting:                      Trouble.
* unary minus:                          Arithmetic Ops.
* undefined behavior:                   Bug Criteria.
* undefined function value:             Bug Criteria.
* user-defined variables:               Variables.
* Variables:                            Built-in Variables.
* variables, built-in:                  Built-in Variables.
* variables, user-defined:              Variables.
* while command:                        Iteration Statements.
* wrong answers:                        Bug Reporting.
* wrong answers:                        Bug Criteria.


File: octave.info,  Node: Variable Index,  Next: Function Index,  Prev: Concept Index,  Up: Top

Variable Index
**************

* Menu:

* ans:                                  Built-in Variables.
* do_fortran_indexing:                  Built-in Variables.
* editing-mode:                         Readline Init Syntax.
* empty_list_elements_ok:               Built-in Variables.
* eps:                                  Built-in Variables.
* gnuplot_binary:                       Built-in Variables.
* horizontal-scroll-mode:               Readline Init Syntax.
* I:                                    Built-in Variables.
* i:                                    Built-in Variables.
* implicit_str_to_num_ok:               Built-in Variables.
* inf:                                  Built-in Variables.
* Inf:                                  Built-in Variables.
* j:                                    Built-in Variables.
* J:                                    Built-in Variables.
* LOADPATH:                             Built-in Variables.
* mark-modified-lines:                  Readline Init Syntax.
* NaN:                                  Built-in Variables.
* nan:                                  Built-in Variables.
* ok_to_lose_imaginary_part:            Built-in Variables.
* output_max_field_width:               Built-in Variables.
* output_precision:                     Built-in Variables.
* PAGER:                                Built-in Variables.
* page_screen_output:                   Built-in Variables.
* pi:                                   Built-in Variables.
* prefer-visible-bell:                  Readline Init Syntax.
* prefer_column_vectors:                Built-in Variables.
* prefer_zero_one_indexing:             Built-in Variables.
* print_answer_id_name:                 Built-in Variables.
* print_empty_dimensions:               Built-in Variables.
* propagate_empty_matrices:             Built-in Variables.
* PS1:                                  Built-in Variables.
* PS2:                                  Built-in Variables.
* PWD:                                  Built-in Variables.
* resize_on_range_error:                Built-in Variables.
* return_last_computed_value:           Built-in Variables.
* SEEK_CUR:                             Built-in Variables.
* SEEK_END:                             Built-in Variables.
* SEEK_SET:                             Built-in Variables.
* silent_functions:                     Built-in Variables.
* split_long_rows:                      Built-in Variables.
* stderr:                               Built-in Variables.
* stdin:                                Built-in Variables.
* stdout:                               Built-in Variables.
* treat_neg_dim_as_zero:                Built-in Variables.
* warn_comma_in_global_decl:            Built-in Variables.


File: octave.info,  Node: Function Index,  Prev: Variable Index,  Up: Top

Function Index
**************

* Menu:

* abort (C-g):                          Miscellaneous Commands.
* abs:                                  Built-in Functions.
* accept-line (Newline, Return):        Commands For History.
* acos:                                 Built-in Functions.
* acosh:                                Built-in Functions.
* all:                                  Built-in Functions.
* angle:                                Built-in Functions.
* any:                                  Built-in Functions.
* arg:                                  Built-in Functions.
* asin:                                 Built-in Functions.
* asinh:                                Built-in Functions.
* atan:                                 Built-in Functions.
* atanh:                                Built-in Functions.
* backward-char (C-b):                  Commands For Moving.
* backward-delete-char (Rubout):        Commands For Text.
* backward-kill-line ():                Commands For Killing.
* backward-kill-word (M-DEL):           Commands For Killing.
* backward-word (M-b):                  Commands For Moving.
* bar:                                  Built-in Functions.
* beginning-of-history (M-<):           Commands For History.
* beginning-of-line (C-a):              Commands For Moving.
* capitalize-word (M-c):                Commands For Text.
* casesen:                              Built-in Functions.
* cd:                                   Built-in Functions.
* ceil:                                 Built-in Functions.
* clc:                                  Built-in Functions.
* clear:                                Built-in Functions.
* clear-screen (C-l):                   Commands For Moving.
* clock:                                Built-in Functions.
* closeplot:                            Built-in Functions.
* colloc:                               Built-in Functions.
* columns:                              Built-in Functions.
* complete (TAB):                       Commands For Completion.
* computer:                             Built-in Functions.
* cond:                                 Built-in Functions.
* conj:                                 Built-in Functions.
* contour:                              Built-in Functions.
* cos:                                  Built-in Functions.
* cosh:                                 Built-in Functions.
* cumprod:                              Built-in Functions.
* cumsum:                               Built-in Functions.
* dassl:                                Built-in Functions.
* date:                                 Built-in Functions.
* delete-char (C-d):                    Commands For Text.
* det:                                  Built-in Functions.
* diag:                                 Built-in Functions.
* digit-argument (M-0, M-1, ... M-):    Numeric Arguments.
* dir:                                  Built-in Functions.
* disp:                                 Built-in Functions.
* do-uppercase-version (M-a, M-b, ...): Miscellaneous Commands.
* document:                             Built-in Functions.
* downcase-word (M-l):                  Commands For Text.
* edit:                                 Built-in Functions.
* eig:                                  Built-in Functions.
* end-of-history (M->):                 Commands For History.
* end-of-line (C-e):                    Commands For Moving.
* error:                                Built-in Functions.
* eval:                                 Built-in Functions.
* exist:                                Built-in Functions.
* exit:                                 Built-in Functions.
* exp:                                  Built-in Functions.
* expm:                                 Built-in Functions.
* eye:                                  Built-in Functions.
* fclose:                               Built-in Functions.
* feval:                                Built-in Functions.
* fflush:                               Built-in Functions.
* fft:                                  Built-in Functions.
* fgets:                                Built-in Functions.
* find:                                 Built-in Functions.
* finite:                               Built-in Functions.
* fix:                                  Built-in Functions.
* fliplr:                               Built-in Functions.
* flipud:                               Built-in Functions.
* floor:                                Built-in Functions.
* flops:                                Built-in Functions.
* fopen:                                Built-in Functions.
* format:                               Built-in Functions.
* forward-char (C-f):                   Commands For Moving.
* forward-search-history (C-s):         Commands For History.
* forward-word (M-f):                   Commands For Moving.
* fprintf:                              Built-in Functions.
* freport:                              Built-in Functions.
* frewind:                              Built-in Functions.
* fscanf:                               Built-in Functions.
* fseek:                                Built-in Functions.
* fsolve:                               Built-in Functions.
* fsqp:                                 Built-in Functions.
* ftell:                                Built-in Functions.
* getenv:                               Built-in Functions.
* grid:                                 Built-in Functions.
* hadamard:                             Built-in Functions.
* hankel:                               Built-in Functions.
* help:                                 Built-in Functions.
* hess:                                 Built-in Functions.
* hilb:                                 Built-in Functions.
* history:                              Built-in Functions.
* home:                                 Built-in Functions.
* ifft:                                 Built-in Functions.
* imag:                                 Built-in Functions.
* input:                                Built-in Functions.
* int2str:                              Built-in Functions.
* inv:                                  Built-in Functions.
* inverse:                              Built-in Functions.
* invhilb:                              Built-in Functions.
* isempty:                              Built-in Functions.
* isinf:                                Built-in Functions.
* isnan:                                Built-in Functions.
* isstr:                                Built-in Functions.
* is_matrix:                            Built-in Functions.
* is_scalar:                            Built-in Functions.
* is_vector:                            Built-in Functions.
* keyboard:                             Built-in Functions.
* kill-line (C-k):                      Commands For Killing.
* kill-word (M-d):                      Commands For Killing.
* length:                               Built-in Functions.
* linspace:                             Built-in Functions.
* load:                                 Built-in Functions.
* log:                                  Built-in Functions.
* log10:                                Built-in Functions.
* loglog:                               Built-in Functions.
* logm:                                 Built-in Functions.
* logspace:                             Built-in Functions.
* ls:                                   Built-in Functions.
* lsode:                                Built-in Functions.
* lu:                                   Built-in Functions.
* max:                                  Built-in Functions.
* mean:                                 Built-in Functions.
* median:                               Built-in Functions.
* menu:                                 Built-in Functions.
* mesh:                                 Built-in Functions.
* meshdom:                              Built-in Functions.
* min:                                  Built-in Functions.
* next-history (C-n):                   Commands For History.
* norm:                                 Built-in Functions.
* npsol:                                Built-in Functions.
* num2str:                              Built-in Functions.
* ones:                                 Built-in Functions.
* pause:                                Built-in Functions.
* plot:                                 Built-in Functions.
* polar:                                Built-in Functions.
* possible-completions (M-?):           Commands For Completion.
* prefix-meta (ESC):                    Miscellaneous Commands.
* previous-history (C-p):               Commands For History.
* printf:                               Built-in Functions.
* prod:                                 Built-in Functions.
* purge_tmp_files:                      Built-in Functions.
* pwd:                                  Built-in Functions.
* qpsol:                                Built-in Functions.
* qr:                                   Built-in Functions.
* quad:                                 Built-in Functions.
* quit:                                 Built-in Functions.
* quoted-insert (C-q, C-v):             Commands For Text.
* rand:                                 Built-in Functions.
* rank:                                 Built-in Functions.
* re-read-init-file (C-x C-r):          Miscellaneous Commands.
* real:                                 Built-in Functions.
* rem:                                  Built-in Functions.
* replot:                               Built-in Functions.
* reshape:                              Built-in Functions.
* reverse-search-history (C-r):         Commands For History.
* revert-line (M-r):                    Miscellaneous Commands.
* rot90:                                Built-in Functions.
* round:                                Built-in Functions.
* rows:                                 Built-in Functions.
* save:                                 Built-in Functions.
* scanf:                                Built-in Functions.
* schur:                                Built-in Functions.
* self-insert (a, b, A, 1, !, ...):     Commands For Text.
* semilogx:                             Built-in Functions.
* semilogy:                             Built-in Functions.
* set:                                  Built-in Functions.
* shell_cmd:                            Built-in Functions.
* show:                                 Built-in Functions.
* sign:                                 Built-in Functions.
* sin:                                  Built-in Functions.
* sinh:                                 Built-in Functions.
* size:                                 Built-in Functions.
* sombrero:                             Built-in Functions.
* sort:                                 Built-in Functions.
* sprintf:                              Built-in Functions.
* sqrt:                                 Built-in Functions.
* sqrtm:                                Built-in Functions.
* sscanf:                               Built-in Functions.
* stairs:                               Built-in Functions.
* std:                                  Built-in Functions.
* strcmp:                               Built-in Functions.
* sum:                                  Built-in Functions.
* sumsq:                                Built-in Functions.
* svd:                                  Built-in Functions.
* tab-insert (M-TAB):                   Commands For Text.
* tan:                                  Built-in Functions.
* tanh:                                 Built-in Functions.
* texas_lotto:                          Built-in Functions.
* title:                                Built-in Functions.
* toeplitz:                             Built-in Functions.
* trace:                                Built-in Functions.
* transpose-chars (C-t):                Commands For Text.
* transpose-words (M-t):                Commands For Text.
* tril:                                 Built-in Functions.
* triu:                                 Built-in Functions.
* undo (C-_):                           Miscellaneous Commands.
* universal-argument ():                Numeric Arguments.
* unix-line-discard (C-u):              Commands For Killing.
* unix-word-rubout (C-w):               Commands For Killing.
* upcase-word (M-u):                    Commands For Text.
* vander:                               Built-in Functions.
* warranty:                             Built-in Functions.
* who:                                  Built-in Functions.
* xlabel:                               Built-in Functions.
* yank (C-y):                           Commands For Killing.
* yank-pop (M-y):                       Commands For Killing.
* ylabel:                               Built-in Functions.
* zeros:                                Built-in Functions.


