/* A lexical scanner generated by flex */

/* scanner skeleton version:
 * $Header: /a/cvs/386BSD/ports/math/octave/octave/src/lex.cc,v 1.1 1993/08/27 02:48:43 alm Exp $
 */

#define FLEX_SCANNER

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <osfcn.h>

/* use prototypes in function declarations */
#define YY_USE_PROTOS

/* the "const" storage-class-modifier is valid */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#ifdef __STDC__

#ifdef __GNUC__
#include <stddef.h>
void *malloc( size_t );
void free( void* );
#else
#include <stdlib.h>
#endif	/* __GNUC__ */

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */


#ifdef __TURBOC__
#define YY_USE_CONST
#endif


#ifndef YY_USE_CONST
#define const
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
/* we can't get here if it's an ANSI C compiler, or a C++ compiler,
 * so it's got to be a K&R compiler, and therefore there's no standard
 * place from which to include these definitions
 */
char *malloc();
int free();
int read();
#endif


/* amount of stuff to slurp up with each read */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* returned upon end-of-file */
#define YY_END_TOK 0

/* copy whatever the last rule matched to the standard output */

/* cast to (char *) is because for 8-bit chars, yytext is (unsigned char *) */
/* this used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite()
 */
#define ECHO (void) fwrite( (char *) yytext, yyleng, 1, yyout )

/* gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#define YY_INPUT(buf,result,max_size) \
	if ( (result = read( fileno(yyin), (char *) buf, max_size )) < 0 ) \
	    YY_FATAL_ERROR( "read() in flex scanner failed" );
#define YY_NULL 0

/* no semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#define yyterminate() return ( YY_NULL )

/* report a fatal error */

/* The funky do-while is used to turn this macro definition into
 * a single C statement (which needs a semi-colon terminator).
 * This avoids problems with code like:
 *
 * 	if ( something_happens )
 *		YY_FATAL_ERROR( "oops, the something happened" );
 *	else
 *		everything_okay();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the YY_FATAL_ERROR() call.
 */

#define YY_FATAL_ERROR(msg) \
	do \
		{ \
		(void) fputs( msg, stderr ); \
		(void) putc( '\n', stderr ); \
		exit( 1 ); \
		} \
	while ( 0 )

/* default yywrap function - always treat EOF as an EOF */
#define yywrap() 1

/* enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN
 */
#define BEGIN yy_start = 1 + 2 *

/* action number for EOF rule of a given start state */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* special action meaning "start processing a new file" */
#define YY_NEW_FILE \
	do \
		{ \
		yy_init_buffer( yy_current_buffer, yyin ); \
		yy_load_buffer_state(); \
		} \
	while ( 0 )

/* default declaration of generated scanner - a define so the user can
 * easily add parameters
 */
#define YY_DECL int yylex YY_PROTO(( void )) 

/* code executed at the end of each rule */
#define YY_BREAK break;

#define YY_END_OF_BUFFER_CHAR 0

#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (YY_READ_BUF_SIZE * 2) /* size of default input buffer */
#endif

typedef struct yy_buffer_state *YY_BUFFER_STATE;

#define YY_CHAR char
# line 1 "lex.l"
#define INITIAL 0
/* lex.l                                                -*- C -*-

Copyright (C) 1992, 1993 John W. Eaton

This file is part of Octave.

Octave is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2, or (at your option) any
later version.

Octave is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with GNU CC; see the file COPYING.  If not, write to the Free
Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

*/
#define COMMENT 1
#define NEW_MATRIX 2
#define HELP_FCN 3
#define TEXT_FCN 4
#define DQSTRING 5
#define STRING 6
#define MATRIX 7
# line 32 "lex.l"

// Arrange to get input via readline.

#ifdef YY_INPUT
#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
  if ((result = octave_read (buf, max_size)) < 0) \
    YY_FATAL_ERROR ("octave_read () in flex scanner failed");
#endif

// Try to avoid crashing out completely on fatal scanner errors.

#ifdef YY_FATAL_ERROR
#undef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) \
  do \
    { \
      error (msg); \
      jump_to_top_level (); \
    } \
  while (0)
#endif

#include "input.h"

// The type of an END token.  This declaration is repeated in parse.y.
// It must appear before y.tab.h is included.
enum end_tok_type
  {
    simple_end,
    for_end,
    function_end,
    if_end,
    while_end,
  };

// The type of a PLOT token.  This declaration is repeated in parse.y.
// It must appear before y.tab.h is included.
enum plot_tok_type
  {
    two_dee = 2,
    three_dee = 3,
  };

#include "SLStack.h"

#include "variables.h"
#include "symtab.h"
#include "error.h"
#include "utils.h"
#include "tree.h"
#include "y.tab.h"
#include "parse.h"
#include "lex.h"

// Nonzero means we thing we are looking at the beginning of a
// function definition.
static int beginning_of_function = 0;

// Nonzero means we think we are looking at a set command.
static int doing_set = 0;

// GAG.  Stupid kludge so that [[1,2][3,4]] will work.
static do_comma_insert = 0;

// Brace level count.
static int braceflag = 0;

// Return transpose or start a string?
static int quote_is_transpose = 0;

// Nonzero means that we should convert spaces to a comma inside a
// matrix definition.
static int convert_spaces_to_comma = 1;

// Another context hack, this time for the plot command's `using',
// `title', and `with' keywords.
static int cant_be_identifier = 0;

// Is the closest nesting level a square brace or a paren?
//
//  1 -> brace, spaces are important (they can turn into commas)
//  0 -> paren, spaces are not important
//
static SLStack <int> in_brace_or_paren;

static void do_string_escapes (char *s);
static void fixup_column_count (char *s);
static int do_comma_insert_check (void);
static int is_plot_keyword (char *s);
static int is_keyword (char *s);
static char *plot_style_token (char *s);
static symbol_record *lookup_identifier (char *s);
static void grab_help_text (void);
static int match_any (char c, char *s);
static int next_token_is_bin_op (int spc_prev, char *yytext);
static int next_token_is_postfix_unary_op (int spc_prev, char *yytext);
static char *strip_trailing_whitespace (char *s);

#define DO_COMMA_INSERT_CHECK yyless (do_comma_insert_check ())

#define RETURN(token) \
  do \
    { \
      current_input_column += yyleng; \
      quote_is_transpose = 0; \
      cant_be_identifier = 0; \
      convert_spaces_to_comma = 1; \
      return (token); \
    } \
  while (0)

#define BIN_OP_RETURN(token) \
  do \
    { \
      current_input_column += yyleng; \
      quote_is_transpose = 0; \
      cant_be_identifier = 0; \
      convert_spaces_to_comma = 0; \
      return (token); \
    } \
  while (0)

# line 169 "lex.l"

/* done after the current pattern has been matched and before the
 * corresponding action - sets up yytext
 */
#define YY_DO_BEFORE_ACTION \
	yytext = yy_bp; \
	yyleng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* return all but the first 'n' matched characters back to the input stream */
#define yyless(n) \
	do \
		{ \
		/* undo effects of setting up yytext */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext )


struct yy_buffer_state
    {
    FILE *yy_input_file;

    YY_CHAR *yy_ch_buf;		/* input buffer */
    YY_CHAR *yy_buf_pos;	/* current position in input buffer */

    /* size of input buffer in bytes, not including room for EOB characters */
    int yy_buf_size;	

    /* number of characters read into yy_ch_buf, not including EOB characters */
    int yy_n_chars;

    int yy_eof_status;		/* whether we've seen an EOF on this buffer */
#define EOF_NOT_SEEN 0
    /* "pending" happens when the EOF has been seen but there's still
     * some text process
     */
#define EOF_PENDING 1
#define EOF_DONE 2
    };

static YY_BUFFER_STATE yy_current_buffer;

/* we provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state"
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed */
static YY_CHAR yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */



#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

#ifndef YY_USER_INIT
#define YY_USER_INIT
#endif

extern YY_CHAR *yytext;
extern int yyleng;
extern FILE *yyin, *yyout;

YY_CHAR *yytext;
int yyleng;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

#define YY_END_OF_BUFFER 78
typedef int yy_state_type;
static const short int yy_acclist[661] =
    {   0,
       33,   33,16389,16389,    7,    7,   11,   11,   12,   15,
       33,   12,   15,   33,   33,   33,   33,   33,   33,   33,
       78,   76,   77,   33,   76,   77,   38,   77,   60,   76,
       77,   41,   76,   77,    2,   76,   77,    1,   76,   77,
       59,   76,   77,   39,   76,   77,   74,   76,   77,   75,
       76,   77,   67,   76,   77,   64,   76,   77,   71,   76,
       77,   65,   76,   77,   76,   77,   68,   76,   77,   29,
       76,   77,   40,   76,   77,   70,   76,   77,   62,   76,
       77,   73,   76,   77,   63,   76,   77,   36,   76,   77,
    16421,   32,   76,   77,   69,   76,   77,   25,   76,   77,

       72,   76,   77,   58,   76,   77,   61,   76,   77,   77,
    16389,    3, 8197,   77,    6,   77,    7,   77,   11,   77,
       11,   77,    8,   77,   12,   76,   77,   12,   15,   33,
       76,   77,    9,   38,   77,   12,   60,   76,   77,   12,
       41,   76,   77,    2,   12,   76,   77,    1,   12,   76,
       77,   12,   59,   76,   77,   12,   39,   76,   77,   12,
       74,   76,   77,   12,   75,   76,   77,   12,   67,   76,
       77,   12,   64,   76,   77,   10,   71,   76,   77,   12,
       65,   76,   77,   12,   76,   77,   12,   68,   76,   77,
       12,   29,   76,   77,   12,   40,   76,   77,   10,   70,

       76,   77,   12,   62,   76,   77,   12,   73,   76,   77,
       12,   63,   76,   77,   12,   36,   76,   77,16421,   12,
       32,   76,   77,   12,   69,   76,   77,   12,   25,   76,
       77,   12,   72,   76,   77,   12,   58,   76,   77,   12,
       61,   76,   77,   76,   77,   33,   76,   77,   17,   38,
       77,   60,   76,   77,   17,   41,   76,   77,    2,   76,
       77,    1,   76,   77,   59,   76,   77,   39,   76,   77,
       74,   76,   77,   75,   76,   77,   67,   76,   77,   64,
       76,   77,   71,   76,   77,   65,   76,   77,   76,   77,
       68,   76,   77,   29,   76,   77,   40,   76,   77,   70,

       76,   77,   62,   76,   77,   73,   76,   77,   63,   76,
       77,   36,   76,   77,16421,   32,   76,   77,   69,   76,
       77,   25,   76,   77,   72,   76,   77,   58,   76,   77,
       61,   76,   77,   76,   77,   33,   76,   77,   16,   38,
       77,   60,   76,   77,   41,   76,   77,    2,   76,   77,
        1,   76,   77,   59,   76,   77,   16,   39,   76,   77,
       74,   76,   77,   75,   76,   77,   67,   76,   77,   64,
       76,   77,   71,   76,   77,   65,   76,   77,   76,   77,
       68,   76,   77,   29,   76,   77,   40,   76,   77,   70,
       76,   77,   62,   76,   77,   73,   76,   77,   63,   76,

       77,   36,   76,   77,16421,   32,   76,   77,   69,   76,
       77,   25,   76,   77,   72,   76,   77,   58,   76,   77,
       61,   76,   77,   22,   33,   76,   77,   24,   38,   77,
       21,   71,   76,   77,   23,   70,   76,   77,   20,   25,
       76,   77,   33,   53,   57,   66,   48,   49,   47,   43,
       44,   31,   45,   46,   30,   29,   26,   50,   54,   51,
       55,   36,   36,16421, 8229,   32,   56,   52,16389, 8197,
        7,   11,   11,   12,   12,   12,   15,   33,   12,   53,
       12,   12,   14,   12,   14,   12,   12,   57,   12,   12,
       13,   12,   13,   12,   12,   66,   12,   48,   12,   49,

       12,   47,   12,   43,   12,   12,   44,   12,   31,   12,
       45,   12,   46,   12,   30,   12,   29,   12,   12,   26,
       12,   50,   12,   54,   12,   51,   12,   55,   12,   36,
       12,   36,16421,   12, 8229,   12,   32,   12,   56,   12,
       52,   17,   33,   53,   57,   66,   48,   49,   47,   43,
       44,   31,   45,   46,   30,   29,   26,   50,   54,   51,
       55,   36,   36,16421, 8229,   32,   56,   52,   16,   16,
       33,   53,   57,   66,   48,   49,   16,   47,   43,   44,
       31,   45,   46,   30,   29,   26,   50,   54,   51,   55,
       36,   36,16421, 8229,   32,   56,   52,   22,   33,   21,

       23,   20,   24,   21,   23,   20,   19,   42,   28,   30,
       27,   29,   12,   12,   13,   12,   12,   12,   42,   12,
       12,   12,   28,   12,   30,   12,   12,   27,   12,   12,
       29,   42,   28,   30,   27,   29,   42,   28,   30,   27,
       29,   18,   34,   31,   30,   12,   12,   12,   31,   12,
       12,   30,   17,   34,   31,   30,   16,   34,   31,   30
    } ;

static const short int yy_accept[367] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    8,    9,   12,
       15,   16,   17,   18,   19,   20,   21,   22,   24,   27,
       29,   32,   35,   38,   41,   44,   47,   50,   53,   56,
       59,   62,   65,   67,   70,   73,   76,   79,   82,   85,
       88,   92,   95,   98,  101,  104,  107,  110,  112,  115,
      117,  119,  121,  123,  125,  128,  133,  136,  140,  144,
      148,  152,  156,  160,  164,  168,  172,  176,  180,  184,
      187,  191,  195,  199,  203,  207,  211,  215,  220,  224,
      228,  232,  236,  240,  244,  246,  249,  252,  255,  259,
      262,  265,  268,  271,  274,  277,  280,  283,  286,  289,

      291,  294,  297,  300,  303,  306,  309,  312,  316,  319,
      322,  325,  328,  331,  334,  336,  339,  342,  345,  348,
      351,  354,  357,  361,  364,  367,  370,  373,  376,  379,
      381,  384,  387,  390,  393,  396,  399,  402,  406,  409,
      412,  415,  418,  421,  424,  428,  431,  435,  439,  443,
      444,  445,  446,  447,  448,  449,  450,  451,  451,  452,
      453,  454,  455,  456,  457,  457,  458,  459,  460,  461,
      462,  463,  465,  466,  467,  468,  469,  470,  471,  472,
      473,  474,  475,  476,  479,  481,  482,  483,  484,  486,
      486,  487,  489,  490,  491,  492,  494,  494,  495,  497,

      499,  501,  503,  505,  506,  508,  510,  512,  514,  516,
      518,  519,  521,  523,  525,  527,  529,  531,  534,  536,
      538,  540,  542,  542,  543,  543,  544,  545,  546,  547,
      548,  549,  550,  551,  551,  552,  553,  554,  555,  556,
      557,  557,  558,  559,  560,  561,  562,  563,  565,  566,
      567,  567,  568,  569,  569,  570,  571,  571,  572,  573,
      574,  574,  575,  576,  577,  579,  580,  580,  581,  582,
      583,  584,  585,  586,  586,  587,  588,  589,  590,  591,
      592,  594,  595,  596,  597,  598,  600,  600,  601,  602,
      603,  604,  605,  606,  607,  608,  609,  609,  609,  610,

      611,  611,  612,  612,  613,  613,  614,  615,  615,  616,
      616,  617,  618,  618,  620,  621,  622,  624,  626,  627,
      629,  630,  632,  633,  633,  633,  634,  635,  635,  636,
      636,  637,  638,  638,  638,  639,  640,  640,  641,  641,
      642,  643,  643,  644,  644,  645,  645,  646,  647,  648,
      650,  651,  653,  653,  655,  655,  656,  656,  657,  657,
      659,  659,  660,  660,  661,  661
    } ;

static const YY_CHAR yy_ec[128] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,   20,   21,
       22,   23,    1,    1,   24,   24,   24,   25,   25,   24,
       24,   24,   26,   26,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       27,   28,   29,   30,   24,    1,   24,   24,   24,   25,

       25,   24,   24,   24,   26,   26,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,    1,   31,    1,   32,    1
    } ;

static const YY_CHAR yy_meta[33] =
    {   0,
        1,    2,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    4,    1,    1,    1,    2,    1,    4,
        1,    2,    1,    2,    2,    2,    1,    1,    1,    1,
        1,    1
    } ;

static const short int yy_base[385] =
    {   0,
        0,    0,  948,  946,   31,   33,   35,   37,   40,    0,
       72,    0,  104,    0,  135,  163,  940, 1045,  934, 1045,
      913, 1045, 1045, 1045,  922, 1045, 1045, 1045,  911,  905,
     1045,  901,  184, 1045,  125, 1045, 1045,  117,  891,  883,
      140,  902, 1045, 1045, 1045,  870,  865,  881, 1045, 1045,
      142,  880,  872, 1045,  863,  862, 1045,  145,  213,  855,
      854,  144,  240,  846,  842,  146,  155, 1045,  154,  267,
      826,  296,  819, 1045,  151,  157,  158,  321,  818,  807,
      804,  803,  159,  169,  167,  179, 1045,  182, 1045,  183,
      194,  200,  216,  220,  227,  233,  234,  247,  262,  345,

      253,  373,  254,  261,  399,  283,  288,  426,  268,    0,
      275,  289,  296,  297,  304,  306, 1045,  327,  328,  332,
      349,  356,  785,  365,  377,  378,  379,  391,  405,  450,
      406,  478,  407,  408,  504,  409,  421,  531,  436,    0,
      437,  451,  454,  467,  556,  470,  773,  173,  176,  770,
     1045, 1045, 1045, 1045, 1045, 1045,  742,  736, 1045,  466,
     1045, 1045,  475,  492,  211, 1045, 1045, 1045, 1045, 1045,
      187,  218, 1045,  741, 1045, 1045,  739, 1045,  232,  738,
      729,  717,  710,  687,  667,  584,  367, 1045,  657,  301,
      324,  636,  611,  512, 1045,  204,  474,  365,  605,  594,

      590,  571,  251,  215,  562,  510,  532,  528,  520,  638,
      456,  507,  496,  473,  459,  445,  318,    0,  439,  430,
      421,  401,  483, 1045,    0,  539,  520,  526,  534,  547,
      560,  563,  566,  574,  569,  583,    0,  577,  601,    0,
      652,  578,  590,  618,  619,  625,  611,    0,  629,  646,
      638,  647,  655,  652, 1045,  374,    0,  670,  673,  678,
      681,  682,  683,  685,  357,  690,  705,  694,  699,    0,
      717,  711,    0,  733,  725,  729,  732,  741,  752,  738,
        0,  762,  764,  765,  767,    0,  613,  340,  394,  331,
      642,  326,  423,  349,  296, 1045,  453,  764, 1045,  585,

      768, 1045,  269,  479,    0,  794,  702,  782,  265,    0,
      821,  798,  775,  270,  517,  800,  249,  786,  814,  244,
      411,  721,  814,  831,  857,  835,  821,  873,  840,  848,
      773,  822,  852,  897,  849,  853,  913,  864,  893,  865,
     1045,  558, 1045,  176,  498,  145,  525,  693,  582,  891,
      698,  901,  892, 1045,  919,  916,  927,  930,  905, 1045,
      941,  942,  945,  948, 1045,  974,  978,  982,  152,  986,
      990,  994,  996, 1000, 1004, 1008, 1012, 1016, 1020, 1024,
     1028, 1032, 1036, 1040
    } ;

static const short int yy_def[385] =
    {   0,
      365,    1,  366,  366,  367,  367,  368,  368,  365,    9,
      365,   11,  365,   13,    1,    1,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      369,  365,  365,  365,  365,  365,  365,  370,  365,  365,
      365,  371,  365,  365,  372,  365,  365,  372,  373,  372,
      372,  372,  374,  372,  372,  372,  372,  365,  372,  372,
      372,  372,  372,  365,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  375,  375,  365,  375,  365,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,

      375,  375,  375,  375,  375,  375,  375,  102,  375,  376,
      375,  375,  375,  375,  377,  377,  365,  377,  377,  377,
      377,  377,  365,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  132,  377,  378,
      377,  377,  377,  377,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  369,  365,  365,  365,  365,  370,  365,  365,  371,
      365,  372,  365,  365,  372,  373,  379,  365,  372,  379,
      380,  372,  374,  381,  365,  372,  381,  382,  372,  372,

      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  365,   78,  372,  365,
      372,  372,  375,  365,  376,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  102,  376,  375,  102,  102,
      102,  375,  375,  375,  375,  375,  108,  108,  375,  375,
      375,  375,  375,  377,  365,  365,  378,  377,  377,  377,
      377,  377,  377,  377,  365,  377,  377,  377,  132,  378,
      377,  132,  132,  132,  377,  377,  377,  377,  377,  138,
      138,  377,  377,  377,  377,  145,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,

      365,  365,  365,  365,  383,  373,  379,  379,  365,  384,
      374,  381,  381,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  375,  375,  375,  375,  102,  102,  375,  375,
      102,  377,  377,  377,  377,  132,  132,  377,  377,  132,
      365,  365,  365,  365,  365,  365,  365,  365,  372,  372,
      372,  372,  375,  365,  375,  102,  102,  102,  377,  365,
      377,  132,  132,  132,    0,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365
    } ;

static const short int yy_nxt[1078] =
    {   0,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   41,   41,   42,   43,   44,   45,
       46,   47,   51,   51,   51,   51,   53,   54,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,   78,   78,   78,   79,   80,   81,   82,
       83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
       93,   94,   95,   96,   97,   98,   99,  100,  101,  102,
      103,  104,  105,  106,  107,  108,  108,  108,  109,  110,

      111,  112,  113,  114,  115,  116,  117,  118,  119,  120,
      121,  122,  123,  124,  125,  126,  127,  128,  129,  130,
      131,  132,  133,  134,  135,  136,  137,  138,  138,  138,
      139,  140,  141,  142,  143,  144,  145,  146,  167,  168,
      163,  171,  164,  179,  179,  183,  183,  183,  147,  165,
      166,  192,  183,  172,  148,  183,  183,  199,  183,  183,
      183,  173,  347,  149,  145,  146,  185,  200,  201,  224,
      183,  224,  213,  214,  293,  293,  147,  294,  215,  216,
      226,  224,  148,  224,  224,  224,  224,  224,  171,  221,
      222,  149,  156,  345,  225,  157,  224,  295,  224,  158,

      159,  160,  224,  227,  224,  183,  225,  228,  173,  225,
      225,  161,  311,  162,  187,  188,  183,  189,  224,  171,
      224,  225,  224,  303,  224,  303,  190,  225,  304,  224,
      315,  224,  190,  179,  179,  224,  224,  224,  224,  173,
      191,  194,  195,  225,  229,  183,  230,  225,  196,  224,
      183,  224,  183,  197,  225,  224,  224,  224,  224,  197,
      225,  225,  314,  224,  224,  224,  224,  198,  183,  250,
      224,  183,  224,  313,  225,  202,  231,  224,  203,  224,
      225,  225,  204,  205,  206,  224,  304,  224,  225,  225,
      224,  224,  224,  224,  207,  225,  208,  183,  224,  224,

      224,  224,  225,  188,  245,  188,  255,  258,  255,  246,
      225,  209,  256,  210,  256,  225,  225,  341,  253,  217,
      211,  212,  217,  225,  225,  307,  252,  292,  305,  255,
      255,  257,  294,  257,  255,  256,  256,  308,  218,  173,
      256,  292,  219,  308,  218,  218,  218,  224,  259,  224,
      294,  255,  295,  232,  257,  257,  233,  256,  255,  257,
      234,  235,  236,  260,  256,  261,  312,  255,  187,  188,
      295,  188,  237,  256,  238,  224,  257,  224,  313,  255,
      255,  255,  261,  257,  313,  256,  256,  256,  239,  262,
      240,  263,  257,  255,  305,  293,  293,  241,  242,  256,

      225,  224,  183,  224,  257,  257,  257,  255,  255,  255,
      255,  255,  183,  256,  256,  256,  256,  256,  257,  264,
      243,  244,  183,  255,  293,  293,  225,  247,  322,  256,
      278,  220,  257,  257,  257,  257,  257,  283,  255,  255,
      183,  223,  279,  248,  256,  256,  183,  249,  257,  248,
      248,  248,  255,  255,  342,  343,  255,  183,  265,  256,
      183,  266,  256,  257,  257,  267,  268,  269,  321,  255,
      321,  291,  291,  322,  183,  256,  195,  270,  257,  271,
      255,  257,  309,  160,  284,  224,  256,  224,  285,  289,
      298,  299,  300,  272,  257,  273,  304,  183,  290,  301,

      302,  310,  274,  275,  166,  257,  255,  163,  183,  164,
      225,  183,  256,  194,  195,  345,  165,  166,  348,  343,
      309,  183,  224,  299,  224,  276,  277,  206,  224,  183,
      224,  257,  280,  183,  316,  317,  224,  318,  224,  310,
      226,  224,  347,  224,  319,  320,  254,  225,  281,  224,
      302,  224,  282,  225,  281,  281,  281,  286,  287,  342,
      343,  225,  224,  183,  224,  224,  225,  224,  224,  288,
      224,  224,  183,  224,  225,  289,  224,  323,  224,  224,
      224,  224,  224,  183,  290,  187,  188,  225,  189,  324,
      225,  183,  224,  225,  224,  183,  225,  190,  223,  350,

      236,  225,  300,  190,  225,  225,  183,  325,  326,  301,
      302,  191,  194,  195,  287,  287,  223,  225,  327,  196,
      224,  224,  224,  224,  197,  328,  329,  224,  223,  224,
      197,  224,  289,  224,  223,  223,  223,  183,  198,  183,
      224,  290,  224,  291,  291,  225,  225,  250,  224,  224,
      224,  224,  225,  209,  255,  210,  225,  224,  183,  224,
      256,  289,  211,  212,  330,  225,  330,  223,  183,  331,
      290,  258,  255,  225,  225,  255,  223,  223,  256,  257,
      255,  256,  225,  255,  255,  255,  256,  255,  184,  256,
      256,  256,  255,  256,  348,  343,  255,  257,  256,  183,

      257,  332,  256,  187,  188,  257,  188,  255,  257,  257,
      257,  183,  257,  256,  254,  352,  269,  257,  183,  255,
      333,  257,  183,  334,  335,  256,  254,  255,  336,  305,
      181,  255,  257,  256,  255,  337,  338,  256,  322,  181,
      256,  178,  174,  255,  257,  339,  212,  339,  254,  256,
      340,  297,  257,  296,  255,  254,  257,  254,  254,  257,
      256,  254,  254,  254,  255,  283,  255,  255,  257,  255,
      256,  150,  256,  256,  292,  256,  344,  195,  344,  257,
      346,  345,  346,  309,  188,  347,  188,  183,  223,  257,
      331,  257,  257,  261,  257,  187,  188,  223,  189,  194,

      195,  183,  310,  318,  183,  183,  309,  190,  183,  305,
      319,  320,  349,  190,  349,  183,  224,  350,  224,  220,
      183,  191,  194,  195,  255,  310,  351,  183,  351,  196,
      256,  352,  353,  354,  197,  224,  223,  224,  327,  224,
      197,  225,  224,  183,  224,  328,  329,  183,  198,  257,
      224,  255,  224,  359,  360,  183,  183,  256,  225,  224,
      256,  224,  225,  184,  183,  331,  255,  225,  254,  355,
      336,  355,  256,  181,  356,  225,  257,  337,  338,  257,
      254,  181,  340,  178,  225,  357,  176,  357,  223,  254,
      358,  257,  183,  353,  354,  255,  224,  223,  223,  255,

      175,  256,  183,  174,  170,  256,  359,  360,  350,  361,
      340,  361,  169,  256,  362,  155,  317,  154,  352,  225,
      257,  224,  153,  224,  257,  363,  320,  363,  254,  152,
      364,  223,  257,  356,  151,  150,  356,  254,  254,  365,
      223,  326,  223,  255,  358,  223,  225,  358,   49,  256,
       49,  223,  223,  365,  223,  329,  365,  254,  362,  362,
      254,  365,  364,  254,  365,  364,  254,  335,  257,  254,
      254,  365,  254,  338,   48,   48,   48,   48,   50,   50,
       50,   50,   52,   52,   52,   52,  177,  177,  177,  177,
      180,  180,  365,  180,  182,  182,  186,  186,  186,  186,

      193,  193,  193,  193,  223,  223,  223,  223,  251,  251,
      365,  251,  254,  254,  254,  254,  261,  261,  365,  261,
      190,  190,  190,  190,  306,  306,  365,  306,  197,  197,
      197,  197,  311,  311,  365,  311,  308,  308,  365,  308,
      313,  313,  365,  313,   17,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365
    } ;

static const short int yy_chk[1078] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    5,    5,    6,    6,    7,    7,    8,    8,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   15,   15,   38,   38,
       35,   41,   35,   51,   51,   62,   58,   66,   15,   35,
       35,   62,   75,  369,   15,   69,   67,   66,   76,   77,
       83,   41,  346,   15,   16,   16,   58,   67,   69,   85,
       84,   85,   75,   75,  148,  148,   16,  149,   76,   77,
       86,   86,   16,   86,   88,   90,   88,   90,  171,   83,
       84,   16,   33,  344,   85,   33,   91,  149,   91,   33,

       33,   33,   92,   88,   92,  196,   86,   92,  171,   88,
       90,   33,  196,   33,   59,   59,  204,   59,   93,  172,
       93,   91,   94,  165,   94,  165,   59,   92,  165,   95,
      204,   95,   59,  179,  179,   96,   97,   96,   97,  172,
       59,   63,   63,   93,   96,  320,   97,   94,   63,   98,
      317,   98,  203,   63,   95,  101,  103,  101,  103,   63,
       96,   97,  203,  104,   99,  104,   99,   63,   70,  109,
      109,  314,  109,  309,   98,   70,   99,  111,   70,  111,
      101,  103,   70,   70,   70,  106,  303,  106,  104,   99,
      107,  112,  107,  112,   70,  109,   70,   72,  113,  114,

      113,  114,  111,  190,  106,  190,  115,  116,  116,  107,
      106,   72,  115,   72,  116,  107,  112,  295,  114,  217,
       72,   72,   78,  113,  114,  191,  113,  292,  190,  118,
      119,  115,  290,  116,  120,  118,  119,  191,   78,  217,
      120,  288,   78,  191,   78,   78,   78,  100,  118,  100,
      294,  121,  290,  100,  118,  119,  100,  121,  122,  120,
      100,  100,  100,  122,  122,  265,  198,  124,  187,  187,
      294,  187,  100,  124,  100,  102,  121,  102,  198,  125,
      126,  127,  256,  122,  198,  125,  126,  127,  102,  126,
      102,  127,  124,  128,  187,  289,  289,  102,  102,  128,

      102,  105,  222,  105,  125,  126,  127,  129,  131,  133,
      134,  136,  321,  129,  131,  133,  134,  136,  128,  129,
      105,  105,  221,  137,  293,  293,  105,  108,  321,  137,
      136,  220,  129,  131,  133,  134,  136,  139,  139,  141,
      219,  108,  137,  108,  139,  141,  216,  108,  137,  108,
      108,  108,  130,  142,  297,  297,  143,  211,  130,  142,
      215,  130,  143,  139,  141,  130,  130,  130,  211,  144,
      211,  146,  146,  211,  214,  144,  197,  130,  142,  130,
      132,  143,  197,  160,  143,  223,  132,  223,  144,  146,
      160,  160,  163,  132,  144,  132,  304,  213,  146,  163,

      163,  197,  132,  132,  304,  132,  135,  164,  212,  164,
      223,  206,  135,  194,  194,  345,  164,  164,  315,  315,
      194,  209,  227,  345,  227,  135,  135,  206,  228,  208,
      228,  135,  138,  207,  206,  206,  229,  209,  229,  194,
      226,  226,  347,  226,  209,  209,  138,  227,  138,  230,
      347,  230,  138,  228,  138,  138,  138,  145,  145,  342,
      342,  229,  231,  205,  231,  232,  226,  232,  233,  145,
      233,  235,  202,  235,  230,  145,  234,  233,  234,  238,
      242,  238,  242,  349,  145,  186,  186,  231,  186,  234,
      232,  201,  243,  233,  243,  200,  235,  186,  236,  349,

      236,  234,  300,  186,  238,  242,  199,  236,  236,  300,
      300,  186,  193,  193,  287,  287,  239,  243,  239,  193,
      244,  245,  244,  245,  193,  239,  239,  246,  247,  246,
      193,  249,  287,  249,  247,  247,  247,  192,  193,  210,
      251,  287,  251,  291,  291,  244,  245,  250,  250,  252,
      250,  252,  246,  210,  254,  210,  249,  253,  189,  253,
      254,  291,  210,  210,  241,  251,  241,  241,  185,  241,
      291,  258,  258,  250,  252,  259,  241,  241,  258,  254,
      260,  259,  253,  261,  262,  263,  260,  264,  184,  261,
      262,  263,  266,  264,  348,  348,  268,  258,  266,  351,

      259,  266,  268,  307,  307,  260,  307,  267,  261,  262,
      263,  183,  264,  267,  269,  351,  269,  266,  182,  271,
      267,  268,  322,  269,  269,  271,  272,  275,  272,  307,
      181,  276,  267,  275,  277,  272,  272,  276,  322,  180,
      277,  177,  174,  278,  271,  274,  322,  274,  274,  278,
      274,  158,  275,  157,  279,  280,  276,  274,  274,  277,
      279,  280,  280,  280,  282,  283,  283,  284,  278,  285,
      282,  150,  283,  284,  147,  285,  298,  313,  298,  279,
      301,  298,  301,  313,  308,  301,  308,  318,  331,  282,
      331,  283,  284,  123,  285,  306,  306,  331,  306,  312,

      312,  316,  313,  318,   82,   81,  312,  306,   80,  308,
      318,  318,  316,  306,  316,  319,  323,  316,  323,   79,
       73,  306,  311,  311,  332,  312,  319,   71,  319,  311,
      332,  319,  324,  324,  311,  324,  327,  326,  327,  326,
      311,  323,  329,   65,  329,  327,  327,   64,  311,  332,
      330,  335,  330,  333,  333,   61,   60,  335,  324,  325,
      333,  325,  326,   56,   55,  330,  338,  329,  336,  325,
      336,  325,  338,   53,  325,  330,  335,  336,  336,  333,
      340,   52,  340,   48,  325,  328,   47,  328,  328,  340,
      328,  338,  350,  353,  353,  339,  353,  328,  328,  334,

       46,  339,  352,   42,   40,  334,  359,  359,  350,  334,
      339,  334,   39,  359,  334,   32,  350,   30,  352,  353,
      339,  355,   29,  355,  334,  337,  352,  337,  337,   25,
      337,  356,  359,  356,   21,   19,  355,  337,  337,   17,
      356,  356,  357,  361,  357,  358,  355,  358,    4,  361,
        3,  357,  357,    0,  358,  358,    0,  362,  361,  362,
      363,    0,  363,  364,    0,  364,  362,  362,  361,  363,
      363,    0,  364,  364,  366,  366,  366,  366,  367,  367,
      367,  367,  368,  368,  368,  368,  370,  370,  370,  370,
      371,  371,    0,  371,  372,  372,  373,  373,  373,  373,

      374,  374,  374,  374,  375,  375,  375,  375,  376,  376,
        0,  376,  377,  377,  377,  377,  378,  378,    0,  378,
      379,  379,  379,  379,  380,  380,    0,  380,  381,  381,
      381,  381,  382,  382,    0,  382,  383,  383,    0,  383,
      384,  384,    0,  384,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365
    } ;

static yy_state_type yy_last_accepting_state;
static YY_CHAR *yy_last_accepting_cpos;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static YY_CHAR *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
yy_state_ptr = yy_full_state; /* restore orig. state */ \
yy_current_state = *yy_state_ptr; /* restore curr. state */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0

/* these variables are all declared out here so that section 3 code can
 * manipulate them
 */
/* points to current character in buffer */
static YY_CHAR *yy_c_buf_p = (YY_CHAR *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yyunput YY_PROTO(( YY_CHAR c, YY_CHAR *buf_ptr ));
void yyrestart YY_PROTO(( FILE *input_file ));
void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));

#define yy_new_buffer yy_create_buffer

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif

YY_DECL
    {
    register yy_state_type yy_current_state;
    register YY_CHAR *yy_cp, *yy_bp;
    register int yy_act;




    if ( yy_init )
	{
	YY_USER_INIT;

	if ( ! yy_start )
	    yy_start = 1;	/* first start state */

	if ( ! yyin )
	    yyin = stdin;

	if ( ! yyout )
	    yyout = stdout;

	if ( yy_current_buffer )
	    yy_init_buffer( yy_current_buffer, yyin );
	else
	    yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_load_buffer_state();

	yy_init = 0;
	}

    while ( 1 )		/* loops until end-of-file is reached */
	{
	yy_cp = yy_c_buf_p;

	/* support of yytext */
	*yy_cp = yy_hold_char;

	/* yy_bp points to the position in yy_ch_buf of the start of the
	 * current run.
	 */
	yy_bp = yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;
yy_match:
	do
	    {
	    register YY_CHAR yy_c = yy_ec[*yy_cp];
	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = yy_def[yy_current_state];
		if ( yy_current_state >= 366 )
		    yy_c = yy_meta[yy_c];
		}
	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	    *yy_state_ptr++ = yy_current_state;
	    ++yy_cp;
	    }
	while ( yy_base[yy_current_state] != 1045 );

yy_find_action:
	yy_current_state = *--yy_state_ptr;
	yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backtracking */
	for ( ; ; ) /* until we find what rule we matched */
	    {
	    if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
		{
		yy_act = yy_acclist[yy_lp];
		if ( yy_act & YY_TRAILING_HEAD_MASK ||
		     yy_looking_for_trail_begin )
		    {
		    if ( yy_act == yy_looking_for_trail_begin )
			{
			yy_looking_for_trail_begin = 0;
			yy_act &= ~YY_TRAILING_HEAD_MASK;
			break;
			}
		    }
		else if ( yy_act & YY_TRAILING_MASK )
		    {
		    yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
		    yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
		    }
		else
		    {
		    yy_full_match = yy_cp;
		    yy_full_state = yy_state_ptr;
		    yy_full_lp = yy_lp;
		    break;
		    }
		++yy_lp;
		goto find_rule;
		}
	    --yy_cp;
	    yy_current_state = *--yy_state_ptr;
	    yy_lp = yy_accept[yy_current_state];
	    }

	YY_DO_BEFORE_ACTION;
	YY_USER_ACTION;

do_action:	/* this label is used only to access EOF actions */


	switch ( yy_act )
	    {
case 1:
# line 172 "lex.l"
case 2:
# line 172 "lex.l"
{
			  if (beginning_of_function)
			    {
			      grab_help_text ();
			      beginning_of_function = 0;
			    }

			  BEGIN COMMENT;
			  current_input_column += yyleng;
			}
	YY_BREAK
case 3:
# line 183 "lex.l"
{
			  BEGIN 0;
			  current_input_column = 0;
			  quote_is_transpose = 0;
			  cant_be_identifier = 0;
			  convert_spaces_to_comma = 1;
			  return '\n';
			}
	YY_BREAK
case YY_STATE_EOF(COMMENT):
# line 192 "lex.l"
{ RETURN (END_OF_INPUT); }
	YY_BREAK
case 5:
# line 194 "lex.l"
{ current_input_column += yyleng; }
	YY_BREAK
case 6:
# line 196 "lex.l"
{
			  yyless (0);
			  BEGIN MATRIX;
			}
	YY_BREAK
case 7:
# line 201 "lex.l"
{
			  fixup_column_count (yytext);
			  BEGIN MATRIX;
			}
	YY_BREAK
case 8:
# line 207 "lex.l"
case 9:
# line 207 "lex.l"
{
		          BEGIN 0;
			  current_input_column = 0;
			  quote_is_transpose = 0;
			  cant_be_identifier = 0;
			  convert_spaces_to_comma = 1;
			  return '\n';
			}
	YY_BREAK
case 10:
# line 216 "lex.l"
{
			  if (doing_set)
			    {
			      yylval.string = strsave (yytext);
			      RETURN (TEXT);
			    }
			  else
			    {
			      BEGIN 0;
			      RETURN (',');
			    }
		        }
	YY_BREAK
case 11:
# line 230 "lex.l"
case 12:
# line 230 "lex.l"
{

			  static char *tok = (char *) NULL;
			  delete [] tok;
			  tok = strip_trailing_whitespace (yytext);

			  yylval.string = strsave (tok);
			  RETURN (TEXT);
			}
	YY_BREAK
case 13:
# line 240 "lex.l"
{
			  if (yytext[yyleng-1] == '\n')
			    {
			      error ("unterminated string constant");
			      current_input_column = 0;
			      jump_to_top_level ();
			    }
			  else
			    {
			      int off1 = doing_set ? 0 : 1;
			      int off2 = doing_set ? 0 : 2;
			      yylval.string = strsave (&yytext[off1]);
			      yylval.string[yyleng-off2] = '\0';
			      current_input_column += yyleng;
			    }
			  do_string_escapes (yylval.string);
			  return TEXT;
			}
	YY_BREAK
case 14:
# line 259 "lex.l"
{
			  if (yytext[yyleng-1] == '\n')
			    {
			      error ("unterminated string constant");
			      current_input_column = 0;
			      jump_to_top_level ();
			    }
			  else
			    {
			      int off1 = doing_set ? 0 : 1;
			      int off2 = doing_set ? 0 : 2;
			      yylval.string = strsave (&yytext[off1]);
			      yylval.string[yyleng-off2] = '\0';
			      current_input_column += yyleng;
			    }
			  do_string_escapes (yylval.string);
			  return TEXT;
			}
	YY_BREAK
case 15:
# line 278 "lex.l"
{ current_input_column += yyleng; }
	YY_BREAK
case 16:
# line 280 "lex.l"
{
			  if (braceflag)
			    BEGIN MATRIX;
			  else
			    BEGIN 0;

			  if (yytext[yyleng-1] == '\n')
			    {
			      error ("unterminated string constant");
			      current_input_column = 0;
			      jump_to_top_level ();
			    }
			  else
			    {
			      yylval.string = strsave (yytext);
			      yylval.string[yyleng-1] = '\0';
			      current_input_column += yyleng;
			    }
			  do_string_escapes (yylval.string);
			  quote_is_transpose = 1;
			  cant_be_identifier = 1;
			  convert_spaces_to_comma = 1;
			  return TEXT;
			}
	YY_BREAK
case 17:
# line 306 "lex.l"
{
			  if (braceflag)
			    BEGIN MATRIX;
			  else
			    BEGIN 0;

			  if (yytext[yyleng-1] == '\n')
			    {
			      error ("unterminated string constant");
			      current_input_column = 0;
			      jump_to_top_level ();
			    }
			  else
			    {
			      yylval.string = strsave (yytext);
			      yylval.string[yyleng-1] = '\0';
			      current_input_column += yyleng;
			    }
			  do_string_escapes (yylval.string);
			  quote_is_transpose = 1;
			  cant_be_identifier = 1;
			  convert_spaces_to_comma = 1;
			  return TEXT;
			}
	YY_BREAK
case 18:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 331 "lex.l"
{

// For this and the next two rules, we're looking at ']', and we
// need to know if the next token is '='.
//
// All this so we can handle the bogus syntax 
//
//   [x,y]                % an expression by itself
//   [x,y] = expression   % assignment to a list of identifiers
//   [x,y] == expression  % test for equality
//
// It would have been so much easier if the delimiters were simply
// different for the expression on the left hand side of the equals
// operator.

			  in_brace_or_paren.pop ();
			  braceflag--;
			  if (braceflag == 0)
			    {
			      if (!defining_func)
				promptflag++;
			      BEGIN 0;
			    }
			  fixup_column_count (yytext);
			  quote_is_transpose = 0;
			  cant_be_identifier = 0;
			  convert_spaces_to_comma = 1;
			  return ']';
			}
	YY_BREAK
case 19:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
# line 361 "lex.l"
{
			  in_brace_or_paren.pop ();
			  braceflag--;
			  if (braceflag == 0)
			    {
			      BEGIN 0;
			      if (!defining_func)
				promptflag++;
			    }
			  fixup_column_count (yytext);
			  quote_is_transpose = 0;
			  cant_be_identifier = 0;
			  convert_spaces_to_comma = 1;
			  if (maybe_screwed_again)
			    return SCREW_TWO;
			  else
			    return ']';
			}
	YY_BREAK
case 20:
# line 380 "lex.l"
{
			  fixup_column_count (yytext);

			  in_brace_or_paren.pop ();
			  braceflag--;
			  if (braceflag == 0)
			    {
			      if (!defining_func)
				promptflag++;
			      BEGIN 0;
			    }
			  else
			    {
			      int c0 = yytext[yyleng-1];
			      int spc_prev = (c0 == ' ' || c0 == '\t');
			      int bin_op = next_token_is_bin_op (spc_prev,
								 yytext);
			      int postfix_un_op
				= next_token_is_postfix_unary_op (spc_prev,
								  yytext);

			      int c1 = yyinput ();
			      unput (c1);
			      int other_op = match_any (c1, ",;\n]");

			      if (! (postfix_un_op || bin_op || other_op)
				     && in_brace_or_paren.top ()
				     && convert_spaces_to_comma)
				{
				  unput (',');
				  return ']';
				}
			    }

			  quote_is_transpose = 1;
			  cant_be_identifier = 0;
			  convert_spaces_to_comma = 1;
			  return ']';
			}
	YY_BREAK
case 21:
# line 420 "lex.l"
{ RETURN (','); }
	YY_BREAK
case 22:
# line 422 "lex.l"
{
			  int bin_op = next_token_is_bin_op (1, yytext);
			  int postfix_un_op
			    = next_token_is_postfix_unary_op (1, yytext);

 			  if (! (postfix_un_op || bin_op)
			      && in_brace_or_paren.top ()
			      && convert_spaces_to_comma)
			    RETURN (',');
			}
	YY_BREAK
case 23:
# line 434 "lex.l"
case 24:
# line 434 "lex.l"
{
			  fixup_column_count (yytext);
			  quote_is_transpose = 0;
			  cant_be_identifier = 0;
			  convert_spaces_to_comma = 1;
			  return ';';
			}
	YY_BREAK
case 25:
# line 442 "lex.l"
{
			  if (! in_brace_or_paren.empty ())
			    in_brace_or_paren.pop ();

			  if (plotting)
			    {
			      in_plot_range = 0;
			      RETURN (CLOSE_BRACE);
			    }
			  else
			    RETURN (']');
			}
	YY_BREAK
case 26:
# line 456 "lex.l"
case 27:
# line 457 "lex.l"
case 28:
# line 457 "lex.l"
{
			  int nread = sscanf (yytext, "%lf", &(yylval.number));
			  assert (nread == 1);
			  quote_is_transpose = 1;
			  cant_be_identifier = 1;
			  convert_spaces_to_comma = 1;
			  current_input_column += yyleng;
			  DO_COMMA_INSERT_CHECK;
			  return IMAG_NUM;
			}
	YY_BREAK
case 29:
# line 469 "lex.l"
case 30:
# line 470 "lex.l"
case 31:
# line 471 "lex.l"
			{
			  int nread = sscanf (yytext, "%lf", &(yylval.number));
			  assert (nread == 1);
			  quote_is_transpose = 1;
			  cant_be_identifier = 1;
			  convert_spaces_to_comma = 1;
			  current_input_column += yyleng;
			  DO_COMMA_INSERT_CHECK;
			  return NUM;
			}
case 32:
# line 482 "lex.l"
{
		  in_brace_or_paren.push (1);
		  if (plotting)
		    {
		      in_plot_range = 1;
		      RETURN (OPEN_BRACE);
		    }

		  if (do_comma_insert)
		    {
		      yyless (0);
		      do_comma_insert = 0;
		      quote_is_transpose = 0;
		      cant_be_identifier = 0;
		      convert_spaces_to_comma = 1;
		      return (',');
		    }
		  else
		    {
		      mlnm.push (1);
		      braceflag++;
		      promptflag--;
		      BEGIN NEW_MATRIX;
		      RETURN ('[');
		    }
		}
	YY_BREAK
case 33:
# line 509 "lex.l"
{ current_input_column += yyleng; }
	YY_BREAK
case 34:
# line 511 "lex.l"
{

// Line continuation.

		  promptflag--;
		  current_input_column = 0;
		}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(NEW_MATRIX):
case YY_STATE_EOF(HELP_FCN):
case YY_STATE_EOF(TEXT_FCN):
case YY_STATE_EOF(DQSTRING):
case YY_STATE_EOF(STRING):
case YY_STATE_EOF(MATRIX):
# line 519 "lex.l"
RETURN (END_OF_INPUT);
	YY_BREAK
case 36:
# line 521 "lex.l"
{

// Truncate the token at the first space or tab but don't write
// directly on yytext.

		  static char *tok = (char *) NULL;
		  delete [] tok;
		  tok = strip_trailing_whitespace (yytext);

		  int kw_token = is_keyword (tok);
		  if (kw_token)
		    RETURN (kw_token);

		  if (plotting && cant_be_identifier)
		    {
		      int plot_option_kw = is_plot_keyword (tok);
		      if (plot_option_kw)
			{
			  quote_is_transpose = 0;
			  cant_be_identifier = 0;
			  convert_spaces_to_comma = 1;
			  current_input_column += yyleng;
			  return plot_option_kw;
			}
		    }

		  if (plotting && in_plot_style)
		    {
		      char *sty = plot_style_token (&tok[1]);
		      if (sty != (char *) NULL)
			{
			  yylval.string = strsave (sty);
			  if (in_plot_style)
			    {
			      in_plot_style = 0;
			      RETURN (STYLE);
			    }
			}
		    }

		  cant_be_identifier = 1;

// If we are looking at a text style function, set up to gobble its
// arguments.  These are also reserved words, but only because it
// would be very difficult to do anything intelligent with them if
// they were not reserved.

		  if (is_text_function_name (tok))
		    {
		      BEGIN TEXT_FCN;

		      if (strcmp (tok, "clear") == 0)
			return CLEAR;
		      else if (strcmp (tok, "help") == 0)
			BEGIN HELP_FCN;
		      else if (strcmp (tok, "set") == 0)
			doing_set = 1;
		    }

		  yylval.sym_rec = lookup_identifier (tok);

		  quote_is_transpose = 1;
		  current_input_column += yyleng;
		  DO_COMMA_INSERT_CHECK;

		  if (! in_brace_or_paren.empty ()
		      && in_brace_or_paren.top ())
		    {
		      int c0 = yytext[yyleng-1];
		      int spc_prev = (c0 == ' ' || c0 == '\t');
		      int bin_op = next_token_is_bin_op (spc_prev, yytext);

		      int postfix_un_op
			= next_token_is_postfix_unary_op (spc_prev, yytext);

		      int c1 = yyinput ();
		      unput (c1);
		      int other_op = match_any (c1, ",;\n](");

		      if (! (postfix_un_op || bin_op || other_op))
			unput (',');
		    }

		  convert_spaces_to_comma = 1;
		  return NAME;
		}
	YY_BREAK
case 37:
# line 608 "lex.l"
{

// We've found an identifier followed by some space and an equals
// sign.  If we are working on a function definition and the previous
// token was `function', we have something like this
//
//    function x = y <list> end
//
// which is a function named y returning a variable named x.  The
// symbol y belongs in the global symbol table (nested function
// definitions are illegal) and the symbol x belongs in the 
// symbol table local to the function. 
//
// If we're not defining a function, this should function exactly like
// the case above.  I suppose it would be nice to avoid duplicating
// all the code, eh?

		  int kw_token = is_keyword (yytext);
		  if (kw_token)
		    RETURN (kw_token);

		  if (plotting && cant_be_identifier)
		    {
		      int plot_option_kw = is_plot_keyword (yytext);
		      if (plot_option_kw)
			{
			  quote_is_transpose = 0;
		  	  convert_spaces_to_comma = 1;
			  current_input_column += yyleng;
			  return plot_option_kw;
			}
		    }
		
		  cant_be_identifier = 1;

// If we are looking at a text style function, set up to gobble its
// arguments.  These are also reserved words, but only because it
// would be very difficult to do anything intelligent with them if
// they were not reserved.

		  if (is_text_function_name (yytext))
		    {
		      BEGIN TEXT_FCN;

		      if (strcmp (yytext, "clear") == 0)
			return CLEAR;
		      else if (strcmp (yytext, "help") == 0)
			BEGIN HELP_FCN;
		      else if (strcmp (yytext, "set") == 0)
			doing_set = 1;
		    }

		  if (defining_func && maybe_screwed)
		    curr_sym_tab = tmp_local_sym_tab;

		  yylval.sym_rec = lookup_identifier (yytext);

		  convert_spaces_to_comma = 1;
		  current_input_column += yyleng;
		  if (defining_func && maybe_screwed)
		    {
		      return SCREW;
		    }
		  else
		    {
		      quote_is_transpose = 1;
		      DO_COMMA_INSERT_CHECK;
		      return NAME;
		    }
		}
	YY_BREAK
case 38:
# line 679 "lex.l"
{
		  quote_is_transpose = 0;
		  cant_be_identifier = 0;
		  current_input_column = 0;
		  convert_spaces_to_comma = 1;
		  return '\n';
		}
	YY_BREAK
case 39:
# line 687 "lex.l"
{
		  current_input_column++;
		  convert_spaces_to_comma = 1;

		  if (quote_is_transpose)
		    {
		      DO_COMMA_INSERT_CHECK;
		      return QUOTE;
		    }
		  else
		    BEGIN STRING;
		}
	YY_BREAK
case 40:
# line 700 "lex.l"
{
		  if (plotting && (in_plot_range || in_plot_using))
		    RETURN (COLON);
		  else
		    BIN_OP_RETURN (':');
		}
	YY_BREAK
case 41:
# line 707 "lex.l"
{ BEGIN DQSTRING; }
	YY_BREAK
case 42:
# line 708 "lex.l"
{ BIN_OP_RETURN (EPOW); }
	YY_BREAK
case 43:
# line 709 "lex.l"
{ BIN_OP_RETURN (EMUL); }
	YY_BREAK
case 44:
# line 710 "lex.l"
{ BIN_OP_RETURN (EDIV); }
	YY_BREAK
case 45:
# line 711 "lex.l"
{ BIN_OP_RETURN (ELEFTDIV); }
	YY_BREAK
case 46:
# line 712 "lex.l"
{ BIN_OP_RETURN (EPOW); }
	YY_BREAK
case 47:
# line 713 "lex.l"
{ DO_COMMA_INSERT_CHECK; RETURN (TRANSPOSE); }
	YY_BREAK
case 48:
# line 714 "lex.l"
{ DO_COMMA_INSERT_CHECK; RETURN (PLUS_PLUS); }
	YY_BREAK
case 49:
# line 715 "lex.l"
{ DO_COMMA_INSERT_CHECK; RETURN (MINUS_MINUS); }
	YY_BREAK
case 50:
# line 716 "lex.l"
{ BIN_OP_RETURN (EXPR_LE); }
	YY_BREAK
case 51:
# line 717 "lex.l"
{ BIN_OP_RETURN (EXPR_EQ); }
	YY_BREAK
case 52:
# line 718 "lex.l"
{ BIN_OP_RETURN (EXPR_NE); }
	YY_BREAK
case 53:
# line 719 "lex.l"
{ BIN_OP_RETURN (EXPR_NE); }
	YY_BREAK
case 54:
# line 720 "lex.l"
{ BIN_OP_RETURN (EXPR_NE); }
	YY_BREAK
case 55:
# line 721 "lex.l"
{ BIN_OP_RETURN (EXPR_GE); }
	YY_BREAK
case 56:
# line 722 "lex.l"
{ BIN_OP_RETURN (EXPR_OR); }
	YY_BREAK
case 57:
# line 723 "lex.l"
{ BIN_OP_RETURN (EXPR_AND); }
	YY_BREAK
case 58:
# line 724 "lex.l"
{ BIN_OP_RETURN (EXPR_OR); }
	YY_BREAK
case 59:
# line 725 "lex.l"
{ BIN_OP_RETURN (EXPR_AND); }
	YY_BREAK
case 60:
# line 726 "lex.l"
{ RETURN (EXPR_NOT); }
	YY_BREAK
case 61:
# line 727 "lex.l"
{ BIN_OP_RETURN (EXPR_NOT); }
	YY_BREAK
case 62:
# line 728 "lex.l"
{ BIN_OP_RETURN (EXPR_LT); }
	YY_BREAK
case 63:
# line 729 "lex.l"
{ BIN_OP_RETURN (EXPR_GT); }
	YY_BREAK
case 64:
# line 730 "lex.l"
{ BIN_OP_RETURN ('+'); }
	YY_BREAK
case 65:
# line 731 "lex.l"
{ BIN_OP_RETURN ('-'); }
	YY_BREAK
case 66:
# line 732 "lex.l"
{ BIN_OP_RETURN (POW); }
	YY_BREAK
case 67:
# line 733 "lex.l"
{ BIN_OP_RETURN ('*'); }
	YY_BREAK
case 68:
# line 734 "lex.l"
{ BIN_OP_RETURN ('/'); }
	YY_BREAK
case 69:
# line 735 "lex.l"
{ BIN_OP_RETURN (LEFTDIV); }
	YY_BREAK
case 70:
# line 736 "lex.l"
{ RETURN (';'); }
	YY_BREAK
case 71:
# line 737 "lex.l"
{ RETURN (','); }
	YY_BREAK
case 72:
# line 738 "lex.l"
{ BIN_OP_RETURN (POW); }
	YY_BREAK
case 73:
# line 739 "lex.l"
{ RETURN ('='); }
	YY_BREAK
case 74:
# line 740 "lex.l"
{
		  in_brace_or_paren.push (0);
		  RETURN ('(');
		}
	YY_BREAK
case 75:
# line 744 "lex.l"
{
		  if (! in_brace_or_paren.empty ())
		    in_brace_or_paren.pop ();
		  DO_COMMA_INSERT_CHECK;
		  current_input_column++;
		  quote_is_transpose = 1;
		  return ')';
		}
	YY_BREAK
case 76:
# line 753 "lex.l"
{

// We return everything else as single character tokens, which should
// eventually result in a parse error.

		  RETURN (yytext[0]);
		}
	YY_BREAK
case 77:
# line 761 "lex.l"
ECHO;
	YY_BREAK

	    case YY_END_OF_BUFFER:
		{
		/* amount of text matched not including the EOB char */
		int yy_amount_of_matched_text = yy_cp - yytext - 1;

		/* undo the effects of YY_DO_BEFORE_ACTION */
		*yy_cp = yy_hold_char;

		/* note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the end-
		 * of-buffer state).  Contrast this with the test in yyinput().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
		    /* this was really a NUL */
		    {
		    yy_state_type yy_next_state;

		    yy_c_buf_p = yytext + yy_amount_of_matched_text;

		    yy_current_state = yy_get_previous_state();

		    /* okay, we're now positioned to make the
		     * NUL transition.  We couldn't have
		     * yy_get_previous_state() go ahead and do it
		     * for us because it doesn't know how to deal
		     * with the possibility of jamming (and we
		     * don't want to build jamming into it because
		     * then it will run more slowly)
		     */

		    yy_next_state = yy_try_NUL_trans( yy_current_state );

		    yy_bp = yytext + YY_MORE_ADJ;

		    if ( yy_next_state )
			{
			/* consume the NUL */
			yy_cp = ++yy_c_buf_p;
			yy_current_state = yy_next_state;
			goto yy_match;
			}

		    else
			{
			goto yy_find_action;
			}
		    }

		else switch ( yy_get_next_buffer() )
		    {
		    case EOB_ACT_END_OF_FILE:
			{
			yy_did_buffer_switch_on_eof = 0;

			if ( yywrap() )
			    {
			    /* note: because we've taken care in
			     * yy_get_next_buffer() to have set up yytext,
			     * we can now set up yy_c_buf_p so that if some
			     * total hoser (like flex itself) wants
			     * to call the scanner after we return the
			     * YY_NULL, it'll still work - another YY_NULL
			     * will get returned.
			     */
			    yy_c_buf_p = yytext + YY_MORE_ADJ;

			    yy_act = YY_STATE_EOF((yy_start - 1) / 2);
			    goto do_action;
			    }

			else
			    {
			    if ( ! yy_did_buffer_switch_on_eof )
				YY_NEW_FILE;
			    }
			}
			break;

		    case EOB_ACT_CONTINUE_SCAN:
			yy_c_buf_p = yytext + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yytext + YY_MORE_ADJ;
			goto yy_match;

		    case EOB_ACT_LAST_MATCH:
			yy_c_buf_p =
			    &yy_current_buffer->yy_ch_buf[yy_n_chars];

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yytext + YY_MORE_ADJ;
			goto yy_find_action;
		    }
		break;
		}

	    default:
#ifdef FLEX_DEBUG
		printf( "action # %d\n", yy_act );
#endif
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	    }
	}
    }


/* yy_get_next_buffer - try to read in a new buffer
 *
 * synopsis
 *     int yy_get_next_buffer();
 *     
 * returns a code representing an action
 *     EOB_ACT_LAST_MATCH - 
 *     EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *     EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()

    {
    register YY_CHAR *dest = yy_current_buffer->yy_ch_buf;
    register YY_CHAR *source = yytext - 1; /* copy prev. char, too */
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
	YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

    /* try to read more data */

    /* first move last chars to start of buffer */
    number_to_move = yy_c_buf_p - yytext;

    for ( i = 0; i < number_to_move; ++i )
	*(dest++) = *(source++);

    if ( yy_current_buffer->yy_eof_status != EOF_NOT_SEEN )
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
	yy_n_chars = 0;

    else
	{
	int num_to_read = yy_current_buffer->yy_buf_size - number_to_move - 1;

	if ( num_to_read > YY_READ_BUF_SIZE )
	    num_to_read = YY_READ_BUF_SIZE;

	else if ( num_to_read <= 0 )
	    YY_FATAL_ERROR( "fatal error - scanner input buffer overflow" );

	/* read in more data */
	YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
		  yy_n_chars, num_to_read );
	}

    if ( yy_n_chars == 0 )
	{
	if ( number_to_move - YY_MORE_ADJ == 1 )
	    {
	    ret_val = EOB_ACT_END_OF_FILE;
	    yy_current_buffer->yy_eof_status = EOF_DONE;
	    }

	else
	    {
	    ret_val = EOB_ACT_LAST_MATCH;
	    yy_current_buffer->yy_eof_status = EOF_PENDING;
	    }
	}

    else
	ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    /* yytext begins at the second character in yy_ch_buf; the first
     * character is the one which preceded it before reading in the latest
     * buffer; it needs to be kept around in case it's a newline, so
     * yy_get_previous_state() will have with '^' rules active
     */

    yytext = &yy_current_buffer->yy_ch_buf[1];

    return ( ret_val );
    }


/* yy_get_previous_state - get the state just before the EOB char was reached
 *
 * synopsis
 *     yy_state_type yy_get_previous_state();
 */

static yy_state_type yy_get_previous_state()

    {
    register yy_state_type yy_current_state;
    register YY_CHAR *yy_cp;

    yy_current_state = yy_start;
    yy_state_ptr = yy_state_buf;
    *yy_state_ptr++ = yy_current_state;

    for ( yy_cp = yytext + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
	{
	register YY_CHAR yy_c = (*yy_cp ? yy_ec[*yy_cp] : 1);
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	    {
	    yy_current_state = yy_def[yy_current_state];
	    if ( yy_current_state >= 366 )
		yy_c = yy_meta[yy_c];
	    }
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	*yy_state_ptr++ = yy_current_state;
	}

    return ( yy_current_state );
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *     next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( register yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
register yy_state_type yy_current_state;
#endif

    {
    register int yy_is_jam;

    register YY_CHAR yy_c = 1;
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	{
	yy_current_state = yy_def[yy_current_state];
	if ( yy_current_state >= 366 )
	    yy_c = yy_meta[yy_c];
	}
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    *yy_state_ptr++ = yy_current_state;
    yy_is_jam = (yy_current_state == 365);

    return ( yy_is_jam ? 0 : yy_current_state );
    }


#ifdef YY_USE_PROTOS
static void yyunput( YY_CHAR c, register YY_CHAR *yy_bp )
#else
static void yyunput( c, yy_bp )
YY_CHAR c;
register YY_CHAR *yy_bp;
#endif

    {
    register YY_CHAR *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yytext */
    *yy_cp = yy_hold_char;

    if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
	{ /* need to shift things up to make room */
	register int number_to_move = yy_n_chars + 2; /* +2 for EOB chars */
	register YY_CHAR *dest =
	    &yy_current_buffer->yy_ch_buf[yy_current_buffer->yy_buf_size + 2];
	register YY_CHAR *source =
	    &yy_current_buffer->yy_ch_buf[number_to_move];

	while ( source > yy_current_buffer->yy_ch_buf )
	    *--dest = *--source;

	yy_cp += dest - source;
	yy_bp += dest - source;
	yy_n_chars = yy_current_buffer->yy_buf_size;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
	    YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}

    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
	yy_cp[-2] = '\n';

    *--yy_cp = c;

    /* note: the formal parameter *must* be called "yy_bp" for this
     *       macro to now work correctly
     */
    YY_DO_BEFORE_ACTION; /* set up yytext again */
    }


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif

    {
    int c;
    YY_CHAR *yy_cp = yy_c_buf_p;

    *yy_cp = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
	{
	/* yy_c_buf_p now points to the character we want to return.
	 * If this occurs *before* the EOB characters, then it's a
	 * valid NUL; if not, then we've hit the end of the buffer.
	 */
	if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
	    /* this was really a NUL */
	    *yy_c_buf_p = '\0';

	else
	    { /* need more input */
	    yytext = yy_c_buf_p;
	    ++yy_c_buf_p;

	    switch ( yy_get_next_buffer() )
		{
		case EOB_ACT_END_OF_FILE:
		    {
		    if ( yywrap() )
			{
			yy_c_buf_p = yytext + YY_MORE_ADJ;
			return ( EOF );
			}

		    YY_NEW_FILE;

#ifdef __cplusplus
		    return ( yyinput() );
#else
		    return ( input() );
#endif
		    }
		    break;

		case EOB_ACT_CONTINUE_SCAN:
		    yy_c_buf_p = yytext + YY_MORE_ADJ;
		    break;

		case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
		    YY_FATAL_ERROR( "unexpected last match in yyinput()" );
#else
		    YY_FATAL_ERROR( "unexpected last match in input()" );
#endif
		}
	    }
	}

    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;

    return ( c );
    }


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif

    {
    yy_init_buffer( yy_current_buffer, input_file );
    yy_load_buffer_state();
    }


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif

    {
    if ( yy_current_buffer == new_buffer )
	return;

    if ( yy_current_buffer )
	{
	/* flush out information for old buffer */
	*yy_c_buf_p = yy_hold_char;
	yy_current_buffer->yy_buf_pos = yy_c_buf_p;
	yy_current_buffer->yy_n_chars = yy_n_chars;
	}

    yy_current_buffer = new_buffer;
    yy_load_buffer_state();

    /* we don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif

    {
    yy_n_chars = yy_current_buffer->yy_n_chars;
    yytext = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
    yyin = yy_current_buffer->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif

    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) malloc( sizeof( struct yy_buffer_state ) );

    if ( ! b )
	YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (YY_CHAR *) malloc( (unsigned) (b->yy_buf_size + 2) );

    if ( ! b->yy_ch_buf )
	YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    yy_init_buffer( b, file );

    return ( b );
    }


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif

    {
    if ( b == yy_current_buffer )
	yy_current_buffer = (YY_BUFFER_STATE) 0;

    free( (char *) b->yy_ch_buf );
    free( (char *) b );
    }


#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif

    {
    b->yy_input_file = file;

    /* we put in the '\n' and start reading from [1] so that an
     * initial match-at-newline will be true.
     */

    b->yy_ch_buf[0] = '\n';
    b->yy_n_chars = 1;

    /* we always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[1];

    b->yy_eof_status = EOF_NOT_SEEN;
    }
# line 761 "lex.l"


/*
 * GAG.
 *
 * If we're reading a matrix and the next character is '[', make sure
 * that we insert a comma ahead of it.
 */
int
do_comma_insert_check (void)
{
  int tmp_len = yyleng;
  int c = yyinput ();
  do_comma_insert = (braceflag && c == '[');
  return tmp_len;
}

/*
 * Fix things up for errors or interrupts.
 */
void
reset_parser (void)
{
  BEGIN 0;
  promptflag = 1;
  doing_set = 0;
  braceflag = 0;
  maybe_screwed = 0;
  maybe_screwed_again = 0;
  looping = 0;
  iffing = 0;
  ml.clear ();
  mlnm.clear ();
  defining_func = 0;
  curr_sym_tab = top_level_sym_tab;
  get_input_from_eval_string = 0;
  quote_is_transpose = 0;
  current_input_column = 0;
  do_comma_insert = 0;
  plotting = 0;
  in_plot_range = 0;
  in_plot_using = 0;
  in_plot_style = 0;
  cant_be_identifier = 0;
  convert_spaces_to_comma = 1;
  beginning_of_function = 0;
  in_brace_or_paren.clear ();
  yyrestart (stdin);
}

static void
do_string_escapes (char *s)
{
  char *p1 = s;
  char *p2 = s;
  while (*p2 != '\0')
    {
      if (*p2 == '\\' && *(p2+1) != '\0')
	{
	  switch (*++p2)
	    {
	    case 'a':
	      *p1 = '\a';
	      break;
	    case 'b': // backspace
	      *p1 = '\b';
	      break;
	    case 'f': // formfeed
	      *p1 = '\f';
	      break;
	    case 'n': // newline
	      *p1 = '\n';
	      break;
	    case 'r': // carriage return
	      *p1 = '\r';
	      break;
	    case 't': // horizontal tab
	      *p1 = '\t';
	      break;
	    case 'v': // vertical tab
	      *p1 = '\v';
	      break;
	    case '\\': // backslash
	      *p1 = '\\';
	      break;
	    case '\'': // quote
	      *p1 = '\'';
	      break;
	    case '"': // double quote
	      *p1 = '"';
	      break;
	    default:
          warning ("unrecognized escape sequence `\\%c' -- converting to `%c'",
		   *p2, *p2);
	      *p1 = *p2;
	      break;
	    }
	}
      else if (*p2 == '\'' && *(p2+1) == '\'')
	{
	  *p1 = '\'';
	  p2++;
	}
      else
	{
	  *p1 = *p2;
	}

      p1++;
      p2++;
    }

  *p1 = '\0';
}

static void
fixup_column_count (char *s)
{
  char c;
  while ((c = *s++) != '\0')
    {
      if (c == '\n')
	  current_input_column = 0;
      else
	current_input_column++;
    }
}

#ifdef yywrap
#undef yywrap
#endif
int
yywrap (void)
{
  return 0;
}

/*
 * Tell us all what the current buffer is.
 */
YY_BUFFER_STATE
current_buffer (void)
{
  return YY_CURRENT_BUFFER;
}

/*
 * Create a new buffer.
 */
YY_BUFFER_STATE
create_buffer (FILE *f)
{
  return yy_create_buffer (f, YY_BUF_SIZE);
}

/*
 * Start reading a new buffer.
 */
void
switch_to_buffer (YY_BUFFER_STATE buf)
{
  yy_switch_to_buffer (buf);
}

/*
 * Delete a buffer.
 */
void
delete_buffer (YY_BUFFER_STATE buf)
{
  yy_delete_buffer (buf);
}

/*
 * Restore a buffer (for unwind-prot).
 */
void
restore_input_buffer (void *buf)
{
  switch_to_buffer ((YY_BUFFER_STATE) buf);
}

/*
 * Delete a buffer (for unwind-prot).
 */
void
delete_input_buffer (void *buf)
{
  delete_buffer ((YY_BUFFER_STATE) buf);
}

static char *plot_styles[] = 
  {
    "dots",
    "dots",
    "errorbars",
    "impulses",
    "lines",
    "linespoints",
    "points",
    (char *) NULL,
  };

static char *
plot_style_token (char *s)
{
  char **tmp = plot_styles;
  while (*tmp != (char *) NULL)
    {
      if (almost_match (*tmp, s))
	return *tmp;

      tmp++;
    }

  return (char *) NULL;
}

static int
is_plot_keyword (char *s)
{
  if (almost_match ("title", s))
    return TITLE;
  else if (almost_match ("using", s))
    { in_plot_using = 1; return USING; }
  else if (almost_match ("with", s))
    { in_plot_style = 1; return WITH; }
  else
    return 0;
}

/*
 * Handle keywords.  Could probably be more efficient...
 */
static int
is_keyword (char *s)
{
  if (plotting && in_plot_style)
    {
      char *sty = plot_style_token (s);
      if (sty != (char *) NULL)
	{
	  in_plot_style = 0;
	  yylval.string = strsave (sty);
	  return STYLE;
	}
    }

  int end_found = 0;
  if (strcmp ("break", s) == 0)
    return BREAK;
  else if (strcmp ("continue", s) == 0)
    return CONTINUE;
  else if (strcmp ("else", s) == 0)
    { return ELSE; }
  else if (strcmp ("elseif", s) == 0)
    { return ELSEIF; }
  else if (strcmp ("end", s) == 0)
    { end_found = 1; yylval.ettype = simple_end; }
  else if (strcmp ("endfor", s) == 0)
    { end_found = 1; yylval.ettype = for_end; }
  else if (strcmp ("endfunction", s) == 0)
    { end_found = 1; yylval.ettype = function_end; }
  else if (strcmp ("endif", s) == 0)
    { end_found = 1; yylval.ettype = if_end; }
  else if (strcmp ("endwhile", s) == 0)
    { end_found = 1; yylval.ettype = while_end; }
  else if (strcmp ("for", s) == 0)
    { promptflag--; looping++; return FOR; }
  else if (strcmp ("function", s) == 0)
    {
      if (defining_func)
	{
	  error ("sorry, nested functions are a no-no...");
	  jump_to_top_level ();
	}
      else
	{
	  tmp_local_sym_tab = new symbol_table ();
	  curr_sym_tab = tmp_local_sym_tab;
	  defining_func = 1;
	  promptflag--;
	  beginning_of_function = 1;
	  help_buf[0] = '\0';
	  return FCN;
	}
    }
  else if (strcmp ("global", s) == 0)
    return GLOBAL;
  else if (strcmp ("gplot", s) == 0)
    { plotting = 1; yylval.pttype = two_dee; return PLOT; }
  else if (strcmp ("gsplot", s) == 0)
    { plotting = 1; yylval.pttype = three_dee; return PLOT; }
  else if (strcmp ("if", s) == 0)
    { iffing++; promptflag--; return IF; }
  else if (strcmp ("return", s) == 0)
    return FUNC_RET;
  else if (strcmp ("while", s) == 0)
    { promptflag--; looping++; return WHILE; }

  if (end_found)
    {
      if (!defining_func && !looping)
	promptflag++;
      return END;
    }

  return 0;
}

static symbol_record *
lookup_identifier (char *name)
{
  symbol_record *gsr = global_sym_tab->lookup (name, 0, 0);

  if (curr_sym_tab == top_level_sym_tab && gsr != (symbol_record *) NULL)
    return gsr;

  return curr_sym_tab->lookup (name, 1, 0);
}

static void
grab_help_text (void)
{
  int max_len = HELP_BUF_LENGTH - 1;

  int in_comment = 1;
  int len = 0;
  int c;

  while ((c = yyinput ()) != EOF)
    {
      if (in_comment)
	{
	  help_buf[len++] = c;
	  if (c == '\n')
	    in_comment = 0;
	}
      else
	{
	  switch (c)
	    {
	    case '%':
	    case '#':
	      in_comment = 1;
	    case ' ':
	    case '\t':
	      break;
	    default:
	      goto done;
	    }
	}

      if (len > max_len)
	{
	  message ("grab_help_text",
		   "buffer overflow after caching %d characters",
		   max_len);

	  goto done;
	}
    }

 done:

// Make sure there's an end of line so yylex sees an end to the
// comment immediately.

  yyunput (c, yytext);
  if (c != '\n')
    yyunput ('\n', yytext);

  help_buf[len] =  '\0';
}

static int
match_any (char c, char *s)
{
  char tmp;
  while ((tmp = *s++) != '\0')
    {
      if (c == tmp)
	return 1;
    }
  return 0;
}

static int
looks_like_bin_op (int spc_prev, int spc_next)
{
  return ((spc_prev && spc_next) || ! (spc_prev || spc_next));
}

static int
next_char_is_space (void)
{
  int c = yyinput ();
  yyunput (c, yytext);
  return (c == ' ' || c == '\t');
}

static int
next_token_is_postfix_unary_op (int spc_prev, char *yytext)
{
  int un_op = 0;

  int c0 = yyinput ();
  int c1 = yyinput ();

  yyunput (c1, yytext);
  yyunput (c0, yytext);

  int transpose = (c0 == '.' && c1 == '\'');
  int hermitian = (c0 == '\'');

  un_op = (transpose || (hermitian && ! spc_prev));

  return un_op;
}

static int
next_token_is_bin_op (int spc_prev, char *yytext)
{
  int bin_op = 0;
  int spc_next = 0;

  int c0 = yyinput ();
  int c1 = yyinput ();

  switch (c0)
    {
    case '+':  case '-':  case '/':
    case ':':  case '\\': case '^':
      spc_next = (c1 == ' ' || c1 == '\t');
      break;

    case '&':
      if (c1 == '&')
	spc_next = next_char_is_space ();
      else
	spc_next = (c1 == ' ' || c1 == '\t');
      break;

    case '*':
      if (c1 == '*')
	spc_next = next_char_is_space ();
      else
	spc_next = (c1 == ' ' || c1 == '\t');
      break;
	
    case '|':
      if (c1 == '|')
	spc_next = next_char_is_space ();
      else
	spc_next = (c1 == ' ' || c1 == '\t');
      break;

    case '<':
      if (c1 == '=' || c1 == '>')
	spc_next = next_char_is_space ();
      else
	spc_next = (c1 == ' ' || c1 == '\t');
      break;

    case '>':
      if (c1 == '=')
	spc_next = next_char_is_space ();
      else
	spc_next = (c1 == ' ' || c1 == '\t');
      break;

    case '~':  case '!':  case '=':
      if (c1 == '=')
	spc_next = next_char_is_space ();
      else
	goto done;
      break;

    case '.':
      if (c1 == '*')
	{
	  int c2 = yyinput ();
	  if (c2 == '*')
	    spc_next = next_char_is_space ();
	  else
	    spc_next = (c2 == ' ' || c2 == '\t');
	  yyunput (c2, yytext);
	}
      else if (c1 == '/' || c1 == '\\' || c1 == '^')
	spc_next = next_char_is_space ();
      else
	goto done;
      break;

    default:
      goto done;
    }

  bin_op = looks_like_bin_op (spc_prev, spc_next);

 done:
  yyunput (c1, yytext);
  yyunput (c0, yytext);

  return bin_op;
}

char *
strip_trailing_whitespace (char *s)
{
  char *retval = strsave (s);

  char *t = strchr (retval, ' ');
  if (t != (char *) NULL)
    *t = '\0';

  t = strchr (retval, '\t');
  if (t != (char *) NULL)
    *t = '\0';

  return retval;
}

void
check_for_garbage_after_fcn_def (void)
{
// By making a newline be the next character to be read, we will force
// the parser to return after reading the function.  Calling yyunput
// with EOF seems not to work...

  int in_comment = 0;
  int lineno = input_line_number;
  int c;
  while ((c = yyinput ()) != EOF)
    {
      switch (c)
	{
	case ' ':
	case '\t':
	case ';':
	case ',':
	  break;
	case '\n':
	  if (in_comment)
	    in_comment = 0;
	  break;
	case '%':
	case '#':
	  in_comment = 1;
	  break;
	default:
	  if (in_comment)
	    break;
	  else
	    {
	      warning ("ignoring trailing garbage after end of function\n\
         near line %d of file `%s.m'", lineno, curr_m_file_name);
	      
	      yyunput ('\n', yytext);
	      return;
	    }
	}
    }
  yyunput ('\n', yytext);
}

/* Maybe someday...

"+="		return ADD_EQ;
"-="		return SUB_EQ;
"*="		return MUL_EQ;
"/="		return DIV_EQ;
"\\="		return LEFTDIV_EQ;
".+="		return ADD_EQ;
".-="		return SUB_EQ;
".*="		return EMUL_EQ;
"./="		return EDIV_EQ;
".\\="		return ELEFTDIV_EQ;

*/
