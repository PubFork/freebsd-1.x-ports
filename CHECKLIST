The following guidelines have been adopted in an attempt to keep the
contents of the ports collection reasonably sane, and in a semblance of
order.  If you are adding new ports, or modifying old ones, please take
a few minutes to read this checklist!  It will potentially save a lot of
people a lot of grief later on!  If you have any questions, or ammendments
to this file, please send them to me - jkh@freefall.cdrom.com

					- Jordan

-------------------------------------------------------------------------


PORTS CONSTRUCTION:

1.  All ports have a VERSION file giving some idea as to what version the
    package is.


2.  All ports have at least a README file, even if they're small.
    _Something_ has to identify the contents, and by convention that's a
    README, LIESEMICH, LESEMOI, *SOMETHING* file.  Just so it's there,
    and hopefully in english (not my choice, more of an international
    convention for docs).


3.  All ports have a top level Makefile, even if all it does is hand control
    down to a submakefile.


4.  All ports top-level Makefiles support the following targets:

		all:		Build entire package
		clean:		Clean entire package
		install:	Install entire package
		pkg:		[see below]

    Any or all of these targets can be no-ops, but they must at least exist
    and not cause make to fall over.


PACKAGING:

4a. [Optional] All ports have a `pkg' target that builds, at the minimum,
    a source package for the port.  I'm not going to get pedantic about
    this one and say it's a hard-and-fast requirement, but it sure will
    help ensure that your port gets made generally available all throughout
    its natural lifecycle (if it's hard to package it every time it's updated,
    you can bet that the package won't get updated and the package form that
    most people end up seeing will be out-of-date).

    For a good example of a port that builds both "bin" (installed)
    and "src" packages, look at zircon.  It's really quite simple, folks!

    Source packages should always install themselves into the original
    /usr/ports location.  Binary packages should follow the rules below.


INSTALLATION:

5.  If a port is a piece of non-essential GNU software, it should install
    into the /usr/gnu hierarchy.  This is because GNU utilities happen
    to be large, frequently inter-dependent, and licensed differently than
    most other pieces of software.  If something is not officially from the
    GNU project, but is being released under the GPL and "generally considered"
    to be a de-facto part of GNU, then it should also go in /usr/gnu though
    the lines there are a bit more vague.

    If a port is an out-and-out game, it should go into /usr/games.  This
    makes it easy to blindly nuke the entire /usr/games hierarchy on machines
    where space is tight or the user community wears suits.

    If a port is an X utility that is Imakefile based, it is OK to distribute
    default Makefiles that install it into /usr/X386/{bin,lib,...} since by
    default an Imakefile will generate a Makefile that does this anyway.
    Some argue that /usr/X386 should be kept "pure" XFree86, but in practice
    this tends to be impossible anyway due to the defaults chosen by the
    imake config system.

    All other ports go into /usr/local unless they have a seriously good
    reason not to.

6.  Man pages go correspondingly into /usr/gnu/man/... or /usr/local/man/...
    as you'd expect.

    Formatted texinfo files are a bit more difficult, since they need to be
    referenced from a top-level `dir' file and not all info browsers have
    standardised on the INFOPATH environment variable, thus not being likely
    to find a `/usr/local/info' location for other types of info files.
    For this reason, and that of general historical convention, they should
    generally be combined into /usr/gnu/info regardless of origin.
