
			User Suggestions
********************
I tried to understand your RE-replace but I got messed up.
First it is totally different from  Replace  but I do not see why.
If there were something similar to  searchSpans (but with RE-searching)
one could generate a new  Piece  for each replace and handle it
very similar to  Replace. The function  re_comp seems OK and
re_exec either except the usage of  getCachedFileByte; does it
recognize if characters have been inserted just before?

The main bug with RE-Replace:
Assume
abc def abc ghi
and replace  abc by  ABCD, then the first replace is OK but research
does not recognize that the inserted string was 1 character longer so
it set the selection to  ' ab' instead of  'abc' in the second case.

Furthermore the usage of  insertChar seems to be very inefficient
compared to the Replace command.
********************************
*** Change "Redraw" to allow partial screen updates
*** Find places where I am redrawing too much of the screen
*** "Save as" should change the file name.
*** Fix version number in ALL places
*** xxx
When I press using the left mouse button on MoveW the window does not
move to the upper left.  When I use the right button it does move to
the upper right of my window. When I use the middle button, the window
moves to the lower middle right of my window.  That left button
though doesnt move the window anywhere.

a. the readme has a step 2 referencing a SYSV variable, but no such
variable appears in the makefile or config.h that I got.

b. I was not able to do just a make - I had to do a make Makefiles so
that the lower Imakefile's were processed.

c. tclLib/Imakefile refers to a init.tcl, but no such file was in the
copy that I got from cs.unm.edu.

d. tclLib/Imakefile has a variable called POINTLIB.  I think the
references should have been to POINT_DIR ?  Otherwise, the user has to
edit that variable.

e.  When I start up point without a file name, I get a window just a
little narrower than the MENU/DIRS/New Browser trio of buttons.  It
would be nice if instead I saw an intro to point...

1. To submit items to harbor, you can either ftp them into harbor's
/incoming directory and send email to tcl-archive@ecn.purdue.edu (TCL
contributed software archive maintenance)

or just send the item in shar format to that address.   The former is
preferred.


*** xxx
I like the idea of "run csh in window", but I've never really found a
"good" way to use it.
Do you use it ? If yes, how and what for ?

The problems I've got are :
- only typed caracters go to the shell (you cannot copy-paste)
- programs that move the cursor do not work correctly (for example
  zsh, you can't use Control-b to bakspace)

*** xxx
1st) Setting the number of buffers to 1000 crashes point when quitting
      (why not, my machine has several Mbyte memory)

2nd) Your documentation claims there is an ``MoveFromHereMode''.
       Binding this to a function key has no effect.
       Using your key remap menu, there is a command ``MoveToHereMode''
       Using this (it displays ``extract mode'' correctly),
       but using it again (to perform the action) it constantly
       crashes point.

3rd)   How can I convince Point to make backup files? I set the
       variables backupDepth to 2 and backupNameFormat to
       %D/bak/%N.%v
       but I have never seen a backup file nor a  `bak`-directory?

*** xxx
I have come across one more tiny question about Point.
My current is installation (Point1.60 plus tk3.2).
With the 1.58 Version plus the tk3.0 Version double clicking a filename
in the browser let me position the window.
As far as I understood the Tcl-files the geometry is "location1"
when I use the left mouse button.
By observation I found out that if I do not specify the position (just the size)
in the location parameter I can do the positioning with the mouse cursor.
With the current installation this is true if I do not specify the
position in "location1" and when I use the MoveWindow commands but n o t
when I use a double click with the left mouse button on a file name
in the browser list.
So I do not fully understand the position of text windows.
I would like to position the text window myself when I create it.

*** xxx
The second feature I wish for is a multiple selection feature on the
browser window.  In particular, what I want to do is delete a set of
files in a directory.  Typically, they are scattered over the 
directory.  It is especially clumsy if the directory is longer than
the browser window.  Then I have to select the file, select "delete
file", wait for the repainting of the browser window, scroll to the
next file and then repeat the process.  I would like to just select
many files then hit the delete.

*** xxx
0st)  Have two browsers open (initially on different directories)
      then at some time they change so that both point to the same
      directory. This is espescially bad if one directory contains the
      old versions and the other the new ones.

1st) Setting the number of buffers to 1000 crashes point when quitting
      (why not, my machine has several Mbyte memory)

2nd) Your documentation claims there is an ``MoveFromHereMode''.
       Binding this to a function key has no effect.
       Using your key remap menu, there is a command ``MoveToHereMode''
       Using this (it displays ``extract mode'' correctly),
       but using it again (to perform the action) it constantly
       crashes point.

3rd)   How can I convince Point to make backup files? I set the
       variables backupDepth to 2 and backupNameFormat to
       %D/bak/%N.%v
       but I have never seen a backup file nor a  `bak`-directory?

*** xxx
1: I defined another button on the top bar (FILE EDIT etc), to toggle between
        insert and overtype mode; I often switch between these modes. I used
        set option overType 1 and 0 for left and right mouse button. It would
        be nicer to have a toggle. Also, I put a message next to the filename,
        but it would be nicer if one could use a different cursor for each, e.g.
        KEDIT uses rev.video box for insert, underline for overwrite.
2: Tiny one: the "about point ..." doesn't really belong in the FILE menu,
rather in the browser MENU.

*** xxx
This machine here mystifies me: today the ToggleOvertype works just fine (on
Insert key as well as menu bar), I have no clue what went wrong yesterday.
After sending you mail I was wondering whether those 9x15 etc fonts were 7
bit: I found plenty of other fonts that have those German characters. I still
have a problem with the right Alt-key: e.g., to get [ on the German keyboard
you need to hit right-Alt-8, but it types a tilde as soon as you press
right-Alt (and then [ if keep the altkey down when hitting 8). xev gives me
keysym 0xff7e, Mode_switch: any idea? 
One more little problem: I have difficulty copying from an aixterm to a point
window (making a selection then using right-move mmb). On the other hand,
I have no problem using the x-selection in, say, a string search window by
clicking the mmb???

*** xxx
*** xxx
*** xxx
*** xxx


			High Priority

*** Figure out how to get the wm to request that the window be placed.
*** Add a -browser option to pt
*** Try to get point working with tvtwm.
*** Release the GCs when you close a window -- avoid leaking memory.
*** Select several lines, Zz, green squares persist.
*** make "insertReplaces" work for pasting as well as typing insertions,
	"insert X selection", "insert from scrap", "CopySelToMouse",
	"MoveSelToMouse" and "copy to here"
	*** Make the right margin work for this also
	*** Make insertion in pty windows work this way also.
*** Selection screws up when you go in front of the selection.
	Make this work better
*** number of backups =1 and file.0 exists it is not updated
	"- When I save a file with nb backups = 1, if file.0 exists it is not
	updated (so there is no backup)"
*** When I quit Point with the option "And discard edits" after
	invokation with a non-existent file, a file with this name and the
	length zero is created.
*** Fix autorepeat in scrolling --- it is screwed up!
*** Cursor disappears at EOF sometimes.
*** the management of lines longer than the screen is still not perfect :
  you cannot move past the end of the screen using the arrow keys, and
  the screen is not updated when you go to the end of a line (only that
  line moves)
*** add an option to search and replace that will determine whether the
	replacing begins at the selection or the beginning of the file.


			Medium Priority

*** Get backupByCopy working
*** Autosave: save to #file#, make it an option mode not a command
*** Close file without saving under #file#.  Do like emacs.
*** Search for last RE doesn't work right
*** Handle the problem of not being about to write in a directory to make
	a backup file.  Try: startup dir, home dir, /usr/tmp then /tmp maybe.
*** Make inserting characters more programmable.  Right now the backspace
	and delete Ascii characters are recognized directly in insChar.
	This should be off in the tcl.
*** Prevent multiple copies of files.  Maybe add a busy indication.  Do
	this by polling to see if the window is mapped.


			Low Priority

*** Check for monchrome screens and change colors to black and white.
*** Add a format conversion in text window titles to display the line
	number of the first line of the selection (if the selection is
	in that window).  --think about this--
*** Make it easy to reprogram the meaning of the mouse keys.  --- this in
	preparation for emulating emacs ml files.
*** Creating windows using a virtual desktop -- it should always be visible.
	Idea: "taking over" a window.
*** Make sure tclIndex gets set if people move the location of the tcl
	or tk files.
*** Check out DefineCursor. Does it work?
*** Put how to build pt in the Imakefile.
*** in tkMenu.c it references ../tk2.1/bitmaps/grey.  Fix this to look
	in the tk distribution directory.
*** Review and expand "help"
*** splits on a file
*** Put in searching a browser with the keyboard (browser.c).  The code is
	there but maybe it doesn't work completely?
*** Put in self-organizing lists in the hash chains (buffers.c).  The code is
	there but maybe it doesn't work completely?
*** Make it more insensitive to tcl bugs.  IDEA: read in the standard files
	and then the changed files so there is always a standard version of
	things defined.
*** Explain in the manual how to map special keys (using xev).
*** Explain in the manual how to change the mouse menus
*** Put in searching a browser with the keyboard (browser.c).  The code is
	there but maybe it doesn't work completely?
*** Be sure to mention ctags support in the manual and other docs
