;;;; Initialisation for SLIB for Gambit        -*-scheme-*-
;;; Copyright (C) 1991, 1992, 1993 Aubrey Jaffer
;;; Updated 1992 February 1 for Gambit v1.71 -- by Ken Dickey

(define (SOFTWARE-TYPE) 'UNIX) ; 'Amiga 'Mac ... ?

;;; *features* should be set to a list of symbols describing features
;;; of this implementation.  See Template.scm for the list of feature
;;; names.

(define *features*
      '(
	rev4-report
	ieee-p1178
	sicp
	rev4-optional-procedures
	rev3-procedures
	rev2-procedures
	multiarg/and-
	multiarg-apply
	object-hash
	rationalize
	delay
	with-file
	transcript
	char-ready?
	eval
	ieee-floating-point
	full-continuation
	system
	))

;;; (OUTPUT-PORT-WIDTH <port>)
(define (output-port-width . arg) 79)

;;; (OUTPUT-PORT-HEIGHT <port>)
(define (output-port-height . arg) 24)

;;; (CURRENT-ERROR-PORT)
(define current-error-port
  (let ((port (current-output-port)))
    (lambda () port)))

;;; (TMPNAM) makes a temporary file name.
(define tmpnam
  (let ((cntr 100))
    (lambda () (set! cntr (+ 1 cntr))
	    (let ((tmp (string-append "slib_" (number->string cntr))))
	      (if (file-exists? tmp) (tmpnam) tmp)))))

;;; FORCE-OUTPUT flushes any pending output on optional arg output port
;;; use this definition if your system doesn't have such a procedure.
(define (force-output . arg) #t)

;;; CHAR-CODE-LIMIT is one greater than the largest integer which can
;;; be returned by CHAR->INTEGER.
(define char-code-limit 256)

;; MOST-POSITIVE-FIXNUM is used in modular.scm
(define most-positive-fixnum #x1FFFFFFF)  ;; 3-bit tag for 68K

;;; If your implementation provides eval, SLIB:EVAL is single argument
;;; eval using the top-level (user) environment.
(define SLIB:EVAL ##eval-global);; Gambit v1.71

;;; If your implementation provides R4RS macros:
;(define macro:eval slib:eval)
;(define macro:load load)

;; define an error procedure for the library
(define SLIB:ERROR error)

(define SYSTEM ##unix-system)	;; obviously for Unix

;; define these as appropriate for your system.
(define slib:tab (integer->char 9))
(define slib:form-feed (integer->char 12))

(define (1+ n) (+ n 1))
(define (-1+ n) (- n 1))
(define 1- -1+)

;;; (implementation-vicinity) should be defined to be the pathname of
;;; the directory where any auxillary files to your Scheme
;;; implementation reside.

(define (implementation-vicinity)
  (case (software-type)
    ((UNIX)	"/usr/local/lib/scheme/")
    ((VMS)	"scheme$src:")
    ((AMIGA)	"dh0:scm/")
    ((MACOS)	"::Scheme Code:")))

;;; (library-vicinity) should be defined to be the pathname of the
;;; directory where files of Scheme library functions reside.

(define library-vicinity
  (let ((library-path
	 (or (and (memq 'getenv *features*)
		  (getenv "SCHEME_LIBRARY_PATH"))
;;; Uses this path if your scheme does not support GETENV.
	     (case (software-type)
	       ((UNIX) "/usr/local/lib/slib/")
	       ((AMIGA)	"dh0:scm/Library/")
	       ((VMS) "lib$scheme:")
	       ((MSDOS) "C:\\SLIB\\")
	       (else "")))))
    (lambda () library-path)))

(define (scheme-file-suffix) ".scm")

(define in-vicinity string-append)

(load (in-vicinity (library-vicinity) "require" (scheme-file-suffx)))
;;;			--- E O F ---
