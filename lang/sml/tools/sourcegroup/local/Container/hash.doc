(* Copyright (c) 1992 by Carnegie Mellon University *)

(* Gene Rollins (rollins+@cs.cmu.edu)
   School of Computer Science, Carnegie-Mellon Univ, Pittsburgh, PA *)

(* This hash table module defines operations that expect the caller to supply
both the key and the hash value (the result of applying the hash function to
the key).  One can create a hash table to map any (domain) type to any (range)
type, if at table creation time, one supplies an equality operation on the
domain type, and an empty list whose elements are the range type.  *)

(* fun create (equality :'1a * '1a -> bool) (table'size :int)
	      (sample'value'list :'1b list) :('1a,'1b) table
Create a hash table mapping 'a to 'b. Pass an empty list for the
sample'value'list so you don't acutally have to create a sample'value. *)

(* fun createDefault (sample'value'list :'1b list) :(string,'1b) table
Create a hash table mapping string to 'b; use defaultSize and defaultEqual. *)

(* val defaultSize = 97 *)

(* fun defaultEqual ((x :string), (y :string)) :bool
Regular string equality (x=y). *)

(* fun enter (hash'table :('a,'b) table) ((key,hash):'a*int) (value:'b)
Alter hash'table to map key to value. *)

(* fun remove (hash'table :('a,'b) table) ((key,hash):'a*int)
Remove key from the mapping. *)

(* fun lookup (hash'table :('a,'b) table) ((key,hash):'a*int) :'b option
Return the value that hash'table maps key into. *)

(* fun lookup' (hash'table :('a,'b) table) ((key,hash):'a*int) :'b
Return the value that hash'table maps key into.
If key has no entry in hash'table, raise NotFound *)

(* fun print (hash'table :('a,'b) table)
             (print'key :'a -> unit) (print'value :'b -> unit) :unit
Print the hash'table mapping, including bucket indexes, keys, hash values,
and range values. *)

(* fun scan (hash'table :('a,'b) table) (operation :('a*int)->'b->unit) :unit
Apply operation to every entry in the table.  Arguments to operation are
key, hash value, domain value. *)

(* fun fold (hash'table :('a, 'b) table)
            (operation :('a*int)->'b->'g->'g) (init :'g) :'g
Apply operation to every entry in the table and an accumulated value.  The
accumulated value is initially init.  The result of applying operation
to one table entry is passed as the accumulated value for the next
application of operation.  The result of the last application of
operation is returned as the result of fold. *)

(* fun scanUpdate (hash'table:('a,'b) table) (operation:->('a*int)->'b->'b)
Apply operation to every entry in hash'table, and replace the domain value
for the entry with the result of operation. *)

(* fun eliminate (hash'table:('a,'b) table) (predicate:('a*int)->'b->bool)
Apply predicate to every entry in hash'table.  If the predicate is true,
then remove the entry from the table. *)

(* fun bucketLengths (hash'table :('a,'b) table) (maxlen :int) :int array
Creates an array with domain 0 through maxlen.  Counts the number of buckets in
hash'table of every length 0 through maxlen-1, putting those counts into
appropriate slots in the result array.  Also counts the number of buckets whose
length is maxlen or greater and puts that count into the maxlen slot of the
result array. *)
