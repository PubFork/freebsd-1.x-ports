Using a question/answer format, this file provides information about
installing and using GNU Emacs interface with the Scheme->C run time
interpreter.

The questions are:
[1] What is this interface about?
[2] What do I need to have?
[3] What do I need to do?
[5] How do I invoke sci in Emacs?
[6] What is Scheme->C mode?
[7] How do I know all the functionalities of Scheme->C mode?
[8] How can I customize Scheme->C mode?



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[1] What is this interface about?
It's about running Scheme->C interpreter as a sub-process in GNU Emacs.
This interface is the result of adapting the interface package written by
Olin Shivers of CMU to the Scheme->C environment.  With the interface, you
can type 'M-x sci <RET>' in Emacs to start up the interpreter.  Thereafter,
running sci is like running it from shell, however, besides having the
advantage of being inside Emacs, there's additional neat commands like
yanking previous input, search thru history, flush output, sending Scheme
definitions from another buffer, etc.  

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[2] What do I need to have?
GNU Emacs, the emacs-lisp file s2c-gnuemacs.el that comes with Scheme->C
release, and your .emacs file (if you've one).

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[3] What do I need to do?
First, decide where s2c-gnuemacs.el is going to live. It can be anywhere
(your home directory, for instance), but you may want to consider putting
it together with the standard GNU Emacs lisp library files, so everyone can
share it.

Put s2c-gnuemacs.el there and start up GNU Emacs.  In Emacs, use 'M-x
byte-compile' to compile this file.  This will produce s2c-gnuemacs.elc.

Then, edit your own .emacs file, add the following lines:
	(setq load-path 
	      (cons (expand-file-name "<dir where s2c-gnuemacs.elc lives>")
	            load-path))

The above step is optional if you've put the interface file in a standard
load-path directory.

To enable 'M-x sci' to work, add also the following lines in .emacs:
(autoload 'sci "s2c-gnuemacs"
          "Run an inferior Scheme->C process." t)

That's it. 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[5] How do I invoke sci in Emacs?
	M-x sci 	starts up Scheme->C interpreter and installs the 
	                appropriate keyboard bindings.
	C-u M-x sci	like M-x sci, but also asks for additional 
			arguments to sci.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[6] What is Scheme->C mode?
It is a new mode (like Lisp mode, Tex mode) in Emacs that is created by
this interface to run the Scheme->C interpreter in.  It is created so it
won't interfere with the standard Scheme mode that comes with GNU Emacs
releases.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[7] How do I know all the functionalities of Scheme->C mode?
After sci is started up, type C-h m creates a *Help* buffer in Emacs which
lists all the keyboard bindings.  The beginning of s2c-gnuemacs.el also has
brief command documentation.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[8] How can I customize Scheme->C mode?
After initializations are done, Scheme->C-mode runs Scheme->C-load-hook,
hence you can put in your own keyboarding bindings and/or other features by
modifying your .emacs file.  For example,

	(setq Scheme->C-load-hook
	      '((lambda () (define-key inferior-scheme-mode-map "\C-c\C-t"
        	                       'favorite-cmd))))

This will allow you to type C-c C-t in Scheme->C mode to execute the
function favorite-cmd, which can be defined anywhere in .emacs as well.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
