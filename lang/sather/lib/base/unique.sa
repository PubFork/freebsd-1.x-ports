-- -*- Mode: Sather;  -*-
-- File: sym.sa 
-- Author: Heinz Schmidt (hws@ICSI.Berkeley.EDU)
-- Copyright (C) International Computer Science Institute, 1991
--
-- COPYRIGHT NOTICE: This code is provided "AS IS" WITHOUT ANY WARRANTY
-- and is subject to the terms of the SATHER LIBRARY GENERAL PUBLIC
-- LICENSE contained in the file: "sather/doc/license.txt" of the Sather
-- distribution. The license is also available from ICSI, 1947 Center
-- St., Suite 600, Berkeley CA 94704, USA.
--*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--* FUNCTION: Generator for unique integers and names.
--*           Used like in
--*                 constant new_int: INT := UNIQUE::int;
--*                 my_key: INT := UNIQUE::int;
--* 
--* CLASSES: UNIQUE
--* 
--* REQUIRED FILES:
--*
--* RELATED FILES: 
--*
--* HISTORY:
--* Last edited: Aug 27 21:11 1991 (hws)
--* Created: Wed Jul  3 00:08:44 1991 (hws)
--*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

class UNIQUE is	-- pairwise different integers.

   private shared count: INT;

   int: INT is
      -- a unique integer each time it is called.  If you use this for
      -- initializing class attributes, make sure you call UNIQUE::int, even if
      -- the class inherits from UNIQUE.  This guarantees proper initialization
      -- order.
      res := count;
      count := count + 1;
   end;
   
   str(prefix: STR): STR is
      -- a unique string each time it is called.  The string starts with
      -- `prefix'. If you use this for initializing class attributes, make sure
      -- you call UNIQUE::str, even if the class inherits from UNIQUE.  This
      -- guarantees proper initialization order.
      res := STR::create.s(prefix).i(UNIQUE::int);
   end;

end;

