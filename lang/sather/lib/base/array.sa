-- -*- Mode: Sather;  -*-
-- File: sather/lib/base/array.sa
-- Author: Stephen M. Omohundro (om@ICSI.Berkeley.EDU)
-- Copyright (C) International Computer Science Institute, 1991, 1992, 1993
--
-- COPYRIGHT NOTICE: This code is provided "AS IS" WITHOUT ANY WARRANTY
-- and is subject to the terms of the SATHER LIBRARY GENERAL PUBLIC
-- LICENSE contained in the file: "sather/doc/license.txt" of the Sather
-- distribution. The license is also available from ICSI, 1947 Center
-- St., Suite 600, Berkeley CA 94704, USA.
--
-- Changes: Heinz W. Schmidt (hws@csis.dit.csiro.au)
-- (c) Commonwealth Scientific and Industrial Research Organisation (CSIRO),
-- Australia, 1992, 1993.
-- The modifications are provided "AS IS" WITHOUT ANY WARRANTY and are subject
-- to the terms of the SATHER LIBRARY GENERAL PUBLIC LICENCE referred to above.
--*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--* FUNCTION: Basic array classes. 
--*
--* CLASSES: ARRAY{T}, ARRAY2{T}, ARRAY3{T}, ARRAY4{T}, ARRAY_TEST
--* 
--* RELATED PACKAGES:
--*
--* RCS: $Id: array.sa,v 1.1 1994/02/12 03:23:16 hsu Exp $
--* HISTORY:
--* Last edited: Oct 17 06:22 1993 (hws)
--*  Oct 17 06:22 1993 (hws): Sather 1 syntax, copyright note
--* Modified: Fri Sep  7 17:36:07 1990 (clim): Added test code for "extend". 
--* Created: Fri Mar  2 10:36:41 1990 (om)
--*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-- There are four array classes. These are parameterized classes in which
-- the parameter determines the type of element held in the array. The
-- effect of arrays with a dimension higher than four may be obtained
-- by constructing arrays of arrays.  In each class the built-in routine
-- "asize" returns the total number of entries.  In each case "clear" sets
-- all entries to the default intialization values (eg. 0 for integer
-- arrays).
   
class ARRAY{T} is
   -- asize:INT: Implemented by the compiler.
   
   clear is
      -- Clear out the array. 
      i:INT; loop until!(i=asize);
	 [i]:=void;
	 i:=i+1;
      end; -- loop
   end; -- clear
   
end; -- class ARRAY{T}
   
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   
class ARRAY2{T} is
   -- asize1:INT, asize2:INT: Implemented by the compiler.
   
   asize:INT is res := asize1*asize2 end;
   
   clear is
      -- Clear out the array. 
      i:INT; loop until!(i=asize1);
	 j:INT; loop until!(j=asize2);
	    [i,j]:=void;
	    j:=j+1;
	 end; -- loop
	 i:=i+1; 
      end; -- loop
   end; -- clear
   
end; -- class ARRAY2{T}
   
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

class ARRAY3{T} is
   -- asize1:INT, asize2:INT, asize3:INT: Implemented by the compiler.
   
   asize:INT is res := asize1*asize2*asize3 end;
   
   clear is
      -- Clear out the array. 
      i:INT; loop until!(i=asize1);
	 j:INT; loop until!(j=asize2);
	    k:INT; loop until!(k=asize3);
	       [i,j,k]:=void;
	       k:=k+1;
	    end; -- loop
	    j:=j+1;
	 end; -- loop
	 i:=i+1; 
      end; -- loop
   end; -- clear
   
end; -- class ARRAY3{T}

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   
class ARRAY4{T} is
   -- asize1:INT,asize2:INT, asize3:INT, asize4:INT: Implemented
   -- by the compiler.
   
   asize:INT is res := asize1*asize2*asize3*asize4 end;

   clear is
      -- Clear out the array. 
      i:INT; loop until!(i=asize1);
	 j:INT; loop until!(j=asize2);
	    k:INT; loop until!(k=asize3);
	       l:INT; loop until!(l=asize4);
		  [i,j,k,l]:=void;
		  l:=l+1
	       end; -- loop
	       k:=k+1;
	    end; -- loop
	    j:=j+1;
	 end; -- loop
	 i:=i+1; 
      end; -- loop
   end; -- clear
   
end; -- class ARRAY4{T}

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

class ARRAY_TEST is
   -- A quick check that the array classes work.
   
   main is
      array_test;
      array2_test;
      array3_test;
      array4_test;
   end; -- main
      
   array_test is
      -- Test of one-dimensional arrays.
      OUT::s("array_test:\n");
      a1:ARRAY{INT}:=a1.new(20);
      OUT::s("a1.asize {20} = ").i(a1.asize).nl;
      i:INT; loop until!(i=20);
	 a1[i]:=i;
	 i:=i+1;
      end; -- loop
      OUT::s("contents of a1 {0 ... 19} = ");
      i:=0; loop until!(i=20);
	 OUT::i(a1[i]).s(", ");
	 i:=i+1;
      end; -- loop
      OUT::nl;
      a1.clear;
      OUT::s("Cleared contents of a1 {0 ... 0} = ");
      i:=0; loop until!(i=20);
	 OUT::i(a1[i]).s(", ");
	 i:=i+1;
      end; -- loop
      OUT::nl.nl;

      -- Test "extend" on ARRAY
      i:INT; loop until!(i=20);
	 a1[i]:=i;
	 i:=i+1;
      end; -- loop
      OUT::s("a1:=a1.extend(a1.asize*2)\n");
      a1:=a1.extend(a1.asize*2);
      OUT::s("a1.asize {40} = ").i(a1.asize).nl;
      OUT::s("contents of a1 {0 ... 19, 0, ...0} = ");
      i:=0; loop until!(i=a1.asize);
	 OUT::i(a1[i]).s(", ");
	 i:=i+1;
      end; -- loop
      OUT::nl;
      i:INT; loop until!(i=a1.asize);
	 a1[i]:=i;
	 i:=i+1;
      end; -- loop
      OUT::s("contents of a1 {0 ... 39} = ");
      i:=0; loop until!(i=a1.asize);
	 OUT::i(a1[i]).s(", ");
	 i:=i+1;
      end; -- loop
      OUT::nl;
      a1.clear;
      OUT::s("Cleared contents of a1 {0 ... 0} = ");
      i:=0; loop until!(i=a1.asize);
	 OUT::i(a1[i]).s(", ");
	 i:=i+1;
      end; -- loop
      OUT::nl.nl;
   end; -- array_test
      
   array2_test is
      -- Test of two-dimensional arrays.
      OUT::s("array2_test:\n");
      a2:ARRAY2{INT}:=a2.new(4,5);
      OUT::s("a2.asize {20} = ").i(a2.asize);
      OUT::s(", a2.asize1 {4} = ").i(a2.asize1);
      OUT::s(", a2.asize2 {5} = ").i(a2.asize2).nl;
      i:INT; loop until!(i=a2.asize1);
	 j:INT; loop until!(j=a2.asize2);
	    a2[i,j]:=10*i+j;
	    j:=j+1;
	 end; -- loop
	 i:=i+1; 
      end; -- loop
      OUT::s("Contents of a2 {10*i+j} = ");
      i:=0; loop until!(i=a2.asize1);
	 j:INT; loop until!(j=a2.asize2);
	    OUT::i(a2[i,j]).s(", ");
	    j:=j+1;
	 end; -- loop
	 i:=i+1; 
      end; -- loop
      OUT::nl;
      a2.clear;      
      OUT::s("Cleared contents of a2 {0 ... 0} = ");      
      i:=0; loop until!(i=a2.asize1);
	 j:INT; loop until!(j=a2.asize2);
	    OUT::i(a2[i,j]).s(", ");
	    j:=j+1;
	 end; -- loop
	 i:=i+1; 
      end; -- loop
      OUT::nl.nl;

      -- Test "extend" on ARRAY2
      i:INT; loop until!(i=a2.asize1);
	 j:INT; loop until!(j=a2.asize2);
	    a2[i,j]:=10*i+j;
	    j:=j+1;
	 end; -- loop
	 i:=i+1; 
      end; -- loop
      OUT::s("a2:=a2.extend(a2.asize1*2,a2.asize2*2):\n");
      a2:=a2.extend(a2.asize1*2,a2.asize2*2);
      OUT::s("a2.asize {80} = ").i(a2.asize);
      OUT::s(", a2.asize1 {8} = ").i(a2.asize1);
      OUT::s(", a2.asize2 {10} = ").i(a2.asize2).nl;
      OUT::s("Contents of a2 {10*i+j,0,...,0} = ");
      i:=0; loop until!(i=a2.asize1);
	 j:INT; loop until!(j=a2.asize2);
	    OUT::i(a2[i,j]).s(", ");
	    j:=j+1;
	 end; -- loop
	 i:=i+1; 
      end; -- loop
      OUT::nl;
      i:INT; loop until!(i=a2.asize1);
	 j:INT; loop until!(j=a2.asize2);
	    a2[i,j]:=10*i+j;
	    j:=j+1;
	 end; -- loop
	 i:=i+1; 
      end; -- loop
      OUT::s("Contents of a2 {10*i+j} = ");
      i:=0; loop until!(i=a2.asize1);
	 j:INT; loop until!(j=a2.asize2);
	    OUT::i(a2[i,j]).s(", ");
	    j:=j+1;
	 end; -- loop
	 i:=i+1; 
      end; -- loop
      OUT::nl;
      a2.clear;      
      OUT::s("Cleared contents of a2 {0 ... 0} = ");      
      i:=0; loop until!(i=a2.asize1);
	 j:INT; loop until!(j=a2.asize2);
	    OUT::i(a2[i,j]).s(", ");
	    j:=j+1;
	 end; -- loop
	 i:=i+1; 
      end; -- loop
      OUT::nl.nl;
   end; -- array2_test

   array3_test is
      -- Test of three-dimensional arrays.
      OUT::s("array3_test:\n");
      a3:ARRAY3{INT}:=a3.new(2,3,4);
      OUT::s("a3.asize {24} = ").i(a3.asize);
      OUT::s(", a3.asize1 {2} = ").i(a3.asize1);
      OUT::s(", a3.asize2 {3} = ").i(a3.asize2);
      OUT::s(", a3.asize3 {4} = ").i(a3.asize3).nl;
      i:INT; loop until!(i=a3.asize1);
	 j:INT; loop until!(j=a3.asize2);
	    k:INT; loop until!(k=a3.asize3);
	       a3[i,j,k]:=100*i+10*j+k;
	       k:=k+1;
	    end; -- loop
	    j:=j+1;
	 end; -- loop
	 i:=i+1; 
      end; -- loop
      OUT::s("Contents of a3 {100*i+10*j+k} = ");
      i:=0; loop until!(i=a3.asize1);
	 j:INT; loop until!(j=a3.asize2);
	    k:INT; loop until!(k=a3.asize3);
	       OUT::i(a3[i,j,k]).s(", ");
	       k:=k+1;
	    end; -- loop
	    j:=j+1;
	 end; -- loop
	 i:=i+1; 
      end; -- loop
      OUT::nl;
      a3.clear;      
      OUT::s("Cleared contents of a3 {0 ... 0} = ");      
      i:=0; loop until!(i=a3.asize1);
	 j:INT; loop until!(j=a3.asize2);
	    k:INT; loop until!(k=a3.asize3);
	       OUT::i(a3[i,j,k]).s(", ");
	       k:=k+1;
	    end; -- loop
	    j:=j+1;
	 end; -- loop
	 i:=i+1; 
      end; -- loop
      OUT::nl.nl;

      -- Test "extend" on ARRAY3
      i:INT; loop until!(i=a3.asize1);
	 j:INT; loop until!(j=a3.asize2);
	    k:INT; loop until!(k=a3.asize3);
	       a3[i,j,k]:=100*i+10*j+k;
	       k:=k+1;
	    end; -- loop
	    j:=j+1;
	 end; -- loop
	 i:=i+1; 
      end; -- loop
      OUT::s("a3:=a3.extend(a3.asize1*2,a3.asize2,a3.asize3*2):\n");
      a3:=a3.extend(a3.asize1*2,a3.asize2,a3.asize3*2);
      OUT::s("a3.asize {96} = ").i(a3.asize);
      OUT::s(", a3.asize1 {4} = ").i(a3.asize1);
      OUT::s(", a3.asize2 {3} = ").i(a3.asize2);
      OUT::s(", a3.asize3 {8} = ").i(a3.asize3).nl;
      OUT::s("Contents of a3 {100*i+10*j+k,0,..0} = ");
      i:=0; loop until!(i=a3.asize1);
	 j:INT; loop until!(j=a3.asize2);
	    k:INT; loop until!(k=a3.asize3);
	       OUT::i(a3[i,j,k]).s(", ");
	       k:=k+1;
	    end; -- loop
	    j:=j+1;
	 end; -- loop
	 i:=i+1; 
      end; -- loop
      OUT::nl;
      i:INT; loop until!(i=a3.asize1);
	 j:INT; loop until!(j=a3.asize2);
	    k:INT; loop until!(k=a3.asize3);
	       a3[i,j,k]:=100*i+10*j+k;
	       k:=k+1;
	    end; -- loop
	    j:=j+1;
	 end; -- loop
	 i:=i+1; 
      end; -- loop
      OUT::s("Contents of a3 {100*i+10*j+k} = ");
      i:=0; loop until!(i=a3.asize1);
	 j:INT; loop until!(j=a3.asize2);
	    k:INT; loop until!(k=a3.asize3);
	       OUT::i(a3[i,j,k]).s(", ");
	       k:=k+1;
	    end; -- loop
	    j:=j+1;
	 end; -- loop
	 i:=i+1; 
      end; -- loop
      OUT::nl;
      a3.clear;      
      OUT::s("Cleared contents of a3 {0 ... 0} = ");      
      i:=0; loop until!(i=a3.asize1);
	 j:INT; loop until!(j=a3.asize2);
	    k:INT; loop until!(k=a3.asize3);
	       OUT::i(a3[i,j,k]).s(", ");
	       k:=k+1;
	    end; -- loop
	    j:=j+1;
	 end; -- loop
	 i:=i+1; 
      end; -- loop
      OUT::nl.nl;
   end; -- array3_test

   array4_test is
      -- Test of four-dimensional arrays. 
      OUT::s("array4_test:\n");
      a4:ARRAY4{INT}:=a4.new(2,2,2,3);
      OUT::s("a4.asize {24} = ").i(a4.asize);
      OUT::s(", a4.asize1 {2} = ").i(a4.asize1);
      OUT::s(", a4.asize2 {2} = ").i(a4.asize2);
      OUT::s(", a4.asize3 {2} = ").i(a4.asize3);
      OUT::s(", a4.asize4 {3} = ").i(a4.asize4).nl;
      i:INT; loop until!(i=a4.asize1);
	 j:INT; loop until!(j=a4.asize2);
	    k:INT; loop until!(k=a4.asize3);
	       l:INT; loop until!(l=a4.asize4);
		  a4[i,j,k,l]:=1000*i+100*j+10*k+l;
		  l:=l+1
	       end; -- loop
	       k:=k+1;
	    end; -- loop
	    j:=j+1;
	 end; -- loop
	 i:=i+1; 
      end; -- loop
      OUT::s("Contents of a4 {1000*i+100*j+10*k+l} = ");
      i:=0; loop until!(i=a4.asize1);
	 j:INT; loop until!(j=a4.asize2);
	    k:INT; loop until!(k=a4.asize3);
	       l:INT; loop until!(l=a4.asize4);
		  OUT::i(a4[i,j,k,l]).s(", ");
		  l:=l+1
	       end; -- loop
	       k:=k+1;
	    end; -- loop
	    j:=j+1;
	 end; -- loop
	 i:=i+1; 
      end; -- loop
      OUT::nl;
      a4.clear;      
      OUT::s("Cleared contents of a4 {0 ... 0} = ");      
      i:=0; loop until!(i=a4.asize1);
	 j:INT; loop until!(j=a4.asize2);
	    k:INT; loop until!(k=a4.asize3);
	       l:INT; loop until!(l=a4.asize4);
		  OUT::i(a4[i,j,k,l]).s(", ");
		  l:=l+1
	       end; -- loop
	       k:=k+1;
	    end; -- loop
	    j:=j+1;
	 end; -- loop
	 i:=i+1; 
      end; -- loop
      OUT::nl.nl;

      -- Test "extend" on ARRAY4
      i:INT; loop until!(i=a4.asize1);
	 j:INT; loop until!(j=a4.asize2);
	    k:INT; loop until!(k=a4.asize3);
	       l:INT; loop until!(l=a4.asize4);
		  a4[i,j,k,l]:=1000*i+100*j+10*k+l;
		  l:=l+1
	       end; -- loop
	       k:=k+1;
	    end; -- loop
	    j:=j+1;
	 end; -- loop
	 i:=i+1; 
      end; -- loop
      OUT::s("a4:=a4.extend(a4.asize1*2,a4.asize2,a4.asize3,a4.asize4*2)\n");
      a4:=a4.extend(a4.asize1*2,a4.asize2,a4.asize3,a4.asize4*2);
      OUT::s("a4.asize {96} = ").i(a4.asize);
      OUT::s(", a4.asize1 {4} = ").i(a4.asize1);
      OUT::s(", a4.asize2 {2} = ").i(a4.asize2);
      OUT::s(", a4.asize3 {2} = ").i(a4.asize3);
      OUT::s(", a4.asize4 {6} = ").i(a4.asize4).nl;
      OUT::s("Contents of a4 {1000*i+100*j+10*k+l,0,..,0} = ");
      i:=0; loop until!(i=a4.asize1);
	 j:INT; loop until!(j=a4.asize2);
	    k:INT; loop until!(k=a4.asize3);
	       l:INT; loop until!(l=a4.asize4);
		  OUT::i(a4[i,j,k,l]).s(", ");
		  l:=l+1
	       end; -- loop
	       k:=k+1;
	    end; -- loop
	    j:=j+1;
	 end; -- loop
	 i:=i+1; 
      end; -- loop
      OUT::nl;
      i:INT; loop until!(i=a4.asize1);
	 j:INT; loop until!(j=a4.asize2);
	    k:INT; loop until!(k=a4.asize3);
	       l:INT; loop until!(l=a4.asize4);
		  a4[i,j,k,l]:=1000*i+100*j+10*k+l;
		  l:=l+1
	       end; -- loop
	       k:=k+1;
	    end; -- loop
	    j:=j+1;
	 end; -- loop
	 i:=i+1; 
      end; -- loop
      OUT::s("Contents of a4 {1000*i+100*j+10*k+l} = ");
      i:=0; loop until!(i=a4.asize1);
	 j:INT; loop until!(j=a4.asize2);
	    k:INT; loop until!(k=a4.asize3);
	       l:INT; loop until!(l=a4.asize4);
		  OUT::i(a4[i,j,k,l]).s(", ");
		  l:=l+1
	       end; -- loop
	       k:=k+1;
	    end; -- loop
	    j:=j+1;
	 end; -- loop
	 i:=i+1; 
      end; -- loop
      OUT::nl;
      a4.clear;      
      OUT::s("Cleared contents of a4 {0 ... 0} = ");      
      i:=0; loop until!(i=a4.asize1);
	 j:INT; loop until!(j=a4.asize2);
	    k:INT; loop until!(k=a4.asize3);
	       l:INT; loop until!(l=a4.asize4);
		  OUT::i(a4[i,j,k,l]).s(", ");
		  l:=l+1
	       end; -- loop
	       k:=k+1;
	    end; -- loop
	    j:=j+1;
	 end; -- loop
	 i:=i+1; 
      end; -- loop
      OUT::nl.nl;
   end; -- array4_test
   
end; -- class ARRAY_TEST

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

