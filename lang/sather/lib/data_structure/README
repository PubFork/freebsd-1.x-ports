File: sather/lib/data_structure/README
Author: Stephen M. Omohundro
Created: Wed May  8 16:54:10 1991
Copyright (C) International Computer Science Institute, 1990

This directory contains Sather classes implementing a variety of data
structures. 

README: This file.

TEST.sa: Test all data structure classes: DATA_STRUCTURE_CLASSES_TEST.

binary_tree.sa: Binary trees: BINARY_TREE_NODE, BINARY_TREE_P_NODE,
   BINARY_TREE_TEST.

bit_vector.sa: Bit vectors (good for representing sets of small
   integers): FAST_BIT_VECTOR, BIT_VECTOR, BIT_VECTOR_CURSOR,
   BIT_VECTOR_AND_STACK, BIT_VECTOR_AND_STACK_TEST, BIT_VECTOR_TEST.

gap_list.sa: An array-based replacement for linked lists: GAP_LIST,
   GAP_LIST_CURSOR, GAP_LIST_TEST.

genrl_hash.sa: General hash tables: GENERAL_HASH{T}, 
   GENERAL_HASH_CURSOR{T}.

int_hash.sa: Non-negative integer hash tables: INT_HASH_MAP{T},
   INT_HASH_MAP_CURSOR{T}, INT_HASH_SET, INT_HASH_SET_CURSOR,
   INT_HASH_TEST.

list.sa: Lists implemented as extensible arrays: LIST{T},
   LIST_CURSOR{T}, LIST_TEST.

ob_hash.sa: Object hash tables: OB_HASH_MAP{T}, OB_HASH_MAP_CURSOR{T},
   OB_HASH_SET, OB_HASH_SET_CURSOR, OB_HASH_TEST.

prio_queue.sa: Priority queues: PRIORITY_QUEUE{T}, COMPARABLE_INT,
   PRIORITY_QUEUE_TEST.

queue.sa: Queues: FAST_QUEUE{T}, QUEUE{T}, QUEUE_TEST.

sort.sa: Sorting algorithms: QUICKSORT{T}, STR_SORT, SORT_TEST.

stack.sa: Stacks: STACK{T}, STACK_TEST{T}.

str_hash.sa: Hash tables of strings: STR_HASH_MAP_ELT{T},
   STR_HASH_MAP{T}, STR_HASH_MAP_CURSOR{T}, STR_HASH_SET_ELT, 
   STR_HASH_SET, STR_HASH_SET_CURSOR, STR_HASH_TEST

union_find.sa: Sets of sets with union and find
   operations: UF_HASH_ELT{T}, UNION_FIND{T}, UNION_FIND_TEST.
