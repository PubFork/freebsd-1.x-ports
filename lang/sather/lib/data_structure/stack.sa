-- -*- Mode: Sather;  -*-
-- File: sather/lib/data_structure/stack.sa
-- Author: Stephen M. Omohundro (om@ICSI.Berkeley.EDU)
-- Copyright (C) International Computer Science Institute, 1991, 1992, 1993
--
-- COPYRIGHT NOTICE: This code is provided "AS IS" WITHOUT ANY WARRANTY
-- and is subject to the terms of the SATHER LIBRARY GENERAL PUBLIC
-- LICENSE contained in the file: "sather/doc/license.txt" of the Sather
-- distribution. The license is also available from ICSI, 1947 Center
-- St., Suite 600, Berkeley CA 94704, USA.
--
-- Changes: Heinz W. Schmidt (hws@csis.dit.csiro.au)
-- (c) Commonwealth Scientific and Industrial Research Organisation (CSIRO),
-- Australia, 1992, 1993.
-- The modifications are provided "AS IS" WITHOUT ANY WARRANTY and are subject
-- to the terms of the SATHER LIBRARY GENERAL PUBLIC LICENCE referred to above.
--*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--* FUNCTION: The stack data structure.
--*
--* CLASSES: STACK{T}, STACK_TEST
--*
--* REQUIRED FILES: ../base/test.sa
--*
--* RELATED FILES:
--*
--* RCS: $Id: stack.sa,v 1.1 1994/02/12 03:23:26 hsu Exp $
--* HISTORY:
--* Last edited: Oct 17 06:33 1993 (hws)
--*  Oct 17 06:33 1993 (hws): Sather 1 syntax, copyright note
--* Created: Sun Sep 23 23:35:49 1990 (om)
--*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

class STACK{T} is
   -- Stacks.
   -- The `LIST{T}' class provides a low level efficient stack based
   -- structure. The `STACK{T}' class is less efficient in space and time
   -- but provides a better encapsulated interface. To push an element `e'
   -- onto a stack `s' one simply says `s.push(e)' whereas for a
   -- `LIST{T}' one must use `s:=s.push(e)'.

   attr s:ARRAY{T};			-- Holds the stack elements.
   attr size:INT;			-- The current insertion location.
   
   create:SAME is
      -- An empty stack.
      res := new; res.s:=ARRAY{T}::new(5);
   end; -- create
   
   push(e:T) is
      -- Push `e' onto the stack.
      if size>=s.asize then 
	 os:ARRAY{T}:=s; s:=os.extend(2*os.asize); os.clear;
      end; -- if
      s[size]:=e; size:=size+1;
   end; -- push

   is_empty:BOOL is
      -- True if stack is empty.
      res := (size=0)
   end; -- is_empty

   pop:T is
      -- Return the top element and remove it. Void if empty.
      if is_empty then res:=void
      else size:=size-1; res:=s[size]; s[size]:=void
      end;
   end; -- pop
   
   top:T is
      -- The value of the top of the stack. Void if empty.
      if is_empty then res:=void
      else res:=s[size-1]
      end; -- if
   end; -- top

   clear is
      -- Empty the stack.
      size:=0; s.clear;
   end; -- clear
   
end; -- class STACK{T}

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

class STACK_TEST is
   -- Test of `STACK{INT}'.
   TEST;
   
   main is
      -- Test of `STACK{INT}'.
      class_name("STACK{INT}");
      s:STACK{INT}:=s.create;
      test("size 1", s.size.to_s, "0");
      test("is_empty 1", s.is_empty.to_s, "T");
      s.push(1);
      test("size 2", s.size.to_s, "1");
      test("is_empty 2", s.is_empty.to_s, "F");
      test("top", s.top.to_s, "1");
      s.push(2); s.push(3); s.push(4);
      test("size 3", s.size.to_s, "4");
      test("pop 1", s.pop.to_s, "4");
      test("pop 2", s.pop.to_s, "3");
      test("pop 3", s.pop.to_s, "2");
      test("pop 4", s.pop.to_s, "1");
      test("size 4", s.size.to_s, "0");
      s.push(2); s.push(3); s.push(4); s.push(5); s.push(6); s.push(7);
      s.push(8); s.push(9); s.push(10); s.push(11); s.push(12); s.push(13);
      test("size 5", s.size.to_s, "12");
      s.clear;
      test("clear", s.size.to_s, "0");
      finish;
   end; -- main
   
end; -- class STACK_TEST

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


