# Configuration make file generated Fri Feb 11 02:32:53 PST 1994.
# Generated by: configure -TOPDIR /usr/ports/lang/sather

SHELL              = /bin/sh
SATHER_HOME        = /usr/ports/lang/sather
TOPDIR             = /usr/ports/lang/sather
CLANG              = 
ARCH               = FreeBSD
ENVI               = FreeBSD
GUESS_ENVI         = i386-unknown-FreeBSD
SATHERGRP          = sather
SATHER_MAKE        = make
GCSILENT           = SILENT
SKIPSAC            = NO
RELEASEVERSION     = 0.5.3
CONFIG_DATE        = Fri Feb 11 02:32:53 PST 1994
HOSTNAME           = freefall.cdrom.com
MKCMD              = ${MAKE} SATHER_HOME=/usr/ports/lang/sather TOPDIR=/usr/ports/lang/sather
CS                 = /usr/ports/lang/sather/bin.FreeBSD/sather

# Make file command locations
AR                  = /usr/bin/ar
COMPRESS            = /bin/compress
CP                  = /bin/cp
CMP                 = /usr/bin/cmp
CPP                 = cc -E -DFreeBSD
ECHO                = /bin/echo
ECHON               = /bin/echo
ED                  = /bin/ed
FALSE               = /usr/bin/false
FIND                = /usr/bin/find
LN                  = /bin/ln -s
MD                  = /bin/mkdir
MV                  = /bin/mv
RANLIB              = /usr/bin/ranlib
RM                  = /bin/rm
SED                 = /usr/bin/sed
TAR                 = /bin/tar
TEST                = /bin/test
TOUCH               = /usr/bin/touch
TRUE                = /usr/bin/true
YACC                = /usr/bin/yacc

# Settings from FreeBSD

CC           = gcc
MAINCC       = ${CC}
SDBCC        = ${CC}

MAINFLAGS    = -DGC_ -DSAFE_RT_ -w
CFLAGS       = -O ${MAINFLAGS} -D__FreeBSD__
GCFLAGS      = -O -D__FreeBSD__

TCLIBS       =
MFLAGS       =
BOOTFLAGS    =

SKIPSDB      = YES
SKIPGC       = NO

CSFLAGS      = -w -ver -cc '${CC}' -cflags '${CFLAGS}'

# -*- Mode: Text;  -*-
# File: Makefile.in
# Author: Heinz Schmidt (hws@csis.dit.csiro.AU)
# Copyright (C) CSIRO Division of Information Technology, 1992, 1993
#
# COPYRIGHT NOTICE: This code is provided "AS IS" WITHOUT ANY WARRANTY
# and is subject to the terms of the SATHER LIBRARY GENERAL PUBLIC
# LICENSE contained in the file: "sather/doc/license.txt" of the Sather
# distribution. The license is also available from ICSI, 1947 Center
# St., Suite 600, Berkeley CA 94704, USA.
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# FUNCTION:
#    Top level Makefile template for the Sather release.
#    See the file doc/INSTALL for how to make the system.
#    This file includes make plans for development under RCS.
#
#* RCS: $Id: Makefile,v 1.1 1994/02/12 03:21:45 hsu Exp $
#* HISTORY: 
#* Last edited: Feb  1 17:40 1992 (hws)
#*  Oct 31 18:54 1993 (hws): fix findmake
#*  Oct 24 19:47 1993 (hws): don't complain when debugger, contrib is not present
#* The original version was written by Jeff Bilmes, little of this
#* is left now. Who makes this work with GNU autoconf?
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Local defaults
TARFILE           = sa-${RELEASEVERSION}.tar
SATHER_DIST_UMASK = 22

# Below we assume that "make config" was run already.
# and all the default settings are properly included.

# We restricted the use of MKCMD. The macro definitions
# given in MKCMD cannot be overriden by explicit macro parameters
# in all make facilities out there.

# Moreover since we include a make header everywhere appropriate
# settings may already be imported into the make file invoked, anyway.

all:
	@echo Building Sather Rel "${RELEASEVERSION}" for "${ENVI}."
	if [ -d ./bin.${ENVI} ] ; then \
	   ${ECHO} "bin.${ENVI} exists." ; \
	else \
	   ${MD} ./bin.${ENVI} ; \
	fi 
	( cd ./sys/C; ${MKCMD} )
	( cd ./lib/base/C; ${MKCMD} XCFLAGS="${CFLAGS}" )
	( cd ./compiler; ${MAKE} SATHER_HOME=${TOPDIR} TOPDIR=${TOPDIR})
	${MAKE} support
	${LN} ${TOPDIR}/make/cs ${TOPDIR}/bin.${ENVI}/cs
	@echo Sather compilation complete.

support:
	if [ ${SKIPSDB} = NO ] ; then \
	   if [ -d debugger ] ; then \
	      ${ECHO} ; \
	      ${ECHO} Making debugger'.' ; \
	      ( cd ./debugger; \
	        ${MAKE} SATHER_HOME=${TOPDIR} ); \
	   else \
	      ${ECHO} "Debugger sources not included." ; \
	   fi ; \
	else \
	   ${ECHO} ; \
	   ${ECHO} "SKIPSDB=YES: Debugger installation skipped." ; \
	fi
	if [ ${SKIPSAC} = NO ] ; then \
	  ( cd ./sac; \
	     ${MAKE} SATHER_HOME=${TOPDIR} ) ; \
	else \
	  ${ECHO} "SKIPSAC=YES: Sather to C  (sac) interface skipped." ; \
	fi

EXPLICITCFLAGS=sys/C/GC/Makefile lib/user_interface/C/Makefile.in
PAT=CFLAGS

protocol:
	@echo "Making a protocoled run. This is supposed to run under Emacs shell"
	@echo "so you can save it. You need SATHER_MAKE (currently ${SATHER_MAKE})."
	( make config ; date ; ${SATHER_MAKE} clean ; date ; ${SATHER_MAKE} ; date )

testsuite:
	@echo "Run several tests. This may take time."
	( cd etc/test ; ${MAKE} rigorous )
	if [ -d contrib/xview ] ; then \	
	   ( cd contrib/xview/test ; ${MAKE} tests ) ; \
	fi

DIRS2CLEAN = sys/C lib/base/C compiler sys/C/crt_pre sac \
             debugger etc/test contrib/xview

clean:
	@echo Cleaning TOPDIR=${TOPDIR} will remove all intermediate compiles 
	@echo and executables. It will not touch installed executables of 
	@echo environments other than ENVI=${ENVI}.
	for i in ${DIRS2CLEAN} ; \
	do \
	   if [ -d $$i ] ; then \
	      ( cd $$i; ${MAKE} TOPDIR=${TOPDIR} clean ) ; \
	   fi ; \
	done
	-${RM} -r bin.${ENVI} *~

MAKEPLANS= Makefile compiler/Makefile debugger/Makefile debugger/C/Makefile \
etc/test/Makefile lib/base/C/Makefile lib/user_interface/C/Makefile \
contrib/xview/Makefile contrib/xview/C/Makefile sac/Makefile \
sys/C/Makefile sys/C/crt_pre/Makefile

distclean:
	@echo Stepping back to a distribution version by removing all configure and
	@echo make intermediates. Hope you know what you are doing"."
	for i in ${DIRS2CLEAN} ; \
	do \
	  if [ -d $$i ] ; then \
	    ( cd $$i; ${MAKE} TOPDIR=${TOPDIR} distclean ) ; \
	  fi ; \
	done
	-${RM} -r bin.* make/config.sh
	-${RM} ${MAKEPLANS}

DIRS2INSTALL = Makefile README make doc etc bin.${ENVI} lib sac sys

install:
	if [ ${SATHER_HOME} != ${TOPDIR} ] ; then \
           if [ -d ${SATHER_HOME} ] ; \
	   then \
	      ${ECHO} "SATHER_HOME ${SATHER_HOME} exists." ; \
	   else \
	     ( ${ECHO} "Creating sather home directory..." ; \
	       ${MD} ${SATHER_HOME} ; \
	       ${MD} ${SATHER_HOME}/compiler ; \
	       ${ECHO} 'See build directory for compiler sources' > \
	           ${SATHER_HOME}/compiler/README ; \
	      ) ; \
	   fi; \
	   ${ECHO} "Installing ${DIRS2INSTALL} ..." ; \
	   ${TAR} cf - ${DIRS2INSTALL} | ( cd ${SATHER_HOME}; ${TAR} xf - ) ; \
	   ${ECHO} "... Done" ; \
	   if [ -f ${SATHER_HOME}/bin.${ENVI}/cs ] ; then \
	      ${RM} ${SATHER_HOME}/bin.${ENVI}/cs ; \
	   fi ; \
	   ${LN} ${SATHER_HOME}/make/cs ${SATHER_HOME}/bin.${ENVI}/cs ; \
	else \
	   ${ECHO} "Sather home is top directory. Everything is installed."; \
	   ${ECHO} "Care NOT to run make clean for the current configuration." ; \
	fi

# make sure in the dist clean step below you do not clean development system.

FILES2DIST = Makefile Makefile.in configure README compiler \
	     man doc etc lib make sac sys
DISTDIR    = $$HOME/sather/dist
dist:
	@echo Making a Sather distribution in ${DISTDIR}\.
	if [ -d ${DISTDIR} ] ; then \
	    ${ECHO} Removing old distribution. ; \
	    ${RM} -rf ${DISTDIR} ; \
	fi
	${MD} ${DISTDIR}
	@echo Changing umask to ${SATHER_DIST_UMASK} and copying Sather to ${DISTDIR}\.
	( UMSK=`umask` ; export UMSK; \
	  umask ${SATHER_DIST_UMASK} ; \
	  ${TAR} cf - ${FILES2DIST} | ( cd ${DISTDIR}; ${TAR} xf - ); \
	  cd ${DISTDIR}; \
	  ${ECHO} Pruning; \
	  ${FIND} . \( -name RCS -o -name '*.o' -o -name '*~' -o -name core \
	       -o -name '\#*\#' -o -name '.??*~' -o -name TAGS \
	       -o -name TAGS.compl -o -name tags \) \
	       -exec ${RM} -fr {} \; -prune ; \
	  ${MAKE} TOPDIR=${DISTDIR} setgrp; \
	  ${MAKE} TOPDIR=${DISTDIR} distclean; \
	  ${TAR} cvf - ${FILES2DIST} | ${COMPRESS} > ${TARFILE}.Z ;  \
	  umask ${UMSK} ; )

# reset the group 
setgrp:
	@echo Trying to provide std access to directory.
	@echo Trying to change all files\' group to ${SATHERGRP} ... 
	if ( chgrp -fR ${SATHERGRP} * ) ; \
	then \
	   ${ECHO} Done\. ; \
	else \
	   ${ECHO} "Couldn't change all files\' groups to ${SATHERGRP}." ; \
	fi
	@echo Trying to set all files\' group and other read bit.
	if ( chmod -fR go+r * ) ; \
	then \
	   ${ECHO} Done\. ; \
	else \
	   ${ECHO} "Couldn't set all files' read bits."; \
	fi
	@echo Trying to set all files\' owner bit to write.
	if ( chmod -fR u+wr * ) ; \
	then \
	   ${ECHO} Done\. ; \
	else \
	   ${ECHO} "Couldn't set all files' write bits."; \
	fi
	@echo Trying to set all directories\' setgid bit.
	find . -type d -exec chmod go+xrs {} \;
	@echo Trying to set all binaries\' group and other exec bit.
	if ( chmod -fR go+x bin.* ) ; \
	then \
	   ${ECHO} Done\. ; \
	else \
	  ${ECHO} "Couldn't set all binaries' group exec bit." ; \
	fi

# RCS baselining

DIRS2RCS = . doc compiler contrib/forward contrib/icsim/examples \
	   contrib/icsim/examples/cascorr contrib/icsim/io \
	   contrib/icsim/models  contrib/icsim/test \
	   debugger debugger/C debugger/C/readline doc \
	   emacs/info contrib/performance contrib/performance/C \
	   etc/test lib lib/base lib/base/C lib/data_structure \
	   lib/geometry lib/graphics  lib/numerical lib/user_interface \
	   lib/user_interface/C contrib/xview contrib/xview/C \
	   contrib/xview/test \
	   sac sys sys/C sys/C/GC sys/C/crt_pre

# HACK FOR . stuff

DOTDIRS2RCS = compiler contrib/icsim contrib/icsim/test debugger etc \
	contrib/performance etc/test lib/base sys/C/crt_pre 

RCSFLAGS = "-l"


rcsdiff:
	@echo "RCS diff global use for detecting unfinished patches"
	for i in  ${DIRS2RCS} ; \
	do  \
	  ( cd $$i ; \
	    ${ECHO} "===================================================================" ; \
	    ${ECHO} "                             $$i " ; \
	    ( rcsdiff RCS/* || ${TRUE} )  ; \
	  ) ; \
	done

co:
	@echo "RCS check out globally RCSFLAGS='${RCSFLAGS}'."
	@echo "CARE: THIS MAY FORCIBLY OVERWRITE UNFINISHED PATCHES!"
	( yesorno "Ok to go ahead?" )
	for i in ${DOTDIRS2RCS} ; \
	do  \
	  ( cd $$i ; ${ECHO} "----------------- $$i ------------------" ; \
	    ls RCS; \
	    ( co -f ${RCSFLAGS} RCS/.s* || ${TRUE} ) ; \
	  ) ; \
	done
	for i in ${DIRS2RCS} ; \
	do  \
	  ( cd $$i ; ${ECHO} "----------------- $$i ------------------" ; \
	    ls RCS; \
	    ( co -f ${RCSFLAGS} RCS/* || ${TRUE} ) ; \
           ) ; \
	done


ci:
	@echo "RCS check in globally -u, i.e. leaving readonly copy."
	@echo "CARE: THIS MAY CHECK IN UNFINISHED PATCHES!"
	( yesorno "Ok to go ahead?" )
	for i in ${DIRS2RCS} ; \
	do  \
	  ( cd $$i ; ${ECHO} "----------------- $$i ------------------" ; \
	    ( ci -u RCS/* || ${TRUE} ) ; \
          ) ; \
	done
	for i in ${DOTDIRS2RCS} ; \
	do  \
	  ( cd $$i ; ${ECHO} "----------------- $$i ------------------" ; \
	    ( ci -u RCS/.s* ; ${TRUE} ) ; \
	   ) ; \
	done


RCSRELEASE = 4
RCSNAME    = beta${RCSRELEASE}

rcsname:
	@echo "Associating symbolic name ${RCSNAME} to latest release."
	for i in ${DOTDIRS2RCS} ; \
	do  \
	  ${ECHO} "----------------- $$i ------------------" ; \
	  ( rcs -N${RCSNAME}: $$i/RCS/.s* || ${TRUE} ) ; \
	done
	for i in ${DIRS2RCS} ; \
	do  \
	  ${ECHO} "----------------- $$i ------------------" ; \
	  rcs -N${RCSNAME}: $$i/RCS/* ; \
	done

# BEFORE DOING THIS MAKE SURE YOU DO NOT HAVE UNFINISHED PATCHES
# SITTING AROUND. YOU MAY DO "make co" beforehand to abandon these.


baseline:
	@echo "RCS stepping to one major release number globally."
	@echo "CARE: THIS MAY CHECK IN UNFINISHED PATCHES OR STOP DUE TO LOCKS SET!"
	( yesorno "Ok to go ahead?" )
	@echo "Leaving read copy. Checking in with new major release number."
	${MAKE} RCSFLAGS="" -u${RCSRELEASE}.0 ci
	${MAKE} RCSNAME=${RCSNAME} rcsname

config: 
	@echo "Running make/configure."
	@echo Should this fail"," see the file "sather/doc/INSTALL."
	( cd make ; ./configure )

listmakefiles:
	@echo ${MAKEPLANS}

showconfig:
	@echo
	@echo "Sather Rel${RELEASEVERSION}, (c) Copyright ICSI Berkeley, 1991, 1992"
	@echo "Modifications, (c) Copyright CSIRO Canberra, 1992, 1993"
	@echo 
	@echo "CONFIGURED TO INSTALL"
	@echo " For environment:       ${ENVI}  (i.e., ${CLANG} C on ${GUESS_ENVI})"
	@echo " From top:              ${TOPDIR}"
	@echo " To home:               ${SATHER_HOME}"
	@echo " Using make facility:   ${SATHER_MAKE}"
	@echo " C compiler will be:    ${CC}"
	@echo " C compiler flags:      ${CFLAGS}"
	@echo " Except MAIN will use:  ${MAINFLAGS}"
	@echo " Except GC will use:    ${GCFLAGS}"
	@echo " Except see make files: ${EXPLICITCFLAGS}"
	@echo " Boot compiler:         ${TOPDIR}/compiler/cs.cs.boot${CLANG}"
	@echo " Extra boot make flags: ${BOOTFLAGS}"
	@echo " Sather compiler:       ${CS}"
	@echo " Sather compiler flags: ${CSFLAGS}"
	@echo " SDB will be skipped:   ${SKIPSDB}"
	@echo " GC will run:           ${GCSILENT}'ly"
	@echo

findmake:
	@echo "Looking for PAT=${PAT} in all make files."
	egrep "${PAT}" ${MAKEPLANS} ${MAKECPPFILES}
