%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPCOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
0.95 0.95 595.3 841.9 0 1 12 FMDOCUMENT
0 0 /Palatino-Italic FMFONTDEFINE
1 0 /AvantGarde-Demi FMFONTDEFINE
2 0 /AvantGarde-Book FMFONTDEFINE
3 0 /Palatino-Bold FMFONTDEFINE
4 0 /Palatino-Roman FMFONTDEFINE
5 0 /Palatino-BoldItalic FMFONTDEFINE
6 0 /Courier FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 .1 FMFILL
2 .3 FMFILL
3 .5 FMFILL
4 .7 FMFILL
5 .9 FMFILL
6 .97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 .9 FMFILL
18 .7 FMFILL
19 .5 FMFILL
20 .3 FMFILL
21 .1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 0 FMBEGINPAGE
115.32 118.1 511.32 128.11 R
7 X
0 K
V
0 10 Q
0 X
(1) 506.32 121.44 T
115.32 461.11 511.32 749.11 R
7 X
V
0 24 Q
0 X
-1.2 (The Sather Language) 222.1 733.11 S
1 12 Q
(STEPHEN M. OMOHUNDRO) 238.6 686.11 T
2 10 Q
(Inter) 215.64 651.44 T
(national Computer Science Institute) 237.1 651.44 T
(1947 Center Str) 244.88 639.44 T
(eet, Suite 600) 317.51 639.44 T
(Berkeley, Califor) 251.63 627.44 T
(nia 94704) 329.63 627.44 T
(Phone: 415-643-9153) 263.97 615.44 T
(Inter) 239.04 603.44 T
(net: om@icsi.berkeley.edu) 260.5 603.44 T
(June 3, 1991) 283.58 591.44 T
(Copyright \050C\051 Inter) 167.25 564.44 T
(national Computer Science Institute, 1991) 257.81 564.44 T
115.32 173.11 511.32 425.11 R
7 X
V
3 F
0 X
1.62 (Abstract.) 169.32 419.11 P
4 9 Q
1.46 ( This r) 210.11 419.11 P
1.46 (eport describes the object-oriented pr) 238.07 419.11 P
1.46 (ogramming lan-) 391.62 419.11 P
0.98 (guage Sather) 169.32 408.11 P
0.98 (. Sather is a simpli\336ed, optimized variant of Eif) 221.32 408.11 P
0.98 (fel \050Sather) 415.95 408.11 P
0.52 (tower is a landmark in Berkeley\051. It is meant to be a working language,) 169.32 397.11 P
0.99 (focussed on the practical needs of writing ef) 169.32 386.11 P
0.99 (\336cient, r) 350.98 386.11 P
0.99 (eusable code. It is) 384.36 386.11 P
0.57 (designed for individual r) 169.32 375.11 P
0.57 (esear) 270.52 375.11 P
0.57 (chers or small gr) 290.82 375.11 P
0.57 (oups and eliminates fea-) 358.47 375.11 P
2.22 (tur) 169.32 364.11 P
2.22 (es which ar) 181.05 364.11 P
2.22 (e pedantic, of pur) 230.56 364.11 P
2.22 (ely theor) 307.09 364.11 P
2.22 (etical inter) 344.24 364.11 P
2.22 (est, or necessary) 388.13 364.11 P
1 (only for lar) 169.32 353.11 P
1 (ge or naive pr) 215.5 353.11 P
1 (ogramming teams. Sather has clean and sim-) 273.5 353.11 P
0.6 (ple syntax, parameterized classes, object-oriented dispatch, multiple in-) 169.32 342.11 P
0.66 (heritance, str) 169.32 331.11 P
0.66 (ong typing, and garbage collection. It generates ef) 221.25 331.11 P
0.66 (\336cient C) 423.53 331.11 P
(code which is easily integrated with existing code.) 169.32 320.11 T
FMENDPAGE
%%EndPage: "1" 2
%%Page: "2" 2
595.3 841.9 0 FMBEGINPAGE
115.32 753.27 511.32 763.28 R
7 X
0 K
V
3 10 Q
0 X
(2) 115.32 756.61 T
0 F
(T) 278.52 756.61 T
(able of Contents) 283.52 756.61 T
510.95 749.11 115.32 749.11 2 L
7 X
V
0.25 H
2 Z
0 X
N
115.32 155.11 511.32 713.11 R
7 X
V
115.32 696.08 511.32 699.11 C
79.32 697.59 547.32 697.59 2 L
0.25 H
2 Z
0 X
0 K
N
7.32 47.11 619.32 839.11 C
5 14 Q
0 X
0 K
(1. T) 115.32 703.77 T
(able of Contents) 136.3 703.77 T
5 12 Q
(1.  T) 115.32 678.08 T
(able of Contents) 136.3 678.08 T
(..........................................................................................) 226.19 678.08 T
(2) 496.32 678.08 T
(2.  Intr) 115.32 662.08 T
(oduction) 150.76 662.08 T
(...................................................................................................) 199.21 662.08 T
(3) 496.32 662.08 T
4 10 Q
(2.1.  A Sather Example) 115.32 649.42 T
(................................................................................................................) 217.2 649.42 T
(4) 497.32 649.42 T
(2.2.  Terminology) 115.32 637.42 T
(.........................................................................................................................) 194.71 637.42 T
(6) 497.32 637.42 T
5 12 Q
(3.  Classes) 115.32 622.08 T
(............................................................................................................) 172.22 622.08 T
(7) 496.32 622.08 T
4 10 Q
(3.1.  Parameterized and Non-parameterized Classes) 115.32 609.42 T
(.............................................................) 344.63 609.42 T
(7) 497.32 609.42 T
(3.2.  Inheritance) 115.32 597.42 T
(............................................................................................................................) 187.22 597.42 T
(7) 497.32 597.42 T
(3.3.  Ordinary Object Layout) 115.32 585.42 T
(......................................................................................................) 242.19 585.42 T
(8) 497.32 585.42 T
(3.4.  Void) 115.32 573.42 T
(........................................................................................................................................) 157.23 573.42 T
(8) 497.32 573.42 T
(3.5.  Stateless Classes) 115.32 561.42 T
(...................................................................................................................) 209.7 561.42 T
(8) 497.32 561.42 T
(3.6.  Basic Classes) 115.32 549.42 T
(.........................................................................................................................) 194.71 549.42 T
(9) 497.32 549.42 T
(3.7.  Array Classes) 115.32 537.42 T
(........................................................................................................................) 197.21 537.42 T
(9) 497.32 537.42 T
5 12 Q
(4.  T) 115.32 522.08 T
(ype Declaration) 136.68 522.08 T
(.........................................................................................) 223.2 522.08 T
(10) 490.32 522.08 T
4 10 Q
(4.1.  The Four Kinds of Type Specification) 115.32 509.42 T
(.............................................................................) 299.65 509.42 T
(10) 492.32 509.42 T
(4.2.  SELF_TYPE, UNDEFINE, $OB) 115.32 497.42 T
(........................................................................................) 272.17 497.42 T
(10) 492.32 497.42 T
(4.3.  Type Conformance) 115.32 485.42 T
(............................................................................................................) 222.2 485.42 T
(11) 492.32 485.42 T
(4.4.  Dynamic Dispatch) 115.32 473.42 T
(.............................................................................................................) 219.7 473.42 T
(11) 492.32 473.42 T
5 12 Q
(5.  Attributes) 115.32 458.08 T
(.....................................................................................................) 187.22 458.08 T
(13) 490.32 458.08 T
4 10 Q
(5.1.  Object Attributes) 115.32 445.42 T
(................................................................................................................) 212.2 445.42 T
(13) 492.32 445.42 T
(5.2.  Shared Attributes) 115.32 433.42 T
(...............................................................................................................) 214.7 433.42 T
(13) 492.32 433.42 T
(5.3.  Constant Attributes) 115.32 421.42 T
(...........................................................................................................) 224.7 421.42 T
(13) 492.32 421.42 T
(5.4.  Private) 115.32 409.42 T
(..................................................................................................................................) 167.23 409.42 T
(14) 492.32 409.42 T
(5.5.  The \322type\323 Attribute) 115.32 397.42 T
(.........................................................................................................) 229.69 397.42 T
(14) 492.32 397.42 T
(5.6.  Creating  Objects) 115.32 385.42 T
(................................................................................................................) 212.2 385.42 T
(14) 492.32 385.42 T
(5.7.  Copying  Objects) 115.32 373.42 T
(................................................................................................................) 212.2 373.42 T
(14) 492.32 373.42 T
5 12 Q
(6.  Routines) 115.32 358.08 T
(.......................................................................................................) 181.22 358.08 T
(15) 490.32 358.08 T
4 10 Q
(6.1.  Res) 115.32 345.42 T
(........................................................................................................................................) 152.24 345.42 T
(15) 492.32 345.42 T
(6.2.  Self) 115.32 333.42 T
(........................................................................................................................................) 152.24 333.42 T
(15) 492.32 333.42 T
5 12 Q
(7.  Statements) 115.32 318.08 T
(...................................................................................................) 193.21 318.08 T
(16) 490.32 318.08 T
4 10 Q
(7.1.  Local Variable Declarations) 115.32 305.42 T
(..............................................................................................) 257.18 305.42 T
(16) 492.32 305.42 T
(7.2.  Assignments) 115.32 293.42 T
(.......................................................................................................................) 194.71 293.42 T
(16) 492.32 293.42 T
(7.3.  Conditionals) 115.32 281.42 T
(.......................................................................................................................) 194.71 281.42 T
(16) 492.32 281.42 T
(7.4.  Loops) 115.32 269.42 T
(...................................................................................................................................) 164.73 269.42 T
(16) 492.32 269.42 T
(7.5.  Break and Return Statements) 115.32 257.42 T
(...........................................................................................) 264.67 257.42 T
(17) 492.32 257.42 T
(7.6.  Switch Statements) 115.32 245.42 T
(..............................................................................................................) 217.2 245.42 T
(17) 492.32 245.42 T
(7.7.  Routine Calls) 115.32 233.42 T
(......................................................................................................................) 197.21 233.42 T
(17) 492.32 233.42 T
(7.8.  Assert and Debug Statements) 115.32 221.42 T
(..........................................................................................) 267.17 221.42 T
(18) 492.32 221.42 T
5 12 Q
(8.  Expr) 115.32 206.08 T
(essions) 154.75 206.08 T
(..................................................................................................) 196.21 206.08 T
(19) 490.32 206.08 T
4 10 Q
(8.1.  Constants) 115.32 193.42 T
(.............................................................................................................................) 179.72 193.42 T
(19) 492.32 193.42 T
(8.2.  Identifiers) 115.32 181.42 T
(............................................................................................................................) 182.22 181.42 T
(19) 492.32 181.42 T
(8.3.  Dotted Expressions) 115.32 169.42 T
(............................................................................................................) 222.2 169.42 T
(19) 492.32 169.42 T
FMENDPAGE
%%EndPage: "2" 3
%%Page: "3" 3
595.3 841.9 0 FMBEGINPAGE
115.32 753.27 511.32 763.28 R
7 X
0 K
V
0 10 Q
0 X
(Intr) 287.77 756.61 T
(oduction) 303.7 756.61 T
3 F
(3) 506.32 756.61 T
511.32 749.11 115.32 749.11 2 L
7 X
V
0.25 H
2 Z
0 X
N
115.32 155.11 511.32 713.11 R
7 X
V
4 F
0 X
(8.4.  Class Access) 115.32 706.44 T
(........................................................................................................................) 192.21 706.44 T
(19) 492.32 706.44 T
(8.5.  Boolean Expressions) 115.32 694.44 T
(..........................................................................................................) 227.19 694.44 T
(19) 492.32 694.44 T
(8.6.  Numerical Expressions) 115.32 682.44 T
(.....................................................................................................) 239.69 682.44 T
(20) 492.32 682.44 T
(8.7.  Array Access) 115.32 670.44 T
(.......................................................................................................................) 194.71 670.44 T
(20) 492.32 670.44 T
5 12 Q
(9.  Interfacing with C Code) 115.32 655.11 T
(.............................................................................) 259.18 655.11 T
(20) 490.32 655.11 T
4 10 Q
(9.1.  Accessing C from Sather) 115.32 642.44 T
(...................................................................................................) 244.68 642.44 T
(20) 492.32 642.44 T
(9.2.  Accessing Sather from C) 115.32 630.44 T
(...................................................................................................) 244.68 630.44 T
(21) 492.32 630.44 T
5 12 Q
(10.  Compilation) 115.32 615.11 T
(...............................................................................................) 205.21 615.11 T
(21) 490.32 615.11 T
4 10 Q
(10.1.  Main) 115.32 602.44 T
(...................................................................................................................................) 164.73 602.44 T
(22) 492.32 602.44 T
5 12 Q
(1) 115.32 587.11 T
(1.  The Lexical Structur) 120.65 587.11 T
(e of Sour) 243.37 587.11 T
(ce Files) 289.81 587.11 T
(.....................................................) 331.14 587.11 T
(22) 490.32 587.11 T
(12.  Syntax) 115.32 571.11 T
(.........................................................................................................) 175.22 571.11 T
(23) 490.32 571.11 T
(13.  Dif) 115.32 555.11 T
(fer) 153.18 555.11 T
(ences between Sather and Eif) 166.95 555.11 T
(fel) 320.19 555.11 T
(....................................................) 334.14 555.11 T
(25) 490.32 555.11 T
(14.  Acknowledgements) 115.32 539.11 T
(...................................................................................) 241.19 539.11 T
(26) 490.32 539.11 T
115.32 482.08 511.32 485.11 C
79.32 483.59 547.32 483.59 2 L
0.25 H
2 Z
0 X
0 K
N
7.32 47.11 619.32 839.11 C
5 14 Q
0 X
0 K
(2. Intr) 115.32 489.77 T
(oduction) 153.16 489.77 T
4 10 Q
-0.1 (The two primary goals of Sather are efficiency and reusability. The Sather compiler gener-) 115.32 461.42 P
-0.08 (ates efficient C code and easily links with existing C code. This allows it to have C\325s porta-) 115.32 449.42 P
-0.25 (blility and efficiency without adopting its complexities and dangers \050some have suggested) 115.32 437.42 P
(that C is really a portable assembly language\051.) 115.32 425.42 T
-0.18 (The last few decades have shown the critical importance of reusability in the development) 115.32 401.42 P
-0.19 (of large software systems. Because effort is amortized over many projects, reusable code is) 115.32 389.42 P
0.23 (more likely to be thoroughly debugged and to be written with more care and concern for) 115.32 377.42 P
-0.09 (efficiency. Reusable components allow the construction of systems of far greater complex-) 115.32 365.42 P
-0.48 (ity with given resources. The traditional libraries in languages like C allow new code to call) 115.32 353.42 P
0.68 (old code, but do not easily allow old code to call new code. Sather provides two related) 115.32 341.42 P
-0.25 (mechanisms for old code to call new code. Parameterized classes allow the compiler to op-) 115.32 329.42 P
-0.46 (timize such calls while object-oriented dispatch is a run-time mechanism which gives more) 115.32 317.42 P
-0.18 (flexibility at the expense of some efficiency. The key to both of these mechanisms is encap-) 115.32 305.42 P
(sulation of functionality into classes.) 115.32 293.42 T
-0.52 (Sather attempts to support these two mechanisms as efficiently and simply as possible. The) 115.32 269.42 P
0 (other aspects of the design were influenced by the envisioned usage. It is primarily aimed) 115.32 257.42 P
-0.5 (at small groups of competent researchers working on applications rather than systems pro-) 115.32 245.42 P
0.32 (gramming. It does not attempt to be completely typesafe but does try to catch most com-) 115.32 233.42 P
1.41 (mon errors during compilation. It tries to be very compatible with user C code and C) 115.32 221.42 P
-0.01 (libraries and to not sacrifice the efficiency of C. It efficiently supports numerical computa-) 115.32 209.42 P
1.03 (tions. The first implementation assumes a 32 bit Unix machine with sufficient memory.) 115.32 197.42 P
0.5 (Characters are assumed to be one byte and integers and pointers are assumed to be four) 115.32 185.42 P
0.62 (bytes.  Much of the basic system is defined in classes which are identical to user classes,) 115.32 173.42 P
(giving the user flexibility to choose methods and approaches.) 115.32 161.42 T
FMENDPAGE
%%EndPage: "3" 4
%%Page: "4" 4
595.3 841.9 0 FMBEGINPAGE
115.32 753.27 511.32 763.28 R
7 X
0 K
V
3 10 Q
0 X
(4) 115.32 756.61 T
0 F
(Intr) 287.77 756.61 T
(oduction) 303.7 756.61 T
510.95 749.11 115.32 749.11 2 L
7 X
V
0.25 H
2 Z
0 X
N
115.32 128.11 511.32 713.11 R
7 X
V
5 11 Q
0 X
(2.1. A Sather Example) 115.32 705.77 T
4 10 Q
0.34 (To give the reader a sense for Sather at the outset, this section presents a simple example) 115.32 680.44 P
0.15 (which uses both parameterized classes and object-oriented dispatch. The \050highly concoct-) 115.32 668.44 P
0.65 (ed\051 application is a system for maintaining a collection of tasks on a stack. The program) 115.32 656.44 P
-0.27 (consists of five classes. \322STACK{T}\323 is a parameterized class which implements stacks and) 115.32 644.44 P
0.31 (might be found in a pre-existing library. In use, the type parameter T is instantiated with) 115.32 632.44 P
0.44 (the type of the objects that will be put on the stack. The class \322TASK\323 defines the objects) 115.32 620.44 P
0.87 (which represent simple tasks that are characterized only by their name. The class \322CLI-) 115.32 608.44 P
0.35 (ENT_TASK\323 defines a refined set of objects which not only have a name but also a client) 115.32 596.44 P
3.91 (number and an allowed-time limit. The class \322TASK_MANAGER\323 specializes the) 115.32 584.44 P
-0.05 (\322STACK\323 class for the job of holding task objects and instantiates its type parameter. Both) 115.32 572.44 P
0.26 (\322TASK\323 objects and \322CLIENT_TASK\323 objects may be put on the stack, so object-oriented) 115.32 560.44 P
0.08 (dispatch is used to decide which code is run on an object which is popped from the stack.) 115.32 548.44 P
(Finally, \322TASK_TRIAL\323 is a class which defines an example run of the program.) 115.32 536.44 T
6 8 Q
(-- File: example.sa) 115.32 519.77 T
(-- Author: Stephen M. Omohundro) 115.32 510.77 T
(-- Created: Sun Feb 25 23:46:42 1990) 115.32 501.77 T
(-- Simple demonstration of Sather mechanisms, maintains a stack of tasks.) 115.32 492.77 T
(--------------------------------------------------------------------) 115.32 474.77 T
(class STACK{T} is) 115.32 456.77 T
(   -- General purpose stack of objects of type T.) 115.32 447.77 T
(   arr:ARRAY{T};                -- Array holding stack elements.) 115.32 429.77 T
(   ssize:INT;                   -- Number of elements in stack = insertion loc.) 115.32 420.77 T
(   constant initial_size:INT:=5; -- Start size of the stack array.) 115.32 411.77 T
(   create:SELF_TYPE is          -- \324SELF_TYPE\325 used so it works when inherited.) 115.32 393.77 T
(      -- A new stack.) 115.32 384.77 T
(      res := new;               -- \324res\325 is returned at routine completion.) 115.32 375.77 T
(      res.arr := ARRAY{T}::new\050initial_size\051;) 115.32 366.77 T
(   end;) 115.32 357.77 T
(   push\050e:T\051 is) 115.32 339.77 T
(      -- Insert the element \324e\325.) 115.32 330.77 T
(      if ssize >= arr.asize then  -- Resize if stack area is full.) 115.32 321.77 T
(         arr := arr.extend\0502 * arr.asize\051 -- This copies over the old elements.) 115.32 312.77 T
(      end;) 115.32 303.77 T
(      arr[ssize] := e;          -- Put new element at the top of the stack.) 115.32 294.77 T
(      ssize := ssize + 1;       -- Increase the stack size.) 115.32 285.77 T
(   end;) 115.32 276.77 T
(   empty:BOOL is) 115.32 258.77 T
(      -- True if stack is empty.) 115.32 249.77 T
(      res := \050ssize=0\051;) 115.32 240.77 T
(   end;) 115.32 231.77 T
(   pop:T is) 115.32 213.77 T
(      -- Pops off the first element or \324void\325 if empty.) 115.32 204.77 T
(      if empty then return end;) 115.32 195.77 T
(      ssize := ssize - 1) 115.32 186.77 T
(      res := arr[ssize];) 115.32 177.77 T
(      arr[ssize] := void;) 115.32 168.77 T
(   end;) 115.32 159.77 T
(end; -- class STACK) 115.32 141.77 T
FMENDPAGE
%%EndPage: "4" 5
%%Page: "5" 5
595.3 841.9 0 FMBEGINPAGE
115.32 753.27 511.32 763.28 R
7 X
0 K
V
0 10 Q
0 X
(Intr) 287.77 756.61 T
(oduction) 303.7 756.61 T
3 F
(5) 506.32 756.61 T
511.32 749.11 115.32 749.11 2 L
7 X
V
0.25 H
2 Z
0 X
N
115.32 155.11 511.32 713.11 R
7 X
V
6 8 Q
0 X
(--------------------------------------------------------------------) 115.32 707.77 T
(class TASK is) 115.32 689.77 T
(   -- Simple task, parent of more specialized tasks.) 115.32 680.77 T
(   name:STR;                    -- The name of the task.) 115.32 671.77 T
(   create\050nm:STR\051:TASK is) 115.32 653.77 T
(      res := new;) 115.32 644.77 T
(      res.name := nm;) 115.32 635.77 T
(   end;) 115.32 626.77 T
(   print is) 115.32 608.77 T
(      -- Print the task name on stdout.) 115.32 599.77 T
(      OUT::s\050\322Task: \322\051.s\050name\051.nl;) 115.32 590.77 T
(   end;) 115.32 581.77 T
(end; -- class TASK) 115.32 563.77 T
(--------------------------------------------------------------------) 115.32 545.77 T
(class CLIENT_TASK is) 115.32 527.77 T
(   -- Tasks that will be billed to a client.) 115.32 518.77 T
(   TASK;                      -- Inherits the properties of simple tasks.) 115.32 500.77 T
(   client:INT;                -- The client number.) 115.32 491.77 T
(   allowed_time:REAL;          -- The time allowed in hours.) 115.32 482.77 T
(   create\050nm:STR; cl:INT; tm:REAL\051:CLIENT_TASK is) 115.32 464.77 T
(      -- A new \324CLIENT_TASK\325.) 115.32 455.77 T
(      res := new;) 115.32 446.77 T
(      res.name := nm;) 115.32 437.77 T
(      res.client := cl;) 115.32 428.77 T
(      res.allowed_time := tm;) 115.32 419.77 T
(   end;) 115.32 410.77 T
(   print is) 115.32 392.77 T
(      -- Print the task parameters on \324stdout\325.) 115.32 383.77 T
(      OUT::s\050\322Task: \322\051.s\050name\051.s\050\322, Client: \322\051.i\050client\051;) 115.32 374.77 T
(      OUT::s\050\322, Allowed time: \322\051.r\050allowed_time\051.s\050\322 hours\323\051.nl) 115.32 365.77 T
(   end;) 115.32 356.77 T
(end; -- class CLIENT_TASK) 115.32 338.77 T
(--------------------------------------------------------------------) 115.32 320.77 T
(class TASK_MANAGER is) 115.32 302.77 T
(   -- A stack of tasks.) 115.32 293.77 T
(   STACK{$TASK};                -- Inherits create, push, pop, empty.) 115.32 275.77 T
(      -- The $ indicates that the actual type may be a subtype of TASK.) 115.32 266.77 T
(   pop_and_print is) 115.32 248.77 T
(      -- Print the next item on the stack.) 115.32 239.77 T
(      pop.print;                -- Will call the proper print routine) 115.32 230.77 T
(                                -- by dynamic dispatch on the type.) 115.32 221.77 T
(   end;) 115.32 212.77 T
(end; -- class TASK_MANAGER) 115.32 194.77 T
(--------------------------------------------------------------------) 115.32 176.77 T
(class TASK_TRIAL is) 115.32 158.77 T
FMENDPAGE
%%EndPage: "5" 6
%%Page: "6" 6
595.3 841.9 0 FMBEGINPAGE
115.32 753.27 511.32 763.28 R
7 X
0 K
V
3 10 Q
0 X
(6) 115.32 756.61 T
0 F
(Intr) 287.77 756.61 T
(oduction) 303.7 756.61 T
510.95 749.11 115.32 749.11 2 L
7 X
V
0.25 H
2 Z
0 X
N
115.32 155.11 511.32 713.11 R
7 X
V
6 8 Q
0 X
(   -- Try out a stack of tasks.) 115.32 707.77 T
(   main is) 115.32 689.77 T
(      -- Do a trial run, creating, pushing and printing some tasks.) 115.32 680.77 T
(      t:TASK; ct:CLIENT_TASK;) 115.32 671.77 T
(      tm:TASK_MANAGER:=TASK_MANAGER::create;) 115.32 662.77 T
(      tm.push\050t.create\050\322File report 1\323\051\051;) 115.32 653.77 T
(      tm.push\050ct.create\050\322Edit Malloy document\323, 17, 2.5\051\051;) 115.32 644.77 T
(      tm.pop_and_print;) 115.32 635.77 T
(      tm.push\050t.create\050\322Prepare transparencies\323\051\051;) 115.32 626.77 T
(      tm.pop_and_print;) 115.32 617.77 T
(      tm.pop_and_print;) 115.32 608.77 T
(   end;) 115.32 599.77 T
(end; -- class TASK_TRIAL) 115.32 581.77 T
(--------------------------------------------------------------------) 115.32 563.77 T
4 10 Q
0.14 (The example is contained in the file \322example.sa\323. While this example defines five classes) 115.32 532.44 P
0.41 (in a single source file, they would more typically be separated into two or more separate) 115.32 520.44 P
-0.11 (files. Section 10 describes the compilation process which is initiated by the shell command) 115.32 508.44 P
-0.08 (\322cs task_trial\323 .  The compiler produces a directory \322task_trial.cs\323 which contains the gen-) 115.32 496.44 P
-0.13 (erated C files and the binary file \322task_trial\323 which is the executable program. The routine) 115.32 484.44 P
-0.17 (named \322main\323 in the class \322TASK_TRIAL\323 will be executed when the program is run.  On) 115.32 472.44 P
(execution, the program generates the output:) 115.32 460.44 T
6 8 Q
(Task: Edit Malloy document Client: 17 Allowed time: 2.5 hours) 115.32 443.77 T
(Task: Prepare transparencies) 115.32 434.77 T
(Task: File report 1) 115.32 425.77 T
5 11 Q
(2.2. T) 115.32 396.77 T
(erminology) 140.03 396.77 T
4 10 Q
0.03 (The example shows the structures common to all Sather programs. All code is partitioned) 115.32 371.44 P
-0.06 (into units called) 115.32 359.44 P
0 F
-0.06 (classes.) 188.45 359.44 P
4 F
-0.06 (  The entities defined in a class are called its) 217.78 359.44 P
0 F
-0.06 (features) 411.9 359.44 P
4 F
-0.06 (. There are four) 443.56 359.44 P
0.41 (kinds of feature:) 115.32 347.44 P
0 F
0.41 (routines, object attributes, shared attributes,) 191.08 347.44 P
4 F
0.41 ( and) 370.85 347.44 P
0 F
0.41 ( constant attributes.) 390.67 347.44 P
4 F
0.41 (The col-) 475.55 347.44 P
-0.23 (lection of object attributes in a class defines the structure of the) 115.32 335.44 P
0 F
-0.23 (objects) 391.82 335.44 P
4 F
-0.23 ( which belong to that) 418.84 335.44 P
0.76 (class. Internally, a typical  object consists of a chunk of memory and an inital tag which) 115.32 323.44 P
0.07 (identifies its class. A program may create many objects which belong to the same class. In) 115.32 311.44 P
0.77 (contrast, only one instance of any shared or constant attribute is ever created. These are) 115.32 299.44 P
-0.22 (statically allocated variables that are directly accessible by all objects in a class.  The values) 115.32 287.44 P
(of constant attributes are not modifiable.) 115.32 275.44 T
0.75 (The features of) 115.32 251.44 P
0 F
0.75 (non-parameterized  classes) 185.96 251.44 P
4 F
0.75 ( are completely specified by the class definition.) 294.81 251.44 P
0.07 (The only) 115.32 239.44 P
0 F
0.07 (parameterized class) 156.93 239.44 P
4 F
0.07 (in the example is \322STACK{T}\323.  Such classes leave certain) 237.76 239.44 P
0 F
0.07 (type) 494.1 239.44 P
0.01 (parameters) 115.32 227.44 P
4 F
0.01 ( to be specified when the class is used. In the example, \322TASK_MANAGER\323 in-) 159.73 227.44 P
-0.01 (herits \322STACK{$TASK}\323. This instantiates the type parameter \322T\323 in \322STACK{T}\323 to have) 115.32 215.44 P
-0.39 (the value \322$TASK\323.  Notice that the author of \322STACK{T}\323 need not have known about the) 115.32 203.44 P
-0.25 (eventual instantiation of \322T\323 by \322$TASK\323. The compiler can generate efficient code appro-) 115.32 191.44 P
-0.12 (priate for use with a newly written class from an unchanged version of previously written) 115.32 179.44 P
(code.) 115.32 167.44 T
FMENDPAGE
%%EndPage: "6" 7
%%Page: "7" 7
595.3 841.9 0 FMBEGINPAGE
115.32 753.27 511.32 763.28 R
7 X
0 K
V
0 10 Q
0 X
(Classes) 298.6 756.61 T
3 F
(7) 506.32 756.61 T
511.32 749.11 115.32 749.11 2 L
7 X
V
0.25 H
2 Z
0 X
N
115.32 155.11 511.32 713.11 R
7 X
V
4 F
0 X
-0.35 (In cases where a variable must be able to hold objects of more than one class, feature access) 115.32 706.44 P
0.62 (must be deferred to run-time. The compiler generates code which uses an object\325s tag to) 115.32 694.44 P
0.53 (dispatch dynamically to the proper feature. In Sather this) 115.32 682.44 P
0 F
0.53 (dynamic dispatch) 375.2 682.44 P
4 F
0.53 ( is constrained) 446.34 682.44 P
0.57 (by the type system via the notion of) 115.32 670.44 P
0 F
0.57 (inheritance) 280.26 670.44 P
4 F
0.57 (. The inheritance relation gives rise to the) 325.42 670.44 P
-0.53 (notion of the) 115.32 658.44 P
0 F
-0.53 (descendent classes) 172.58 658.44 P
4 F
-0.53 (of a class.  The type specifier for dynamically typed variables) 247.41 658.44 P
0.6 (consists of a dollar sign followed by a static type specifier. The dollar sign indicates that) 115.32 646.44 P
0.48 (references to these variables are slightly more expensive than other references. In the ex-) 115.32 634.44 P
-0.54 (ample \322$TASK\323 refers to the descendents of the class \322TASK\323. The  rule is that the dynamic) 115.32 622.44 P
0.34 (run-time class associated with an object which is held in a variable must be a descendent) 115.32 610.44 P
0.14 (of the class which follows the dollar sign in its type specification. As detailed in section 4,) 115.32 598.44 P
0.27 (only features which are defined in the parent class and have the same form in all descen-) 115.32 586.44 P
0.14 (dents may be applied to such an object. Their definition will be determined at runtime by) 115.32 574.44 P
(the object\325s actual type.) 115.32 562.44 T
115.32 506.08 511.32 509.11 C
79.32 507.59 547.32 507.59 2 L
0.25 H
2 Z
0 X
0 K
N
7.32 47.11 619.32 839.11 C
5 14 Q
0 X
0 K
(3. Classes) 115.32 513.77 T
4 10 Q
-0.41 (All code in Sather is organized into) 115.32 485.42 P
0 F
-0.41 (classes) 270.28 485.42 P
4 F
-0.41 (. Class names must consist of only upper case let-) 297.11 485.42 P
0.45 (ters and underscores. Each class definition must be contained in a single source code file) 115.32 473.42 P
0.04 (\050with the exception of the C class\051, but multiple classes may be defined in the same file by) 115.32 461.42 P
(separating their definitions by semicolons. Class definitions have the form:) 115.32 449.42 T
6 8 Q
(class <class descriptor> is) 115.32 432.75 T
(    <feature list>) 115.32 423.75 T
(end) 115.32 414.75 T
4 10 Q
-0.3 (All class names are globally visible, but feature names belong to a separate namespace and) 115.32 392.42 P
-0.37 (do not conflict with class names.  The body of a class definition consists of a semicolon sep-) 115.32 380.42 P
(arated list of feature specifications.) 115.32 368.42 T
5 11 Q
(3.1. Parameterized and Non-parameterized Classes) 115.32 337.75 T
4 10 Q
-0.3 (Classes are either) 115.32 312.42 P
0 F
-0.3 (parameterized) 193.65 312.42 P
4 F
-0.3 (or) 252.48 312.42 P
0 F
-0.3 ( non-parameterized) 261.89 312.42 P
4 F
-0.3 (.  The <class descriptor> in non-param-) 339.6 312.42 P
0.8 (eterized classes is just  the name of the class \050eg. \322FOO\323\051.  In parameterized classes, the) 115.32 300.42 P
0.15 (<class descriptor> consists of the name of the class followed by a list of comma separated) 115.32 288.42 P
1.34 (type variables in curly brackets \050eg. \322PCLASS{A,B,C}\323\051. When a parameterized class is) 115.32 276.42 P
0.56 (used, each of its parameters must be instantiated with classes \050eg. \322PCLASS{INT, REAL,) 115.32 264.42 P
-0.04 (BOOL}\323\051. Parameter names are local to the parameterized class in which they are defined,) 115.32 252.42 P
(but are in the same name space as class names and shadow them.) 115.32 240.42 T
5 11 Q
(3.2. Inheritance) 115.32 209.75 T
4 10 Q
0.4 (A class \322A\323  inherits the features of another class \322B\323 when the name \322B\323 appears in A\325s) 115.32 184.42 P
-0.11 (feature list. We say that B is a parent class and that A is a child. The semantics is exactly as) 115.32 172.42 P
0.17 (if the features of B were textually copied into A at the point the name appears. Any refer-) 115.32 160.42 P
FMENDPAGE
%%EndPage: "7" 8
%%Page: "8" 8
595.3 841.9 0 FMBEGINPAGE
115.32 753.27 511.32 763.28 R
7 X
0 K
V
3 10 Q
0 X
(8) 115.32 756.61 T
0 F
(Classes) 298.6 756.61 T
510.95 749.11 115.32 749.11 2 L
7 X
V
0.25 H
2 Z
0 X
N
115.32 155.11 511.32 713.11 R
7 X
V
4 F
0 X
2.89 (ences that appear in the inherited  feature definitions will be resolved in the new) 115.32 706.44 P
-0.33 (namespace. Later features in a class with the same name as earlier ones override the earlier) 115.32 694.44 P
0.19 (definitions. This means that the order in which classes are inherited can have an effect on) 115.32 682.44 P
-0.55 (the meaning. A class may inherit from many other classes. This is called) 115.32 670.44 P
0 F
-0.55 (multiple inheritance.) 427.83 670.44 P
4 F
0.99 (The inheritance relations relating classes define a directed graph whose vertices are the) 115.32 658.44 P
0.12 (classes. This graph may not contain cycles. For example, if A inherits from B, then B must) 115.32 646.44 P
(not inherit from A. The inheritance graph is therefore a directed acyclic graph \050DAG\051.) 115.32 634.44 T
5 11 Q
(3.3. Ordinary Object Layout) 115.32 603.77 T
4 10 Q
0.9 (In the most common situation, the memory for a variable \322v\323 holding an object of type) 115.32 578.44 P
-0.29 (\322TASK\323 will look like the following diagram. The variable v actually holds a pointer to the) 115.32 566.44 P
0.06 (memory allocated for the object. The object itself consists of an integer tag which specifies) 115.32 554.44 P
-0.54 (the class \322TASK\323 and enough memory to hold the various object attributes specified in that) 115.32 542.44 P
-0.17 (class. There is no distinction between the objects of parameterized and non-parameterized) 115.32 530.44 P
(classes.) 115.32 518.44 T
5 11 Q
(3.4. V) 115.32 401.8 T
(oid) 141.06 401.8 T
4 10 Q
1.37 (All variables ar) 115.32 384.46 P
1.37 (e automatically initialized. V) 185.36 384.46 P
1.37 (ariables which hold pointers ar) 315.59 384.46 P
1.37 (e initialized) 458.15 384.46 P
1.02 (to the special value \322void\323. This value means that no object is curr) 115.32 372.46 P
1.02 (ently held. V) 419.23 372.46 P
1.02 (ariables) 477 372.46 P
0.52 (may be explicitly assigned the void value \050eg. \322a:=void\323\051 and equality with void may be) 115.32 360.46 P
0.68 (tested \050eg. \322a=void\323\051. Ther) 115.32 348.46 P
0.68 (e ar) 234.94 348.46 P
0.68 (e certain r) 251.67 348.46 P
0.68 (estrictions on the operations which may be per-) 296.73 348.46 P
(formed on variables whose value is void which ar) 115.32 336.46 T
(e described later) 335.33 336.46 T
(.) 407.12 336.46 T
5 11 Q
(3.5. Stateless Classes) 115.32 305.8 T
4 10 Q
1.13 (Classes serve both the functions of declaring the str) 115.32 280.46 P
1.13 (uctur) 350.97 280.46 P
1.13 (e of objects and encapsulating) 374.49 280.46 P
0.41 (code into well-de\336ned modules. It is often convenient to de\336ne classes which don\325t have) 115.32 268.46 P
-0.28 (any object attributes. They may be used to declar) 115.32 256.46 P
-0.28 (e a collection of constants, shar) 328.85 256.46 P
-0.28 (eds or r) 463.75 256.46 P
-0.28 (ou-) 496.5 256.46 P
0.6 (tines which ar) 115.32 244.46 P
0.6 (e useful in mor) 178.6 244.46 P
0.6 (e than one place. W) 246.76 244.46 P
0.6 (e will call such clases) 334.59 244.46 P
0 F
0.6 (stateless classes) 433.29 244.46 P
4 F
0.6 (. In) 496.54 244.46 P
0.25 (many cases they are defined only  to be inherited by other classes. When a variable is de-) 115.32 232.46 P
0.1 (clared to be an explicit stateless class, it is often convenient to keep its value as \322void\323 be-) 115.32 220.46 P
-0.14 (cause no space will be declared to hold anything anyway. In cases in which we would like) 115.32 208.46 P
0 (to choose routines or shared or constant attributes dynamically at runtime, we need to ac-) 115.32 196.46 P
115.32 155.11 511.32 713.11 C
205.71 429.13 420.92 515.11 C
205.71 429.13 420.92 515.11 R
7 X
0 K
V
223.71 488.11 259.71 497.11 R
V
0.5 H
2 Z
0 X
N
295.71 488.11 331.71 497.11 R
7 X
V
0 X
N
295.71 443.11 331.71 488.11 R
7 X
V
0 X
N
284.17 495.7 295.71 492.39 284.17 489.08 284.17 492.39 4 Y
V
259.71 492.39 284.17 492.39 2 L
N
4 10 Q
(v) 240.53 500.41 T
(object) 299.1 500.41 T
(tag for class TASK) 336.96 489.7 T
(object attributes) 339.1 466.84 T
115.32 155.11 511.32 713.11 C
7.32 47.11 619.32 839.11 C
FMENDPAGE
%%EndPage: "8" 9
%%Page: "9" 9
595.3 841.9 0 FMBEGINPAGE
115.32 753.27 511.32 763.28 R
7 X
0 K
V
0 10 Q
0 X
(Classes) 298.6 756.61 T
3 F
(9) 506.32 756.61 T
511.32 749.11 115.32 749.11 2 L
7 X
V
0.25 H
2 Z
0 X
N
115.32 155.11 511.32 713.11 R
7 X
V
4 F
0 X
-0.32 (tually create objects corresponding to stateless classes. Since they have no object attributes,) 115.32 706.44 P
(internally such objects consist of only the tag which is used for dispatching.) 115.32 694.44 T
5 11 Q
(3.6. Basic Classes) 115.32 626.13 T
4 10 Q
-0.26 (The basic classes form the construction material for all other classes. They include the built) 115.32 600.8 P
-0.12 (in classes \322BOOL\323, \322CHAR\323, \322INT\323, \322REAL\323, and \322DOUBLE\323 and any class which inher-) 115.32 588.8 P
0.05 (its from one of these.  Entities which are declared to hold basic types reserve space for the) 115.32 576.8 P
-0.53 (data they hold rather than a pointer to another object. For example if \322v\323 is declared to hold) 115.32 564.8 P
(an integer, then the memory allocated for it  looks like the following diagram. .) 115.32 552.8 T
0.19 (To prevent ambiguity during dispatching, basic classes may only inherit from other basic) 115.32 491.15 P
-0.02 (classes derived from the same built in class.  If \322A\323 inherits from \322INT\323 and \322B\323, then \322B\323) 115.32 479.15 P
0.95 (must also inherit from \322INT\323. Basic classes may not inherit from stateless classes, array) 115.32 467.15 P
-0.37 (classes \050see below\051 or classes with object attributes.  Dispatching on basic classes is not per-) 115.32 455.15 P
-0.14 (mitted \050eg. \322$INT\323  is not a legal declaration \051. Variables of basic type are initialized as fol-) 115.32 443.15 P
(lows: BOOL\325s to False, CHAR\325s to \1340, INT\325s to 0, REAL\325s and DOUBLE\325s to 0.0.) 115.32 431.15 T
5 11 Q
(3.7. Array Classes) 115.32 400.49 T
4 10 Q
-0.03 (A class may inherit from at most one of the builtin  classes  \322ARRAY{<type-spec>}\323, \322AR-) 115.32 375.15 P
0.39 (RAY2{<type-spec>}\323, \322ARRAY3{<type-spec>}\323 or \322ARRAY4{<type-spec>}\323. Such classes) 115.32 363.15 P
0.16 (are called) 115.32 351.15 P
0 F
0.16 (array classes) 160.52 351.15 P
4 F
0.16 ( and their objects include space for  1, 2, 3, or 4 dimensional arrays,) 214.32 351.15 P
0.05 (respectively.  The space allocated to such objects is determined at the time of creation and) 115.32 339.15 P
0.47 (includes a variable sized array portion after the object attributes.  The memory layout  is) 115.32 327.15 P
(shown in the diagram.) 115.32 315.15 T
0.02 (Array classes are usually fairly low level classes which are defined in the system libraries.) 115.32 209.34 P
0.01 (Most user classes will not directly inherit from array classes but rather will have object at-) 115.32 197.34 P
(tributes which point to array class objects \050eg.  \322a:ARRAY{INT}\323\051.) 115.32 185.34 T
115.32 155.11 511.32 713.11 C
215.71 653.46 410.92 691.11 C
215.71 653.46 410.92 691.11 R
7 X
0 K
V
233.71 664.11 269.71 673.11 R
V
0.5 H
2 Z
0 X
N
305.71 664.11 341.71 673.11 R
7 X
V
0 X
N
294.17 671.7 305.71 668.39 294.17 665.08 294.17 668.39 4 Y
V
269.71 668.39 294.17 668.39 2 L
N
4 10 Q
(v) 250.53 676.41 T
(object) 309.1 676.41 T
(tag for class) 346.96 665.7 T
115.32 155.11 511.32 713.11 C
7.32 47.11 619.32 839.11 C
115.32 155.11 511.32 713.11 C
231.54 511.82 395.09 549.46 C
231.54 511.82 395.09 549.46 R
7 X
0 K
V
249.54 522.46 285.54 531.46 R
V
0.5 H
2 Z
0 X
N
4 10 Q
(v) 266.36 534.77 T
(room for one integer) 292.79 524.89 T
115.32 155.11 511.32 713.11 C
7.32 47.11 619.32 839.11 C
115.32 155.11 511.32 713.11 C
173.21 230.01 453.42 311.82 C
173.21 230.01 453.42 311.82 R
7 X
0 K
V
191.21 284.82 227.21 293.82 R
V
0.5 H
2 Z
0 X
N
263.21 284.82 299.21 293.82 R
7 X
V
0 X
N
263.21 263.99 299.21 284.82 R
7 X
V
0 X
N
251.67 292.41 263.21 289.11 251.67 285.8 251.67 289.11 4 Y
V
227.21 289.11 251.67 289.11 2 L
N
4 10 Q
(v) 208.03 297.13 T
(object) 266.6 297.13 T
(tag for class) 304.46 286.41 T
(object attributes) 306.6 272.72 T
263.21 256.49 299.21 265.65 R
7 X
V
0 X
N
263.21 233.15 299.21 256.49 R
7 X
V
0 X
N
(array size information) 306.6 257.72 T
(variable number of array entries) 307.43 241.89 T
115.32 155.11 511.32 713.11 C
7.32 47.11 619.32 839.11 C
FMENDPAGE
%%EndPage: "9" 10
%%Page: "10" 10
595.3 841.9 0 FMBEGINPAGE
115.32 753.27 511.32 763.28 R
7 X
0 K
V
3 10 Q
0 X
(10) 115.32 756.61 T
0 F
(T) 278.84 756.61 T
(ype Declaration) 284.03 756.61 T
510.95 749.11 115.32 749.11 2 L
7 X
V
0.25 H
2 Z
0 X
N
115.32 155.11 511.32 713.11 R
7 X
V
115.32 696.08 511.32 699.11 C
79.32 697.59 547.32 697.59 2 L
0.25 H
2 Z
0 X
0 K
N
7.32 47.11 619.32 839.11 C
5 14 Q
0 X
0 K
(4. T) 115.32 703.77 T
(ype Declaration) 136.74 703.77 T
4 10 Q
1.22 (There are six kinds of variables in Sather: the shared, constant, and object attributes of) 115.32 675.42 P
-0.1 (classes, and the arguments, local variables, and return values of routines. The type of each) 115.32 663.42 P
0.47 (of these variables is declared when it is introduced. Most variable declarations consist of) 115.32 651.42 P
(the variable name followed by a colon and a type specification.) 115.32 639.42 T
5 11 Q
(4.1. The Four Kinds of T) 115.32 608.75 T
(ype Speci\336cation) 230.11 608.75 T
4 10 Q
(The four kinds of type specification are:) 115.32 583.42 T
1 9 Q
(1.) 115.32 565.42 T
0 10 Q
(Non-parameterized:) 128.85 565.42 T
4 F
(The name of a non-parameterized class: eg. \322T) 211.57 565.42 T
(ASK\323.) 415.32 565.42 T
1 9 Q
(2.) 115.32 550.42 T
0 10 Q
0.6 (Parameterized:) 128.85 550.42 P
4 F
0.6 (The name of a parameterized class with its type variables speci\336ed: eg.) 192.18 550.42 P
1.92 (PCLASS{INT) 128.85 538.42 P
1.92 (, REAL, T) 186.74 538.42 P
1.92 (ASK}. The type variables may be instantiated by any of the) 232.62 538.42 P
(speci\336ers given her) 128.85 526.42 T
(e, eg. A{B{INT}} or A{$T) 214.33 526.42 T
(ASK}.) 320.35 526.42 T
1 9 Q
(3.) 115.32 511.42 T
0 10 Q
1.94 (T) 128.85 511.42 P
1.94 (ype Parameter:) 134.04 511.42 P
4 F
1.94 (A type variable in parameterized classes. In the class \322ST) 200.93 511.42 P
1.94 (ACK{T}\323,) 468.92 511.42 P
(\322T\323  is a valid type speci\336cation.) 128.85 499.42 T
1 9 Q
(4.) 115.32 484.42 T
0 10 Q
0.95 (Dispatched:) 128.85 484.42 P
4 F
0.95 (A dollar sign, followed by a type speci\336cation. This is a type  which will) 179.95 484.42 P
0.69 (be dynamically dispatched at r) 128.85 472.42 P
0.69 (untime, eg. \322$T) 267.71 472.42 P
0.69 (ASK\323. This  speci\336cation indicates that) 336.43 472.42 P
1.19 (the r) 128.85 460.42 P
1.19 (untime class will be a subclass  of the given class. Only featur) 150.27 460.42 P
1.19 (es de\336ned in the) 434.98 460.42 P
(given class may be  applied. Basic types may not be dispatched.) 128.85 448.42 T
3.96 (Some example variable declarations include: \322a:INT\323, \322a:TASK\323, \323a:$TASK\323, \322a:P-) 115.32 424.42 P
(CLASS{INT,REAL,FOO}\323, and in class \322STACK{T}\323 the specification \322a:T\323.) 115.32 412.42 T
5 11 Q
(4.2. SELF_TYPE, UNDEFINE,  $OB, F_OB) 115.32 381.75 T
4 10 Q
-0.24 (There are four additional declarations which are used in special circumstances.  The decla-) 115.32 356.42 P
0.07 (ration \322SELF_TYPE\323 may be used to refer to the type of the class in which the declaration) 115.32 344.42 P
0.24 (appears. This is useful in classes which will be inherited by other classes. The declaration) 115.32 332.42 P
0.07 (refers to the final class in which it occurs rather than that of the parent. A typical example) 115.32 320.42 P
0.1 (might be a class \322LINK\323 which is used in  implementing linked lists. The basic class must) 115.32 308.42 P
0.51 (define a pointer to the next entry in the list. A descendent of this class will typically add) 115.32 296.42 P
0.24 (extra information to be stored with these links. We want the links in the descendent class) 115.32 284.42 P
0.41 (to point to other objects whose type is the descendent class, not the class \322LINK\323. By de-) 115.32 272.42 P
0.52 (claring the pointer to be of type \322SELF_TYPE\323 rather than \322LINK\323 we obtain the proper) 115.32 260.42 P
(behavior.) 115.32 248.42 T
-0.42 (In class feature lists the specification \322UNDEFINE\323 may be used to eliminate features. This) 115.32 224.42 P
0.11 (is especially useful when a class inherits from another class but should not retain all of its) 115.32 212.42 P
-0.21 (features. Elimination of a parent\325s object or shared attributes can save space when they are) 115.32 200.42 P
-0.3 (not needed. If \322a:INT\323 is defined in a parent class, then a descendent may want to have the) 115.32 188.42 P
0.3 (line \322a:UNDEFINE\323 in its feature list. As with other feature definitions, this will be over-) 115.32 176.42 P
(ridden by any later definitions in the list with the same name.) 115.32 164.42 T
FMENDPAGE
%%EndPage: "10" 11
%%Page: "11" 11
595.3 841.9 0 FMBEGINPAGE
115.32 753.27 511.32 763.28 R
7 X
0 K
V
0 10 Q
0 X
(T) 278.84 756.61 T
(ype Declaration) 284.03 756.61 T
3 F
(1) 501.69 756.61 T
(1) 506.32 756.61 T
511.32 749.11 115.32 749.11 2 L
7 X
V
0.25 H
2 Z
0 X
N
115.32 155.11 511.32 713.11 R
7 X
V
4 F
0 X
-0.12 (The declaration $OB may be used to declare a variable which may hold an arbitrary object) 115.32 706.44 P
0.41 (of non-basic type. The feature  \322copy\323 may be applied to such a variable to get a copy of) 115.32 694.44 P
-0.03 (the object it points to. The feature \322type\323 may be applied to retrieve the integer type label.) 115.32 682.44 P
0.19 (It is also permitted to apply certain other restricted features to \322$OB\323 variables but this is) 115.32 670.44 P
-0.31 (most common in system code. If the  call \322o.foo\323 appears when o is declared \322o:$OB\323, then) 115.32 658.44 P
-0.19 (it is required that \322foo\323 be a routine with no arguments and no return value in any class in) 115.32 646.44 P
0.71 (which it is defined. The runtime type of \322o\323 will be checked and if  a function with this) 115.32 634.44 P
-0.07 (name is defined for it, it will be exectuted, otherwise the call is ignored. This is used in the) 115.32 622.44 P
0.3 (system libraries, for example, to cause hash tables which hash on object pointer values to) 115.32 610.44 P
0.32 (be rehashed when deep copied or restored from a disk file. \322$OB\323 variables  may also be) 115.32 598.44 P
0.47 (tested for equality with other variables or with \322void\323.  A common use for such declara-) 115.32 586.44 P
-0.48 (tions is in general container classes such as lists. When an element is extracted it is assigned) 115.32 574.44 P
-0 (to a variable of the appropriate type \050perhaps by switching on the type\051 and more specific) 115.32 562.44 P
(operations are then applied to the new variable.) 115.32 550.44 T
0.11 (The type \322F_OB\323 is used to refer to \322foreign pointers\323. These might be used, for example,) 115.32 526.44 P
-0.48 (to hold references to C structures. Such pointers are never followed by Sather and are treat-) 115.32 514.44 P
(ed essentially as integers which disallow arithmetic operations.) 115.32 502.44 T
5 11 Q
(4.3. T) 115.32 471.77 T
(ype Conformance) 140.37 471.77 T
4 10 Q
0.42 (The basic type r) 115.32 446.44 P
0.42 (ule in Sather is that a variable may hold an object only if  the class of the) 186.39 446.44 P
0.23 (object) 115.32 434.44 P
0 F
0.23 (conforms) 146.58 434.44 P
4 F
0.23 ( to the variable\325s type specifier. This section defines the conformance rela-) 183.41 434.44 P
-0.43 (tion in terms of the inheritance graph.  That t1 conforms to t2 is meant to capture the notion) 115.32 422.44 P
-0.5 (that code generated under the assumption that an object\325s type is t2 will still be type correct) 115.32 410.44 P
-0.15 (on objects of type t1. Some properties we would like conformance to satisfy are that a type) 115.32 398.44 P
0.34 (conforms to itself, conformance is transitive \050ie. if t1 conforms to t2 and t2 conforms to t3) 115.32 386.44 P
-0.07 (then t1 conforms to t3\051, if a type specifier t2 appears in the inheritance list for t1, then both) 115.32 374.44 P
0.29 (t1 and $t1 conform to $t2 and if t1 and t2 are different instantiations of the same parame-) 115.32 362.44 P
-0.35 (terized class \050eg. FOO{A} and FOO{$B}\051 and each parameter instantiation in t1 conforms to) 115.32 350.44 P
-0.42 (the corresponding one in t2, then t1 conforms to t2. As an example to see why this last form) 115.32 338.44 P
-0.24 (of conformance is important, consider tree nodes which hold geometric shapes. We would) 115.32 326.44 P
0.73 (like to be able to hold nodes of type TREE{SQUARE} in variables of type TREE{$POLY-) 115.32 314.44 P
0.07 (GON}. Finally, all descendents of a basic type conform to one another. There is a nice the-) 115.32 302.44 P
0.16 (orem \050see \322The Sather Implementation\323\051 that gives a simple set of rules which lead to the) 115.32 290.44 P
(simplest conformance partial order which satisfies these requirements.) 115.32 278.44 T
-0.37 (Type specifications which begin with a \322$\323, are called \322dispatched\323 types. In Sather, a type) 115.32 254.44 P
(specification t1 conforms to a type specification t2 when:) 115.32 242.44 T
1 9 Q
(1.) 115.32 224.44 T
4 10 Q
0.65 (If t2 is a non-dispatched non-parameterized type \050eg. FOO\051, then t1 is the  same type) 128.85 224.44 P
(\050eg. FOO\051.) 128.85 212.44 T
1 9 Q
(2.) 115.32 197.44 T
4 10 Q
1 (If t2 is a dispatched non-parameterized type \050eg. $FOO\051, then t1 is a subtype  of the) 128.85 197.44 P
(non-parameterized type \050eg. BAR wher) 128.85 185.44 T
(e BAR is a descendent of FOO\051.) 302.67 185.44 T
FMENDPAGE
%%EndPage: "11" 12
%%Page: "12" 12
595.3 841.9 0 FMBEGINPAGE
115.32 753.27 511.32 763.28 R
7 X
0 K
V
3 10 Q
0 X
(12) 115.32 756.61 T
0 F
(T) 278.84 756.61 T
(ype Declaration) 284.03 756.61 T
510.95 749.11 115.32 749.11 2 L
7 X
V
0.25 H
2 Z
0 X
N
115.32 155.11 511.32 713.11 R
7 X
V
1 9 Q
0 X
(3.) 115.32 706.44 T
4 10 Q
0.12 (If t2 is a non-dispatched parameterized type \050eg. FOO{A,$B,C}\051,  then t1 is also param-) 128.85 706.44 P
1.11 (eterized, has the same number of type  variables, has the same base class as t2, and) 128.85 694.44 P
1.06 (has type parameter  instantiations which conform to those of t2\325s \050eg. FOO{A, D, C}) 128.85 682.44 P
(wher) 128.85 670.44 T
(e D is a subtype of B\051.) 151.56 670.44 T
1 9 Q
(4.) 115.32 655.44 T
4 10 Q
0.26 (If t2 is a dispatched parameterized type \050eg. $FOO{A,$B,C}\051, then  t1 must either be or) 128.85 655.44 P
0.32 (inherit fr) 128.85 643.44 P
0.32 (om a class which would conform with the  underlying type \050eg. BAR if it is a) 168.21 643.44 P
(descendent of FOO{A,D,C} wher) 128.85 631.44 T
(e D  conforms to $B\051.) 273.5 631.44 T
1 9 Q
(5.) 115.32 616.44 T
4 10 Q
0.2 (If t2 is a basic type, then t1 is a descendent of the same ancestor) 128.85 616.44 P
0.2 (. Eg. all descendents of) 409.88 616.44 P
(INT conform to one another) 128.85 604.44 T
(.) 252.03 604.44 T
5 11 Q
(4.4. Dynamic Dispatch) 115.32 573.77 T
4 10 Q
0.61 (If features are inherited for the purpose of dynamic dispatch, then several aspects of the) 115.32 548.44 P
0.36 (form of entities in the parent class must be preserved in the descendents. If this were not) 115.32 536.44 P
0.25 (the case, the compiler could not infer the information it needs about dispatched calls. For) 115.32 524.44 P
1.01 (example, if the variable \322a\323 is declared as \322a:$PARENT\323 and we wish to make the dis-) 115.32 512.44 P
0.35 (patched call \322a.f\323, then the definition of \322f\323 in the descendents of \322PARENT\323 must agree) 115.32 500.44 P
-0.61 (in several respects with its definition in \322PARENT\323. If \322f\323 is respectively an object attribute,) 115.32 488.44 P
0.26 (a shared attribute, a constant attribute, or a routine in \322PARENT\323, then it must also be in) 115.32 476.44 P
0.05 (all of the descendents of \322PARENT\323. If \322f\323 is an attribute, then its type in the descendents) 115.32 464.44 P
0.12 (must conform to its type in \322PARENT\323.  If \322f\323 is a routine, it must have the same number) 115.32 452.44 P
-0.56 (of arguments and return value and their types must  conform with those in the parent class.) 115.32 440.44 P
-0.32 (If dispatched array access is used, then the descendent classes must have the same number) 115.32 428.44 P
(of array dimensions as the parent.) 115.32 416.44 T
0.08 (There is no constraint on any feature which is never used in a dispatched fashion. A com-) 115.32 392.44 P
-0.14 (mon example is the function \322create\323. This is often defined in a class to make new instanc-) 115.32 380.44 P
0.03 (es, initializing their attribute slots with its arguments. Different classes will typically need) 115.32 368.44 P
-0.21 (different numbers of arguments, yet it is convenient to use the same name \322create\323 in each) 115.32 356.44 P
-0.29 (class. This causes no problems if one never applies \322create\323 to a variable with a dispatched) 115.32 344.44 P
(type.) 115.32 332.44 T
0.45 (Routine calls on objects of dynamic type must be routed through a dispatch table and so) 115.32 308.44 P
0.28 (are not as efficient as calls on objects whose type is statically determined. A local caching) 115.32 296.44 P
0.12 (scheme is used so that on average only about one extra comparison and two pointer indi-) 115.32 284.44 P
(rections are needed for dynamic dispatch.) 115.32 272.44 T
0.06 (Sather does not attempt to catch all possible type errors during compilation. Typical rules) 115.32 248.44 P
0.28 (for guaranteeing  absolute type safety are either too complex or too confining. An oppor-) 115.32 236.44 P
0.71 (tunity for type checking arises in assignment statements and in specifying routine argu-) 115.32 224.44 P
0.36 (ments. The basic type rule is that the runtime class of an object must conform to the type) 115.32 212.44 P
0.06 (specifier of a variable which holds it. The difficulty in checking this at compile time arises) 115.32 200.44 P
-0.22 (when the type specifier for the right hand side of an assignment is itself dispatched. In this) 115.32 188.44 P
0.24 (case the runtime class of the object may legally be any  of a number of possibilities. Some) 115.32 176.44 P
0.07 (of these possibilities may  conform to the left hand side while others do not. To guarantee) 115.32 164.44 P
FMENDPAGE
%%EndPage: "12" 13
%%Page: "13" 13
595.3 841.9 0 FMBEGINPAGE
115.32 753.27 511.32 763.28 R
7 X
0 K
V
0 10 Q
0 X
(Attributes) 292.4 756.61 T
3 F
(13) 501.32 756.61 T
511.32 749.11 115.32 749.11 2 L
7 X
V
0.25 H
2 Z
0 X
N
115.32 155.11 511.32 713.11 R
7 X
V
4 F
0 X
0.09 (type-safety, we could disallow any assignments in which the type specifier for right hand) 115.32 706.44 P
0.81 (side admitted objects which would not be allowed on the left hand side. Unfortunately,) 115.32 694.44 P
-0.49 (such a constraint is very confining and tends to lead to convoluted code. \050eg: A library class) 115.32 682.44 P
-0.55 (defines lists of polygons, you have created a list of squares, you pop off a square and would) 115.32 670.44 P
-0.1 (like to assign it to a variable of type square. Because the list was defined to hold polygons,) 115.32 658.44 P
-0 (the compiler would not allow the assignment\051.  The Sather approach is to generate a com-) 115.32 646.44 P
0.19 (piler error only if there is no possible value for the right hand side which conforms to the) 115.32 634.44 P
0.09 (left hand side. For non-dispatched type specifiers this convention yields strict type check-) 115.32 622.44 P
0.91 (ing.  Runtime type checking of assignments of dynamically typed variables to statically) 115.32 610.44 P
(typed ones may be enabled by compiling with the \322-chk\323 flag.) 115.32 598.44 T
115.32 542.08 511.32 545.11 C
79.32 543.59 547.32 543.59 2 L
0.25 H
2 Z
0 X
0 K
N
7.32 47.11 619.32 839.11 C
5 14 Q
0 X
0 K
(5. Attributes) 115.32 549.77 T
4 10 Q
1.22 (The feature lists of classes consist of five kinds of specification which are separated by) 115.32 521.42 P
-0.19 (semi-colons. We have already discussed the specification of  class inheritance. This section) 115.32 509.42 P
-0.5 (discusses the three kinds of class attribute: object, shared, and constant and the next section) 115.32 497.42 P
0.05 (describes routines. Attribute, shared attribute, and constant names are local to and visible) 115.32 485.42 P
(throughout a class. External access may be prevented by the) 115.32 473.42 T
0 F
(private) 383.14 473.42 T
4 F
(declaration.) 413.95 473.42 T
5 11 Q
(5.1. Object Attributes) 115.32 442.75 T
4 10 Q
0.02 (Object attributes define the slots in objects. The declaration appears in a class\325s feature list) 115.32 417.42 P
0.19 (and consists of  the attribute\325s name, a colon, and one of the type specifications discussed) 115.32 405.42 P
0.25 (in the last section, eg:\322a:TASK\323. Several variables may be declared to be of the same type) 115.32 393.42 P
0.11 (by separating them by commas, eg: \322a,b,c:TASK\323. If an object attribute is specified to be a) 115.32 381.42 P
0.12 (basic class, such as  BOOL, CHAR, INT, REAL, or DOUBLE, then sufficient aligned space) 115.32 369.42 P
-0.23 (will be reserved in the runtime objects to hold the appropriate quantities. Any other decla-) 115.32 357.42 P
(ration reserves space for a pointer.) 115.32 345.42 T
5 11 Q
(5.2. Shar) 115.32 314.75 T
(ed Attributes) 156.94 314.75 T
4 10 Q
-0.11 (Shared attributes are shared by all objects in a given class. Their declarations are preceded) 115.32 289.42 P
(by the \322shared\323 keyword:) 115.32 277.42 T
6 8 Q
(shared a:INT;) 115.32 260.75 T
4 10 Q
(and they may be initialized:) 115.32 238.42 T
6 8 Q
(shared a:INT := 3;) 115.32 221.75 T
4 10 Q
0.87 (The initialization code is run before any other code. If the initialization of a variable re-) 115.32 199.42 P
-0.39 (quires features from another class, that class must be properly initialized before the feature) 115.32 187.42 P
0.04 (is called. It is therefore an error to have circular dependences in the initialization calls \050i.e.) 115.32 175.42 P
0.56 (if an initializer for class A refers to an entity in class B, then the initializers in B may not) 115.32 163.42 P
FMENDPAGE
%%EndPage: "13" 14
%%Page: "14" 14
595.3 841.9 0 FMBEGINPAGE
115.32 753.27 511.32 763.28 R
7 X
0 K
V
3 10 Q
0 X
(14) 115.32 756.61 T
0 F
(Attributes) 292.4 756.61 T
510.95 749.11 115.32 749.11 2 L
7 X
V
0.25 H
2 Z
0 X
N
115.32 155.11 511.32 713.11 R
7 X
V
4 F
0 X
0.33 (refer to entities in A\051. A shared attribute in another class may be accessed using the form) 115.32 706.44 P
0.27 (\322CLASS::a\323 and assigned to using \322CLASS::a := 5;\323. We refer to this as \322class access\323 to a) 115.32 694.44 P
(shared variable, as opposed to \322object access\323 to it.) 115.32 682.44 T
5 11 Q
(5.3. Constant Attributes) 115.32 651.77 T
4 10 Q
(Named constant attributes are defined by a similar syntax:) 115.32 626.44 T
6 8 Q
(constant a:INT := 3;) 115.32 602.44 T
4 10 Q
0.2 (All constants must be initialized.  It is an error to try to modify the value of a constant at-) 115.32 578.44 P
0.14 (tribute. The values of constant INT\325s  and CHAR\325s whose initializer doesn\325t involve func-) 115.32 566.44 P
0.84 (tion calls are computed by the compiler and are especially valuable in conjunction with) 115.32 554.44 P
-0.46 (switch statements. As with shared variables, circular dependencies between the initializers) 115.32 542.44 P
(are not allowed.) 115.32 530.44 T
5 11 Q
(5.4. Private) 115.32 499.77 T
4 10 Q
0.92 (Any feature definition may be preceded with the keyword \322private\323. Only routines de-) 115.32 474.44 P
0.32 (fined within the class itself may access such features. Private features will also be private) 115.32 462.44 P
0.37 (in any classes which inherit them. This declaration is useful for guaranteeing that certain) 115.32 450.44 P
-0.12 (relationships within a class will be preserved. A common example is to define an attribute) 115.32 438.44 P
0.11 (as private and to provide a  routine which returns its value. This keeps other classes from) 115.32 426.44 P
(changing the value, while still allowing them to read it.) 115.32 414.44 T
5 11 Q
(5.5. The \322type\323 Attribute) 115.32 383.77 T
4 10 Q
2.24 (All classes have a predefined constant attribute named \322type\323. Its value  belongs to) 115.32 358.44 P
0.2 (CLASS_TYPE, a descendent of INT, and equals the tag on objects used to identify a class.) 115.32 346.44 P
(It is useful in constructs such as \322if a.type = FOO::type then ...\323.) 115.32 334.44 T
5 11 Q
(5.6. Cr) 115.32 303.77 T
(eating  Objects) 146.14 303.77 T
4 10 Q
0.21 (A special function, \322new\323, is defined in each class to actually allocate space for a new ob-) 115.32 278.44 P
-0.09 (ject. It is an error to override the definition of this routine. In array classes it has an integer) 115.32 266.44 P
-0.37 (argument for each dimension which specifies the size \050eg. \322ARRAY{INT}::new\05015\051\323 or AR-) 115.32 254.44 P
1.99 (RAY2{INT}::new\0507,4\051\323\051. All attributes are initialized with the default values described) 115.32 242.44 P
-0.11 (above. It is common to define a function \322create\323 which calls \322new\323 and further initializes) 115.32 230.44 P
0.29 (the attributes. The typical usage is \322a:=FOO::new\323. Sather is garbarge collected and there) 115.32 218.44 P
(is no need to explicitly deallocate objects.) 115.32 206.44 T
FMENDPAGE
%%EndPage: "14" 15
%%Page: "15" 15
595.3 841.9 0 FMBEGINPAGE
115.32 753.27 511.32 763.28 R
7 X
0 K
V
0 10 Q
0 X
(Routines) 295.27 756.61 T
3 F
(15) 501.32 756.61 T
511.32 749.11 115.32 749.11 2 L
7 X
V
0.25 H
2 Z
0 X
N
115.32 155.11 511.32 713.11 R
7 X
V
5 11 Q
0 X
(5.7. Copying  Objects) 115.32 705.77 T
4 10 Q
0.32 (Another predefined function in each class is \322copy\323. It takes no arguments and produces) 115.32 680.44 P
0.86 (an exact duplicate of an object. The library class \322SYS\323 also defines \322deep_copy\323 which) 115.32 668.44 P
0.6 (copies the entire structure reachable from an object by following object pointers. It deals) 115.32 656.44 P
0.17 (properly with general graph structures.  Array classes support the operation  \322extend\323. It) 115.32 644.44 P
0.03 (takes a number of arguments which is equal to the number of array dimensions of the ob-) 115.32 632.44 P
-0.31 (ject it is applied to. It creates a new object whose array sizes are specified by the arguments) 115.32 620.44 P
0.52 (to extend. The old entries are copied into the appropriate locations and any extra entries) 115.32 608.44 P
-0.33 (are initialized with the standard values \050eg. \322a.extend\05015\051\323 will return an extended version) 115.32 596.44 P
(of  the array \322a\323 which has 15 elements\051.) 115.32 584.44 T
115.32 528.08 511.32 531.11 C
79.32 529.59 547.32 529.59 2 L
0.25 H
2 Z
0 X
0 K
N
7.32 47.11 619.32 839.11 C
5 14 Q
0 X
0 K
(6. Routines) 115.32 535.77 T
4 10 Q
(A routine specification has the form:) 115.32 507.42 T
6 8 Q
(routine_name\050a:INT; b,c:REAL\051:BOOL is) 115.32 490.75 T
(    <statement list>) 115.32 481.75 T
(end) 115.32 472.75 T
4 10 Q
0.21 (As with attributes, routine specifications may also be preceded by the keyword \322private\323) 115.32 450.42 P
(to allow only internal access.) 115.32 438.42 T
-0.41 (If a routine has arguments, they are specified by following the routine name by a parenthe-) 115.32 414.42 P
0.39 (ses bounded list of semicolon separated argument specifications. A return value is speci-) 115.32 402.42 P
1.87 (fied by a colon followed by a type specifier for the return type. Each of the possible) 115.32 390.42 P
(combinations is legal:) 115.32 378.42 T
1 9 Q
(1.) 115.32 360.42 T
4 10 Q
(\322foo is ...\323                 \050no ar) 128.85 360.42 T
(gs, no r) 241.07 360.42 T
(esult\051) 273.4 360.42 T
1 9 Q
(2.) 115.32 345.42 T
4 10 Q
(\322foo\050a:INT\051 is ...\323          \050ar) 128.85 345.42 T
(gs, no r) 241.76 345.42 T
(esult\051) 274.09 345.42 T
1 9 Q
(3.) 115.32 330.42 T
4 10 Q
(\322foo:REAL is ...\323            \050no ar) 128.85 330.42 T
(gs, r) 257.74 330.42 T
(esult\051) 276.3 330.42 T
1 9 Q
(4.) 115.32 315.42 T
4 10 Q
(\322foo\050a:INT\051:REAL is ...\323     \050ar) 128.85 315.42 T
(gs and r) 258.43 315.42 T
(esult\051) 293.91 315.42 T
0.76 (The body of a routine is a semi-colon separated list of statements. The possible kinds of) 115.32 291.42 P
-0.54 (statements are local declarations, assignments, conditionals, loops, switches, function calls,) 115.32 279.42 P
0.35 (break, and return statements. These are described in the following section. Routine argu-) 115.32 267.42 P
0.98 (ment and local variable names are only visible within the routine and may shadow the) 115.32 255.42 P
(names of class attributes.) 115.32 243.42 T
5 11 Q
(6.1. Res) 115.32 212.75 T
4 10 Q
-0.51 (A variable named \322res\323 is automatically declared in routines with a return value. When the) 115.32 187.42 P
0.01 (routine exits, either at its end or due to a \322return\323 statement, the current value of res is re-) 115.32 175.42 P
(turned.  Like all other variables, \322res\323 is properly initialized.) 115.32 163.42 T
FMENDPAGE
%%EndPage: "15" 16
%%Page: "16" 16
595.3 841.9 0 FMBEGINPAGE
115.32 753.27 511.32 763.28 R
7 X
0 K
V
3 10 Q
0 X
(16) 115.32 756.61 T
0 F
(Statements) 290.83 756.61 T
510.95 749.11 115.32 749.11 2 L
7 X
V
0.25 H
2 Z
0 X
N
115.32 155.11 511.32 713.11 R
7 X
V
5 11 Q
0 X
(6.2. Self) 115.32 705.77 T
4 10 Q
-0.62 (Sather routines have an implicit  first argument which holds the object on which the routine) 115.32 680.44 P
0.08 (was called. This object may be refered to in the body of a routine using the name \322self\323. It) 115.32 668.44 P
(is an error to attempt to  assign to self.) 115.32 656.44 T
115.32 600.08 511.32 603.11 C
79.32 601.59 547.32 601.59 2 L
0.25 H
2 Z
0 X
0 K
N
7.32 47.11 619.32 839.11 C
5 14 Q
0 X
0 K
(7. Statements) 115.32 607.77 T
5 11 Q
(7.1. Local V) 115.32 572.75 T
(ariable Declarations) 171.07 572.75 T
4 10 Q
-0.33 (Local variables may be declared anywhere a statement is allowed. The form of a initialized) 115.32 547.42 P
0.03 (declaration is \322a:FOO := 5\323. If no initialization is provided \050eg. \322a:FOO\323\051 variables are ini-) 115.32 535.42 P
0.86 (tialized to the default initial values listed above. Multiple variables may be declared to-) 115.32 523.42 P
1 (gether as in \322a,b,c:INT\323 \050they all receive the same initialization if one is provided\051. The) 115.32 511.42 P
0.56 (scope of the declaration is local to the statement list in which it appears and any explicit) 115.32 499.42 P
(assignment occurs each time the statement is encountered during execution.) 115.32 487.42 T
5 11 Q
(7.2. Assignments) 115.32 456.75 T
4 10 Q
-0.21 (The symbol \322:=\323 is used to denote assignment. The left hand side of an expression must be) 115.32 431.42 P
-0.03 (an attribute or  shared attribute name \050a:=5\051, a class accessed shared attribute \050FOO::a:=7\051,) 115.32 419.42 P
-0.28 (an attribute or shared attribute relative to an object \050b.a:=7\051, or an array references \050a[5]:=6,) 115.32 407.42 P
0.23 (FOO::a[4]:=7, b.a[3]:=8\051. The right hand side is an arbitrary expression. If there is no legal) 115.32 395.42 P
-0.36 (value for the right hand side which conforms to the type specifier for the left hand side, the) 115.32 383.42 P
(compiler will generate an error.) 115.32 371.42 T
5 11 Q
(7.3. Conditionals) 115.32 340.75 T
4 10 Q
(Conditionals have the form:) 115.32 315.42 T
6 8 Q
(if <boolean expression> then) 115.32 298.75 T
(    <statement list>) 115.32 289.75 T
(elsif <boolean expression> then) 115.32 280.75 T
(    <statement list>) 115.32 271.75 T
(else) 115.32 262.75 T
(    <statement list>) 115.32 253.75 T
(end) 115.32 244.75 T
4 10 Q
0.62 (where the \322elsif\323 and \322else\323 parts are optional and there may be an arbitrary number of) 115.32 222.42 P
(\322elsif\323 parts.) 115.32 210.42 T
FMENDPAGE
%%EndPage: "16" 17
%%Page: "17" 17
595.3 841.9 0 FMBEGINPAGE
115.32 753.27 511.32 763.28 R
7 X
0 K
V
0 10 Q
0 X
(Statements) 290.83 756.61 T
3 F
(17) 501.32 756.61 T
511.32 749.11 115.32 749.11 2 L
7 X
V
0.25 H
2 Z
0 X
N
115.32 155.11 511.32 713.11 R
7 X
V
5 11 Q
0 X
(7.4. Loops) 115.32 705.77 T
4 10 Q
(Loops have the form:) 115.32 680.44 T
6 8 Q
(until <boolean expression> loop) 115.32 663.77 T
(    <statement list>) 115.32 654.77 T
(end) 115.32 645.77 T
4 10 Q
(or just) 115.32 623.44 T
6 8 Q
(loop) 115.32 606.77 T
(    <statement list>) 115.32 597.77 T
(end) 115.32 588.77 T
4 10 Q
(The latter form is only useful if it includes a \322break\323 or \322return\323 statement.) 115.32 566.44 T
5 11 Q
(7.5. Br) 115.32 535.77 T
(eak and Return Statements) 145.95 535.77 T
4 10 Q
0.04 (The statement consisting of only the keyword \322break\323 is used to leave the innermost loop) 115.32 510.44 P
0.37 (lexically containing it. It may only be used inside loops. The statement consisting of only) 115.32 498.44 P
-0.23 (the keyword \322return\323 causes immediate return from the routine. The return value \050if there) 115.32 486.44 P
(is one\051 will be the value of \322res\323.) 115.32 474.44 T
5 11 Q
(7.6. Switch Statements) 115.32 443.77 T
4 10 Q
(The switch statement has the form:) 115.32 418.44 T
6 8 Q
(switch <expression>) 115.32 401.77 T
(when <expression list> then) 115.32 392.77 T
(    <statement list>) 115.32 383.77 T
(when <expression list> then) 115.32 374.77 T
(    <statement list>) 115.32 365.77 T
(when <expression list> then) 115.32 356.77 T
(    <statement list>) 115.32 347.77 T
(else) 115.32 338.77 T
(    <statement list>) 115.32 329.77 T
(end) 115.32 320.77 T
4 10 Q
0.35 (There may be an arbitrary number of \322when\323 clauses and the \322else\323 clause is optional. If) 115.32 298.44 P
-0.16 (the type of the switch expression is a base type, all expressions in the \322when\323 lists must be) 115.32 286.44 P
-0.45 (of the same type. If the value of the switch expression appears in any of the \322when\323 expres-) 115.32 274.44 P
0.04 (sion lists, then the statement list following it is executed, otherwise the statements follow-) 115.32 262.44 P
0.69 (ing the optional \322else\323 clause are executed. If a value appears in more than one \322when\323) 115.32 250.44 P
0.08 (expression list, only one of the statement lists will be executed but which one is not speci-) 115.32 238.44 P
0.93 (fied. This construct is most efficient when the expression type is INT or CHAR and the) 115.32 226.44 P
0.31 (\322when\323 expression lists are all constants. In this case the compiler will usually produce a) 115.32 214.44 P
-0.55 (jump table. In other cases the generated code will be equivalent to a series of \322elsif\323 clauses.) 115.32 202.44 P
FMENDPAGE
%%EndPage: "17" 18
%%Page: "18" 18
595.3 841.9 0 FMBEGINPAGE
115.32 753.27 511.32 763.28 R
7 X
0 K
V
3 10 Q
0 X
(18) 115.32 756.61 T
0 F
(Statements) 290.83 756.61 T
510.95 749.11 115.32 749.11 2 L
7 X
V
0.25 H
2 Z
0 X
N
115.32 155.11 511.32 713.11 R
7 X
V
5 11 Q
0 X
(7.7. Routine Calls) 115.32 705.77 T
4 10 Q
-0.3 (Routine calls are usually made relative to an object and are denoted by a period. If \322a\323 is of) 115.32 680.44 P
-0.52 (class \322FOO\323, then \322a.fun\050arg1,arg2\051\323 will call the routine named \322fun\323 in class \322FOO\323 with) 115.32 668.44 P
-0.57 (the specified arguments. As with shared and constant attributes, routines may also be spec-) 115.32 656.44 P
0.35 (ified directly by \322class access\323. The class name is followed by two colons and the routine) 115.32 644.44 P
0.07 (name as in \322FOO::fun\050arg1,arg2\051\323. In this case any references to \322self\323 will have the value) 115.32 632.44 P
(\322void\323.) 115.32 620.44 T
0.78 (It is legal to access the routines, constants, and shared attributes of variables with value) 115.32 596.44 P
0.38 (\322void\323 as long as their type is specified at compile time. This is commonly used with the) 115.32 584.44 P
-0.26 (\322new\323 routine. It is also syntactically legal to access routines from the result of expressions) 115.32 572.44 P
0.79 (which are either parenthesized \050eg.  \050a+b\051.mod\050c\051\051, array references \050eg. a[7,8].fun\051, calls) 115.32 560.44 P
(\050eg. a\0509\051.b\0507\051\051, or identifiers \050eg. foo.fun\051.) 115.32 548.44 T
0.35 (Dotted routine access may also be applied directly to constants, though the use of paren-) 115.32 524.44 P
-0.32 (theses will sometimes make the call clearer \050eg. \322a string\323.len, 10.mod\0503\051, 2.3.to_i\051. One po-) 115.32 512.44 P
0.92 (tential source of errors is the fact that unary minus has a lower precedence than dotted) 115.32 500.44 P
-0.01 (access. Thus \322-10.mod\0503\051\323 means \322-\05010.mod\0503\051\051\323. One must use explicit parentheses to get) 115.32 488.44 P
(the interpretation \322\050-10\051.mod\0503\051\323.) 115.32 476.44 T
5 11 Q
(7.8. Assert and Debug Statements) 115.32 445.77 T
4 10 Q
(There are two mechanisms for including conditionally compiled code:) 115.32 420.44 T
6 8 Q
(assert\050table_overflow\051 a<200 and a>0 end;) 115.32 403.77 T
4 10 Q
(and) 115.32 381.44 T
6 8 Q
(debug\050print_slot_name\051) 115.32 364.77 T
(    a.print;) 115.32 355.77 T
(    b.print) 115.32 346.77 T
(end;) 115.32 337.77 T
4 10 Q
0.01 (The first consists of the keyword \322assert\323, a key in parentheses, a boolean expression, and) 115.32 315.44 P
0.03 (the keyword \322end\323. If the keyword is specified in the compiler control file, then the test is) 115.32 303.44 P
0.33 (performed at runtime and a message is printed if it fails. The second mechanism consists) 115.32 291.44 P
-0.46 (of the keyword \322debug\323, a compiler key, a statement list and the keyword \322end\323. If the key) 115.32 279.44 P
(is specified in the compiler control file, then the statement list will be compiled.) 115.32 267.44 T
0.2 (A list of keywords to be enabled is specified in the dot-sather file after the indicator \322\050de-) 115.32 243.44 P
0.55 (bug_keys\051\323. To enable the assert and debug expressions for a keyword in only a specific) 115.32 231.44 P
-0.46 (file, this list may include entries of the form: \322CLASS::key_to_be_enabled\323. This enables an) 115.32 219.44 P
-0.36 (author to use the same name for similar checks in different classes and to only enable those) 115.32 207.44 P
(in a class which is currently being debugged.) 115.32 195.44 T
-0.22 (There are also builtin checks that may be enabled with the \322-chk\323 compilation option. This) 115.32 171.44 P
-0.09 (enables runtime type checking of assignment and routine arguments, runtime checking of) 115.32 159.44 P
FMENDPAGE
%%EndPage: "18" 19
%%Page: "19" 19
595.3 841.9 0 FMBEGINPAGE
115.32 753.27 511.32 763.28 R
7 X
0 K
V
0 10 Q
0 X
(Expr) 289.25 756.61 T
(essions) 309.06 756.61 T
3 F
(19) 501.32 756.61 T
511.32 749.11 115.32 749.11 2 L
7 X
V
0.25 H
2 Z
0 X
N
115.32 155.11 511.32 713.11 R
7 X
V
4 F
0 X
-0 (array indices, and checks for dispatching from \322void\323 variables. A standard convention is) 115.32 706.44 P
0.09 (to use the debug key \322pre\323 for simple tests that make sure the arguments to a routine sat-) 115.32 694.44 P
0.43 (isfy the preconditions of that routine.  When first using a class or when problems are oc-) 115.32 682.44 P
(curing, compiling with the \322pre\323 key will ensure that these preconditions are satisfied.) 115.32 670.44 T
115.32 614.08 511.32 617.11 C
79.32 615.59 547.32 615.59 2 L
0.25 H
2 Z
0 X
0 K
N
7.32 47.11 619.32 839.11 C
5 14 Q
0 X
0 K
(8. Expr) 115.32 621.77 T
(essions) 157.82 621.77 T
5 11 Q
(8.1. Constants) 115.32 586.75 T
4 10 Q
1.93 (The simplest expr) 115.32 569.42 P
1.93 (essions ar) 197.8 569.42 P
1.93 (e constants. The boolean constants ar) 242.68 569.42 P
1.93 (e \322tr) 415.62 569.42 P
1.93 (ue\323 and \322false\323.) 436.96 569.42 P
1.35 (\322void\323 may be thought of as a constant object. Character) 115.32 557.42 P
1.35 (, integer) 376.1 557.42 P
1.35 (, r) 412.77 557.42 P
1.35 (eal, and string con-) 422.89 557.42 P
0.04 (stants obey the same conventions as in C. Some examples include: \324a\325, \324\134000\325, 15, -15, 2.3, -) 115.32 545.42 P
0.69 (2.4, 2.4e-19, and \322this is a string\323.  Hexadecimal integers ar) 115.32 533.42 P
0.69 (e indicated by a leading zer) 381.09 533.42 P
0.69 (o) 505.86 533.42 P
0.73 (followed by \322x\323 or \322X\323 and then digits or leters in the range \322a\323 thr) 115.32 521.42 P
0.73 (ough \322f\323 \050eg.  0x37f) 422.57 521.42 P
1.82 (or 0X9A7B\051. The one exception is that \337oating point constants using the \322e\323 notation) 115.32 509.42 P
1.65 (must have explicit digits after the decimal point. A \337oating point constant like \3221.e3\323) 115.32 497.42 P
1.14 (would be confused with the application of the \322e3\323 featur) 115.32 485.42 P
1.14 (e to the integer constant \3221\323.) 379.91 485.42 P
(\3221.0e3\323 must be used instead.) 115.32 473.42 T
5 11 Q
(8.2. Identi\336ers) 115.32 442.75 T
4 10 Q
0.8 (Inside r) 115.32 425.42 P
0.8 (outines, the names of local variables, ar) 149.61 425.42 P
0.8 (guments, the object attributes of self and) 327.65 425.42 P
1.62 (the special variables \322r) 115.32 413.42 P
1.62 (es\323 and \322self\323 ar) 220.54 413.42 P
1.62 (e all expr) 297.85 413.42 P
1.62 (essions. In addition the r) 341.41 413.42 P
1.62 (outines \322ex-) 456.43 413.42 P
0.32 (tend\323 \050for array classes\051 and \322copy\323 may be called. In  expr) 115.32 401.42 P
0.32 (essions appearing in both ini-) 379.58 401.42 P
2.16 (tializers and r) 115.32 389.42 P
2.16 (outines, the names of constant and shar) 180.27 389.42 P
2.16 (ed attributes, r) 367.54 389.42 P
2.16 (outines, and the) 436.22 389.42 P
(special names \322type\323 and \322new\323 ar) 115.32 377.42 T
(e legitimate.) 270.98 377.42 T
5 11 Q
(8.3. Dotted Expr) 115.32 346.75 T
(essions) 193.87 346.75 T
4 10 Q
1.03 (Access to the featur) 115.32 329.42 P
1.03 (es of an object is obtained with the dotted notation: \322a.foo\323. Dotted) 204.57 329.42 P
0.7 (access may be applied to identi\336ers, constants, dotted expr) 115.32 317.42 P
0.7 (essions, array r) 380.17 317.42 P
0.7 (efer) 447.96 317.42 P
0.7 (ences, and) 464.63 317.42 P
(par) 115.32 305.42 T
(enthesized expr) 130.09 305.42 T
(essions.) 199.81 305.42 T
5 11 Q
(8.4. Class Access) 115.32 274.75 T
4 10 Q
1.59 (The featur) 115.32 257.42 P
1.59 (es of a class may be accessed dir) 162.3 257.42 P
1.59 (ectly thr) 315.07 257.42 P
1.59 (ough class access. This is signi\336ed) 352.95 257.42 P
(with two colons: \322CLASS::a\323 and \322CLASS::fun\050x,y\051\323.) 115.32 245.42 T
5 11 Q
(8.5. Boolean Expr) 115.32 214.75 T
(essions) 199.98 214.75 T
4 10 Q
0.56 (The boolean-valued numerical comparison operators are: \322=\323, \322/=\323, \322>\323, \322<\322, \322>=\323, and) 115.32 189.42 P
0.45 (\322<=\323. The predefined boolean operations are \322and\323, \322or\323, \322not\323 and parentheses may be) 115.32 177.42 P
-0.11 (used to specify precedence. Unlike the C versions of \322and\323 and \322or\323, Sather always evalu-) 115.32 165.42 P
FMENDPAGE
%%EndPage: "19" 20
%%Page: "20" 20
595.3 841.9 0 FMBEGINPAGE
115.32 753.27 511.32 763.28 R
7 X
0 K
V
3 10 Q
0 X
(20) 115.32 756.61 T
0 F
(Interfacing with C Code) 264.78 756.61 T
510.95 749.11 115.32 749.11 2 L
7 X
V
0.25 H
2 Z
0 X
N
115.32 155.11 511.32 713.11 R
7 X
V
4 F
0 X
1.27 (ates all arguments of operator expressions.  \322=\323 is also used for testing the equality of) 115.32 706.44 P
-0.42 (pointers. An important case is \322a=void\323. Parentheses may be used to modify the usual pre-) 115.32 694.44 P
0.87 (cedence relations. The class BOOL defines a number of other operations using ordinary) 115.32 682.44 P
(syntax \050eg. \322xor\323, \322nand\323, etc.\051.) 115.32 670.44 T
5 11 Q
(8.6. Numerical Expr) 115.32 639.77 T
(essions) 210.94 639.77 T
4 10 Q
0.23 (The built in binary operators \322*\323,\323/\323,\323+\323,\323-\323 may be applied to INT\325s, REAL\325s and DOU-) 115.32 614.44 P
-0.62 (BLE\325s. The usual precedence relations apply, as described in the section on syntax, and they) 115.32 602.44 P
-0.52 (may be modified with parentheses.  As in C, integer divide gives the integer part of the true) 115.32 590.44 P
-0.24 (quotient. The basic classes CHAR, INT, REAL, or DOUBLE define a number of other oper-) 115.32 578.44 P
-0 (ations using ordinary syntax  \050eg. a.mod\050b\051, f.to_i, a.bit_xor\050b\051\051. Automatic conversion be-) 115.32 566.44 P
0.62 (tween REAL  and DOUBLE is provided. Variables of either type may be assigned to the) 115.32 554.44 P
(other and used as argments which are declared to be of either type.) 115.32 542.44 T
5 11 Q
(8.7. Array Access) 115.32 511.77 T
4 10 Q
2.99 (Array classes automatically have the attributes \322asize\323, \322asize1\323, \322asize2\323, \322asize3\323,) 115.32 486.44 P
-0.38 (\322asize4\323 defined, depending on their dimension. If \322a\323 is an object with a two-dimensional) 115.32 474.44 P
0.65 (array class then access to its elements is written \322a[2,3]\323, assignment by \322a[2,3]:= 5\323 and) 115.32 462.44 P
0.07 (similarly for the other dimensions. Regardless of the dimension of the array, references of) 115.32 450.44 P
0.29 (the form \322a[4]\323 access it as if it were one dimensional and \322a.asize\323 gives the one-dimen-) 115.32 438.44 P
(sional size of the array. Access to array elements in \322self\323 takes the form \322[4]\323.) 115.32 426.44 T
115.32 370.08 511.32 373.11 C
79.32 371.59 547.32 371.59 2 L
0.25 H
2 Z
0 X
0 K
N
7.32 47.11 619.32 839.11 C
5 14 Q
0 X
0 K
(9. Interfacing with C Code) 115.32 377.77 T
5 11 Q
(9.1. Accessing C fr) 115.32 342.75 T
(om Sather) 202.88 342.75 T
4 10 Q
0.05 (Sather code may be linked with standard C code so that Sather functions may call C func-) 115.32 317.42 P
1.11 (tions and vice versa. Access to C functions within Sather is provided by a special class) 115.32 305.42 P
0.15 (named \322C\323. This class may contain only shared attribute specifications and routine speci-) 115.32 293.42 P
0.11 (fications. Unlike other classes, the \322C\323 class declarations may be distributed over serveral) 115.32 281.42 P
-0.31 (files as long as the definitions don\325t conflict. The name of each shared attribute and routine) 115.32 269.42 P
0.68 (corresponds to a C external variable or function. The type specification given is used by) 115.32 257.42 P
0.76 (Sather to properly link the calls to these functions. Within a Sather class, access to these) 115.32 245.42 P
0.36 (functions is written in the standard form: \322C::foo\323. User routines with a variable number) 115.32 233.42 P
-0.13 (of arguments are not supported in Sather and such C functions \050eg. printf\051 must be shield-) 115.32 221.42 P
(ed by C code with a fixed number of arguments.) 115.32 209.42 T
-0.51 (The return value will be assumed to be of the type specified in the \322C\323 class. Sather BOOL\325s) 115.32 185.42 P
0.36 (are passed as chars with value zero for false, non-zero to true. INT, REAL, and DOUBLE) 115.32 173.42 P
0.37 (are passed as C ints, floats, and doubles. Objects are passed as pointers to the object. The) 115.32 161.42 P
FMENDPAGE
%%EndPage: "20" 21
%%Page: "21" 21
595.3 841.9 0 FMBEGINPAGE
115.32 753.27 511.32 763.28 R
7 X
0 K
V
0 10 Q
0 X
(Compilation) 288.33 756.61 T
3 F
(21) 501.32 756.61 T
511.32 749.11 115.32 749.11 2 L
7 X
V
0.25 H
2 Z
0 X
N
115.32 155.11 511.32 713.11 R
7 X
V
4 F
0 X
0.92 (header file \322all.h\323 provides the appropriate \322typedefs\323 so that \322bool\323, \322real\323, and \322ptr\323) 115.32 706.44 P
0.78 (may be used in external C declarations. It is often convenient to declare the C functions) 115.32 694.44 P
0.74 (needed for a Sather class in the same file as that class, so that they are guaranteed to be) 115.32 682.44 P
0.43 (present when the class is compiled. Certain low level C operations such as type casts are) 115.32 670.44 P
0.37 (actually implemented as macros which expand into the generated C files. In every case a) 115.32 658.44 P
0.36 (function version is provided as well, however, since system tools like the interpreter will) 115.32 646.44 P
(sometimes need them.) 115.32 634.44 T
5 11 Q
(9.2. Accessing Sather fr) 115.32 603.77 T
(om C) 227.1 603.77 T
4 10 Q
-0.47 (A separate mechanism is provided to access Sather features from C. In the compiler control) 115.32 578.44 P
0.05 (file, sections headed with the keyword \322\050c_name\051\323 allow one to give a C name to a Sather) 115.32 566.44 P
3.66 (routine, shared attribute, or constant attribute. These specifications have the form) 115.32 554.44 P
-0.54 (\322\050c_name\051 sat_fun1 FOO::fun1\323. In the generated code, the given name will be used to refer) 115.32 542.44 P
1.3 (to the specified attribute. External C routines may access the attribute under the given) 115.32 530.44 P
0.41 (name. The external routine is responsible for using an \322extern\323 delcaration which is con-) 115.32 518.44 P
(sistent with the Sather declaration.) 115.32 506.44 T
115.32 450.08 511.32 453.11 C
79.32 451.59 547.32 451.59 2 L
0.25 H
2 Z
0 X
0 K
N
7.32 47.11 619.32 839.11 C
5 14 Q
0 X
0 K
(10. Compilation) 115.32 457.77 T
4 10 Q
-0.12 (The Sather compiler is invoked by the command \322cs\323 \050for \322compile sather\323\051 followed by a) 115.32 429.42 P
0.34 (class name. To find the files it needs, the compiler first looks in the current directory and) 115.32 417.42 P
-0.11 (then in the user\325s home directory for a file named \322.sather\323. This file contains the informa-) 115.32 405.42 P
-0.11 (tion the system needs for compilation. It consists of a series of specifications among which) 115.32 393.42 P
-0.28 (white-space and Sather style comments may be interspersed. Keywords in this file are sur-) 115.32 381.42 P
(rounded by parentheses and are followed by space separated lists. The keywords are:) 115.32 369.42 T
(\245) 115.32 351.42 T
(\050sour) 128.85 351.42 T
(ce_\336les\051: Followed by a list of \336les in which Sather sour) 151.67 351.42 T
(ce) 395.94 351.42 T
(code appears.) 407.67 351.42 T
(\245) 115.32 336.42 T
(\050c_\336les\051: Followed by a list of C object \336les which will be linked with the Sather gener-) 128.85 336.42 T
(ated code.) 128.85 324.42 T
(\245) 115.32 309.42 T
(\050c_make\336les\051: A list of make\336le which ar) 128.85 309.42 T
(e exectued befor) 308.44 309.42 T
(e the Sather compilation be-) 380.44 309.42 T
(gins. These ar) 128.85 297.42 T
(e typically used to ensur) 189.39 297.42 T
(e that any external C object \336les ar) 297.22 297.42 T
(e up to date.) 448.49 297.42 T
(\245) 115.32 282.42 T
(\050debug_keys\051: Followed by a list of debug and assert keys that will be) 128.85 282.42 T
(enabled during) 438.56 282.42 T
(the compilation of the C code.) 128.85 270.42 T
(\245) 115.32 255.42 T
(\050cc_\337ags\051: C compiler \337ags enabled during compilation \050eg. -O, -g\051.) 128.85 255.42 T
(\245) 115.32 240.42 T
(\050c_name\051: Followed by a name and a featur) 128.85 240.42 T
(e speci\336cation of the form \322CLASS::fea-) 319.47 240.42 T
(tur) 128.85 228.42 T
(e\323.  The name will be used in the generated \336les to r) 141.9 228.42 T
(efer to the speci\336ed featur) 370.96 228.42 T
(e.) 485.86 228.42 T
(\245) 115.32 213.42 T
(\050include\051: Followed by a list of \336les in the .sather format. The ef) 128.85 213.42 T
(fect is as if their con-) 407.77 213.42 T
(tents wer) 128.85 201.42 T
(e textually included.) 169.6 201.42 T
(\245) 115.32 186.42 T
(\050sather_home\051: Followed by the dir) 128.85 186.42 T
(ectory which contains system \336les, by default it) 284.17 186.42 T
(uses \322/usr/local/sr) 128.85 174.42 T
(c/sather\323.) 216.73 174.42 T
(\245) 115.32 159.42 T
(\050c_compiler\051: By default, uses \322cc\323.) 128.85 159.42 T
FMENDPAGE
%%EndPage: "21" 22
%%Page: "22" 22
595.3 841.9 0 FMBEGINPAGE
115.32 753.27 511.32 763.28 R
7 X
0 K
V
3 10 Q
0 X
(22) 115.32 756.61 T
0 F
(Compilation) 288.33 756.61 T
510.95 749.11 115.32 749.11 2 L
7 X
V
0.25 H
2 Z
0 X
N
115.32 155.11 511.32 713.11 R
7 X
V
4 F
0 X
-0.35 (All sections are optional and the order of their appearance is arbitrary. For most keys, mul-) 115.32 706.44 P
-0.02 (tiple sections with the same key behave as if their lists had been appended. There must be) 115.32 694.44 P
0.59 (a separate \050c_name\051 key for each name defined.  The \322\050include\051\323 facility makes it conve-) 115.32 682.44 P
(nient to share system wide information.) 115.32 670.44 T
-0.08 (A new directory is created in the current directory with a name of the form class_name.cs.) 115.32 646.44 P
-0.23 (This directory will contain the generated C files, a makefile, and object files. There is one C) 115.32 634.44 P
0.31 (file per class with a name consisting of the first 3 letters of the class followed by its index) 115.32 622.44 P
-0.17 (\050eg.  \322CLA123.c\323\051. There will be several other files containing the runtime system, garbage) 115.32 610.44 P
0.01 (collector, and header files. An executable with the name of the class will also be produced) 115.32 598.44 P
(in the directory in which compilation was initiated.) 115.32 586.44 T
5 11 Q
(10.1. Main) 115.32 555.77 T
4 10 Q
0.12 (There must be a routine named \322main\323 in the class the compiler is called on. After initial-) 115.32 530.44 P
0.62 (ization, execution will begin with a call to this function. In this initial call to \322main\323 any) 115.32 518.44 P
0.38 (references to \322self\323 will have the value \322void\323. If \322INIT\323 is the class, then the behavior is) 115.32 506.44 P
0.91 (exactly as if \322INIT::main\323 were called. If an object of the class on which the compiler is) 115.32 494.44 P
(called is desired, it must be explicitly created within \322main\323.) 115.32 482.44 T
-0.05 (The routine \322main\323 in the class the compiler is called on may either have no arguments or) 115.32 458.44 P
-0.03 (a single argument of type \322ARRAY{STR}\323. If no argument is specified then any command) 115.32 446.44 P
0.09 (line arguments the user might provide will be ignored. If an argument is provided then it) 115.32 434.44 P
0.41 (will be filled in with an array of the strings making up the command line. The \322asize\323 of) 115.32 422.44 P
-0.39 (the array will be one larger than the number of command line arguments \050similar to \322argc\323) 115.32 410.44 P
-0.05 (in C\051. The zeroeth entry of the array will be the string used to invoke execution of the pro-) 115.32 398.44 P
(gram. The successive entries will be the command line arguments.) 115.32 386.44 T
(The simplest Sather program is then:) 115.32 362.44 T
6 8 Q
(class SIMPLEST is) 115.32 345.77 T
(   main is) 115.32 336.77 T
(      OUT::s\050\322Hello world.\134n\323\051) 115.32 327.77 T
(   end) 115.32 318.77 T
(end) 115.32 309.77 T
4 10 Q
0.12 (To get numerical parameters from the command line, it is convenient to use the functions) 115.32 287.44 P
0.04 (\322to_i\323, etc. which are defined in the string class \322STR\323. For example, a program which ex-) 115.32 275.44 P
(pects two integers and a real might look like:) 115.32 263.44 T
6 8 Q
(class TST is) 115.32 246.77 T
(   main\050args:ARRAY{STR}\051 is) 115.32 237.77 T
(      i1:INT:=args[1].to_i;) 115.32 228.77 T
(      i2:INT:=args[2].to_i;) 115.32 219.77 T
(      r:REAL:=args[3].to_r;) 115.32 210.77 T
(      ...) 115.32 201.77 T
(   end; -- main) 115.32 192.77 T
(end; -- class TST) 115.32 183.77 T
FMENDPAGE
%%EndPage: "22" 23
%%Page: "23" 23
595.3 841.9 0 FMBEGINPAGE
115.32 753.27 511.32 763.28 R
7 X
0 K
V
0 10 Q
0 X
(The Lexical Structur) 239.22 756.61 T
(e of Sour) 322.7 756.61 T
(ce Files) 358.07 756.61 T
3 F
(23) 501.32 756.61 T
511.32 749.11 115.32 749.11 2 L
7 X
V
0.25 H
2 Z
0 X
N
115.32 155.11 511.32 713.11 R
7 X
V
4 F
0 X
-0.11 (If \322main\323 is declared to return an INT, then the value of \322res\323 at program termination will) 115.32 706.44 P
-0.51 (become the return status of the program \050eg. the $status variable in the UNIX  csh  will hold) 115.32 694.44 P
(the value\051.) 115.32 682.44 T
115.32 626.08 511.32 629.11 C
79.32 627.59 547.32 627.59 2 L
0.25 H
2 Z
0 X
0 K
N
7.32 47.11 619.32 839.11 C
5 14 Q
0 X
0 K
(1) 115.32 633.77 T
(1. The Lexical Structur) 121.54 633.77 T
(e of Sour) 261.21 633.77 T
(ce Files) 315.39 633.77 T
4 10 Q
-0.03 (The names of Sather source files all have the extension \322.sa\323 \050as in \322example.sa\323\051. To facil-) 115.32 605.42 P
-0.04 (itate linking with C code, Sather is case sensitive. Class names must consist entirely of up-) 115.32 593.42 P
0.27 (per case letters and underscores. For readability, it is recommended that other names not) 115.32 581.42 P
-0.15 (be of this form. The system libraries use the style of lower case names separated by under-) 115.32 569.42 P
0.24 (scores \050eg. \322this_is_a_name\323\051. Anything on a line following \322--\323 is a comment. Sequences) 115.32 557.42 P
-0.19 (of spaces, tabs, newlines and ASCII VT, BS, CR, FF are considered to be whitespace.  Com-) 115.32 545.42 P
-0.51 (ments and whitespace may appear anywhere between syntactic constructs and are ignored) 115.32 533.42 P
(by the compiler.) 115.32 521.42 T
-0.62 (All entity names may be of arbitrary length. They must consist of only letters, numbers, and) 115.32 497.42 P
1.4 (underscores and must begin with a letter. To avoid conflicts with internally generated) 115.32 485.42 P
-0.44 (names, it is recommended that no user names end with an underscore. The keywords: and,) 115.32 473.42 P
1.36 (assert, break, class, constant, debug, else, elsif, end, if, is, loop, not, or, private, return,) 115.32 461.42 P
0.18 (shared, switch, then, until, and when have syntactic significance and may not be used for) 115.32 449.42 P
-0.03 (any other purpose. All other tokens beginning with a letter are syntactically considered to) 115.32 437.42 P
-0.06 (be identifiers. The single character tokens: +, -, *, /, =, <, >, \050, \051, [, ], comma, ;, :, $, ., {, }, and) 115.32 425.42 P
-0.06 (the two-character tokens /=, <=, >=, :=, and :: also have syntactic significance. The charac-) 115.32 413.42 P
(ters: ^, !, @, #, %, &, ~, \324, ?, \134, and | are illegal outside of string and character constants.) 115.32 401.42 T
-0.5 (Integer constants consist of a series of digits. Hexadecimal integers begin with \3220x\323 or \3220X\323) 115.32 377.42 P
0.33 (and consist of digits and characters in the ranges \322a-f\323 or \322A-F\323. Floating point constants) 115.32 365.42 P
0.84 (have the form \32212.345E-87\323. When the \322e\323 notation is not used, floating point constants) 115.32 353.42 P
0.52 (without digits after the decimal \050eg. \3221.\323\051 are also allowed. String constants begin with a) 115.32 341.42 P
-0.16 (double quote and continue until the next unescaped double quote. As in C, a backslash in-) 115.32 329.42 P
0.25 (side a string escapes the following character: \134\323 inserts a double quote, \134\325 inserts a single) 115.32 317.42 P
-0.37 (quote, \134\134 inserts a backslash, \134 followed by a newline causes the newline to be ignored, \134n) 115.32 305.42 P
1.01 (inserts a newline, and \134t inserts a tab. Character constants begin and end with a single) 115.32 293.42 P
(quote and use the same escape conventions.) 115.32 281.42 T
115.32 225.06 511.32 228.08 C
79.32 226.57 547.32 226.57 2 L
0.25 H
2 Z
0 X
0 K
N
7.32 47.11 619.32 839.11 C
5 14 Q
0 X
0 K
(12. Syntax) 115.32 232.75 T
4 10 Q
-0.22 (There are a number of reserved words in the language. The keywords have a syntactic sig-) 115.32 204.39 P
(nificance and consist of:) 115.32 192.39 T
6 8 Q
-0.84 (and, assert, break, class, constant, debug, else, elsif, end, if, is, loop, not, or,) 115.32 175.73 P
(private, return, shared, switch, then, until, when) 115.32 166.73 T
FMENDPAGE
%%EndPage: "23" 24
%%Page: "24" 24
595.3 841.9 0 FMBEGINPAGE
115.32 753.27 511.32 763.28 R
7 X
0 K
V
3 10 Q
0 X
(24) 115.32 756.61 T
0 F
(Syntax) 298.88 756.61 T
510.95 749.11 115.32 749.11 2 L
7 X
V
0.25 H
2 Z
0 X
N
115.32 155.11 511.32 713.11 R
7 X
V
4 F
0 X
(Other reserved words are the names of automatically defined routines and variables:) 115.32 706.44 T
6 8 Q
(asize, asize1, asize2, asize3, asize4, copy, extend, false, new, res, self, true,) 115.32 689.77 T
(type, void) 115.32 680.77 T
4 10 Q
(Finaly there are a number of predefined type specifiers with special importance:) 115.32 658.44 T
6 8 Q
-0.16 (ARRAY, ARRAY2, ARRAY3, ARRAY4, BOOL, C, CHAR, DOUBLE, ERR, FILE, IN, INT, OB, OUT,) 115.32 641.77 P
(REAL, SELF_TYPE, STR, STR_SCAN, SYS, UNDEFINE, UNIX) 115.32 632.77 T
4 10 Q
-0.07 (The Sather compiler creates C names for all Sather constructs. To avoid conflict with these) 115.32 610.44 P
(created names, no C names or Sather names should end with an underscore.) 115.32 598.44 T
0.54 (The precedence relations between the binary operators from weakest to strongest are \050in) 115.32 574.44 P
(YACC notation\051:) 115.32 562.44 T
6 8 Q
-0.49 (%left OR   %left  AND   %left \324=\325 \325/=\325    %nonassoc \324<=\325 \324<\324 \324>\325 \324>=\325   %left \324+\325 \324-\325) 115.32 545.77 P
(%left \324*\325 \324/\325   %right NOT UNARY_MINUS   %left \324.\325) 115.32 536.77 T
4 10 Q
1.24 (The syntax of Sather in a notation close to YACC  follows. The text of each source file) 115.32 514.44 P
(should parse into a class_list.) 115.32 502.44 T
6 8 Q
(class_list:  | class  | class_list \324;\325 | class_list \324;\325 class) 115.32 485.77 T
(class: CLASS IDENTIFIER opt_type_vars IS feature_list END) 115.32 476.77 T
(opt_type_vars:  | \324{\324  ident_list \324}\325) 115.32 467.77 T
(ident_list: IDENTIFIER | ident_list \324,\325 IDENTIFIER) 115.32 458.77 T
(feature_list: feature | feature_list \324;\325 | feature_list \324;\325 feature) 115.32 449.77 T
(opt_private: | PRIVATE) 115.32 440.77 T
(feature: type_spec | opt_private var_dec | opt_private routine_dec) 115.32 431.77 T
(    | opt_private shared_attr_dec | opt_private const_attr_dec) 115.32 422.77 T
(type_spec: IDENTIFIER | \324$\325 type_spec | IDENTIFIER \324{\324 type_spec_list \324}\325) 115.32 413.77 T
(type_spec_list: type_spec | type_spec_list \324,\325 type_spec) 115.32 404.77 T
(var_dec: ident_list \324:\325 type_spec) 115.32 395.77 T
(shared_attr_dec: SHARED var_dec | SHARED var_dec \324:=\325 expr) 115.32 386.77 T
(var_dec_list: var_dec | var_dec_list \324;\325 | var_dec_list \324;\325 var_dec) 115.32 377.77 T
(routine_dec: IDENTIFIER IS statement_list END) 115.32 368.77 T
(    | IDENTIFIER \324\050\324 var_dec_list \324\051\325 IS statement_list END) 115.32 359.77 T
(    | single_var_dec IS statement_list END) 115.32 350.77 T
(    | IDENTIFIER \324\050\324 var_dec_list \324\051\325 \324:\325 type_spec IS statement_list END) 115.32 341.77 T
(const_attr_dec: CONSTANT var_dec \324:=\325 expr) 115.32 332.77 T
(statement_list: | statement | statement_list \324;\325 | statement_list \324;\325 statement) 115.32 323.77 T
(statement: IDENTIFIER | local_dec | assignment | conditional | loop | switch) 115.32 314.77 T
(    | BREAK | RETURN | call | assert | debug) 115.32 305.77 T
(local_dec: var_dec | var_dec \324:=\325 expr) 115.32 296.77 T
(assignment: expr \324:=\325 expr) 115.32 287.77 T
(conditional: IF expr THEN statement_list elsif_part else_part END) 115.32 278.77 T
(elsif_part: | elsif_part ELSIF expr THEN statement_list) 115.32 269.77 T
(else_part: | ELSE statement_list) 115.32 260.77 T
(loop: UNTIL expr LOOP statement_list END | LOOP statement_list END) 115.32 251.77 T
(switch: SWITCH expr when_part else_part END) 115.32 242.77 T
(when_part:  | when_part WHEN exp_list THEN statement_list) 115.32 233.77 T
(assert: ASSERT \324\050\324 IDENTIFIER \324\051\325 expr END) 115.32 224.77 T
(debug: DEBUG \324\050\324 IDENTIFIER \324\051\325 statement_list END) 115.32 215.77 T
(call: IDENTIFIER \324\050\324 exp_list \324\051\325 | cexpr \324.\325 IDENTIFIER arg_vals) 115.32 206.77 T
(    | type_spec \324::\325 IDENTIFIER arg_vals) 115.32 197.77 T
(arg_vals: | \324\050\324 exp_list \324\051\325) 115.32 188.77 T
(exp_list: expr | exp_list \324,\325 expr) 115.32 179.77 T
(expr: cexpr | nexpr) 115.32 170.77 T
(cexpr: IDENTIFIER | CHAR_CONST | INT_CONST | REAL_CONST | BOOL_CONST | STR_CONST) 115.32 161.77 T
FMENDPAGE
%%EndPage: "24" 25
%%Page: "25" 25
595.3 841.9 0 FMBEGINPAGE
115.32 753.27 511.32 763.28 R
7 X
0 K
V
0 10 Q
0 X
(Differ) 238.53 756.61 T
(ences between Sather and Eiffel) 262.23 756.61 T
3 F
(25) 501.32 756.61 T
511.32 749.11 115.32 749.11 2 L
7 X
V
0.25 H
2 Z
0 X
N
115.32 155.11 511.32 713.11 R
7 X
V
6 8 Q
0 X
(    | call | aref | \324\050\324 expr \324\051\325) 115.32 707.77 T
(nexpr: NOT expr | expr \324<\324 expr | expr \324>\325 expr | expr \324<=\325 expr | expr \324>=\325 expr) 115.32 698.77 T
(    | expr \324=\325 expr | expr \324/=\325 expr | expr AND expr | expr OR expr | \324-\325 expr) 115.32 689.77 T
(    | \324+\325 expr | expr \324+\325 expr | expr \324-\325 expr | expr \324*\325 expr | expr \324/\325 expr) 115.32 680.77 T
(aref: cexpr \324[\324 exp_list \324]\325 | \324[\324 exp_list \324]\325) 115.32 671.77 T
115.32 617.08 511.32 620.11 C
79.32 618.59 547.32 618.59 2 L
0.25 H
2 Z
0 X
0 K
N
7.32 47.11 619.32 839.11 C
5 14 Q
0 X
0 K
(13. Dif) 115.32 624.77 T
(fer) 155.99 624.77 T
(ences between Sather and Eif) 172.05 624.77 T
(fel) 350.83 624.77 T
4 10 Q
0.38 (Sather eliminates many Eiffel features which are not essential for practical code develop-) 115.32 596.42 P
-0.32 (ment. It also adds several features to increase efficiency, and modifies others to make them) 115.32 584.42 P
(more standard or systematic.) 115.32 572.42 T
1.42 (Certain Eiffel reserved words were renamed in Sather: \322BOOLEAN\323 became \322BOOL\323,) 115.32 548.42 P
1.79 (\322check\323 became \322assert\323, \322CHARACTER\323 became \322CHAR\323, \322Current\323 became \322self\323,) 115.32 536.42 P
-0.53 (\322INTEGER\323 became \322INT\323, \322inspect\323 became \322switch\323, \322Result\323 became \322res\323, \322STRING\323) 115.32 524.42 P
2.86 (became \322STR\323.  Other reserved words were eliminated: \322as\323, \322BITS\323, \322Clone\323 \050use) 115.32 512.42 P
-0.41 (\322copy\323\051, \322Create\323 \050use \322new\323\051, \322deferred\323, \322define\323, \322div\323 \050use version in INT\051, \322do\323, \322en-) 115.32 500.42 P
0.13 (sure\323 \050use \322assert\323\051, \322expanded\323, \322export\323 \322external\323 \050use the \322C\323 class\051, \322feature\323, \322For-) 115.32 488.42 P
0.48 (get\323 \050use assignment of \322void\323\051, \322from\323, \322implies\323 \050use version in BOOL\051, \322inherit\323 \050use) 115.32 476.42 P
1.8 (classes in feature list\051, \322infix\323, \322invariant\323 \050use \322assert\323\051, \322is\323, \322language\323, \322like\323 \050use) 115.32 464.42 P
1.16 (\322SELF_TYPE\323 for most common case\051, \322local\323 \050use local declaration statement\051, \322mod\323) 115.32 452.42 P
1.36 (\050use version in INT\051, \322name\323, \322Nochange\323, \322obsolete\323, \322old\323, \322once\323 \050use shared vari-) 115.32 440.42 P
-0.52 (ables\051, \322prefix\323, \322redefine\323, \322rename\323, \322repeat\323, \322require\323 \050use \322assert\323\051, \322rescue\323, \322retry\323,) 115.32 428.42 P
0.32 (\322unique\323, \322variant\323 \050use \322assert\323\051, \322Void\323 \050use equality test with \322void\323\051, \322xor\323 \050use fea-) 115.32 416.42 P
(ture in BOOL\051, \322^\323 \050use \322pow\323 in MATH\051.) 115.32 404.42 T
-0.32 (The most fundamental change is the addition of the ability to explicitly specify the types of) 115.32 380.42 P
0.01 (entities. This puts more burden on the programmer but can have a dramatic effect on effi-) 115.32 368.42 P
1.14 (ciency.  In Eiffel, Create and Clone are different from every other function in that they) 115.32 356.42 P
-0.38 (change the value of a variable they are applied to. In Sather the only way to change the val-) 115.32 344.42 P
0.29 (ue of a variable is to assign to it.  Sather adds the \322type\323 feature which is necessary to do) 115.32 332.42 P
-0.37 (the old-style switch based dispatch \050which is still an important operation on occasion\051. The) 115.32 320.42 P
0.28 (usual usage of Eiffel arrays requires a double indirection to get to the array, in Sather the) 115.32 308.42 P
0.12 (objects themselves may be extended with an array part \050this is a common technique in ef-) 115.32 296.42 P
-0.42 (ficient C code, though it looks kludgy in C\051. Two dimensional arrays are accessed by point-) 115.32 284.42 P
-0.13 (er indirection rather than by multiplication \050this is especially important on RISC machines) 115.32 272.42 P
(which do integer multiplication in software\051.) 115.32 260.42 T
0.42 (Sather provides library classes to support exception handling rather than building it into) 115.32 236.42 P
-0.32 (the language. Sather\325s garbage collector doesn\325t have any overhead when it is not running,) 115.32 224.42 P
0.02 (whereas the Eiffel collector extracts a cost on any pointer variable assignment. Eiffel\325s col-) 115.32 212.42 P
-0.45 (lector also must keep a stack of pointers to pointers on the stack.  This keeps these variables) 115.32 200.42 P
1.5 (from being put in registers, which can severely affect performance on RISC machines.) 115.32 188.42 P
0.32 (Eiffel\325s ability to replace functions by variables in descendents has been eliminated.  This) 115.32 176.42 P
-0.02 (allows most attribute access to be done without the overhead of function calls.  More than) 115.32 164.42 P
FMENDPAGE
%%EndPage: "25" 26
%%Page: "26" 26
595.3 841.9 0 FMBEGINPAGE
115.32 753.27 511.32 763.28 R
7 X
0 K
V
3 10 Q
0 X
(26) 115.32 756.61 T
0 F
(Acknowledgements) 274.36 756.61 T
510.95 749.11 115.32 749.11 2 L
7 X
V
0.25 H
2 Z
0 X
N
115.32 155.11 511.32 713.11 R
7 X
V
4 F
0 X
-0.22 (one class may be defined in a Sather file and the names are not subject to the restrictions of) 115.32 706.44 P
0.49 (Unix file names. The Sather inheritance mechanism is less powerful than Eiffel\325s but it is) 115.32 694.44 P
(easier to understand the semantics.) 115.32 682.44 T
-0.37 (Eiffel tries to ensure that type errors are impossible if a program makes it through the com-) 115.32 658.44 P
0.35 (piler. Sather has no such goal, though it does try to catch all common errors. Sather adds) 115.32 646.44 P
-0.24 (shared variables to classes. Using these, Eiffel\325s once functions may be easily implemented) 115.32 634.44 P
-0.23 (and shared variables are often much more convenient. Direct class access to the features of) 115.32 622.44 P
0.03 (another class are provided with the \322::\323 syntax \050as in C++\051. This facility is subject to abuse) 115.32 610.44 P
0.86 (but there are many situations in which it can greatly simplify the structure of a system.) 115.32 598.44 P
(Sather\325s interface to C is cleaner and more efficient than Eiffel\325s.) 115.32 586.44 T
-0.22 (Sather does not provide expanded classes or overloading of infix operators because the in-) 115.32 562.44 P
0.53 (creased complexity does not seem worth the gain. Sather allows local variables to be de-) 115.32 550.44 P
0 (clared at the point of use, as in C++, rather than in a separate local declaration section. All) 115.32 538.44 P
-0.34 (of the different assertion clauses \050ensure, require, check, invariant, variant\051 are replaced by) 115.32 526.44 P
-0.21 (\322assert\323 in Sather. In Sather, the debug and assert clauses are named and all clauses with a) 115.32 514.44 P
0.15 (given name may be turned on or off independently. Type checking on dispatched assign-) 115.32 502.44 P
0.57 (ments is only checked at runtime if the corresponding compiler key is enabled.  Sather\325s) 115.32 490.44 P
-0.17 (syntax is simpler than Eiffel\325s, particularly in the structure of class and routine definitions,) 115.32 478.44 P
0.68 (though several new features were added.  Sather makes all class features available from) 115.32 466.44 P
2.35 (outside the class by default, using the \322private\323 mechanism to mark features which) 115.32 454.44 P
-0.05 (shouldn\325t be exported. The marking is located at the feature specification avoiding the ne-) 115.32 442.44 P
0.16 (cessity of maintaining a separate list as in Eiffel. Eiffel takes the view that features should) 115.32 430.44 P
(be private by default and only externally available when explicitly listed in an extern list.) 115.32 418.44 T
115.32 362.08 511.32 365.11 C
79.32 363.6 547.32 363.6 2 L
0.25 H
2 Z
0 X
0 K
N
7.32 47.11 619.32 839.11 C
5 14 Q
0 X
0 K
(14. Acknowledgements) 115.32 369.77 T
4 10 Q
-0.19 (Sather clearly owes its major debt to Eiffel and has been heavily influenced by the descrip-) 115.32 341.42 P
-0.12 (tion in \322Eiffel: The Language\323 by Bertrand Meyer. It has also adopted ideas from a variety) 115.32 329.42 P
0.13 (of other languages including Smalltalk, CLU, Common Lisp, Modula 3, Pascal, SAIL, Ob-) 115.32 317.42 P
-0.34 (jective C, C, and C++. The tools from the Free Software Foundation, the public domain BY-) 115.32 305.42 P
0.89 (ACC  by Corbett and the garbage collector by Hans-J. Boehm and Alan J. Demers were) 115.32 293.42 P
0.94 (used in its implementation. Improvements were suggested by Subutai Ahmad, Joachim) 115.32 281.42 P
0.59 (Beer, Jeff Bilmes, Peter Blicher, Henry Cejtin, Richard Durbin, Jerry Feldman, Carl Feyn-) 115.32 269.42 P
0.52 (man, Chu-Cheow Lim, Franco Mazzanti, Heinz Schmidt,  Carlo Sequin and Bob Weiner.) 115.32 257.42 P
-0.59 (The Sather compiler was written in Sather by Chu-Cheow Lim and extended by Jeff Bilmes.) 115.32 245.42 P
0.04 (The Sather debugger was written by Jeff Bilmes and the Sather emacs programming envi-) 115.32 233.42 P
(ronment was written by Heinz Schmidt.) 115.32 221.42 T
FMENDPAGE
%%EndPage: "26" 27
%%Trailer
%%BoundingBox: 0 0 626.63 886.21
%%Pages: 26 1
%%DocumentFonts: Palatino-Italic
%%+ AvantGarde-Demi
%%+ AvantGarde-Book
%%+ Palatino-Bold
%%+ Palatino-Roman
%%+ Palatino-BoldItalic
%%+ Courier
