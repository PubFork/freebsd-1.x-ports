-- File: constants.sa
-- Author: Chu-Cheow Lim (clim@ICSI.Berkeley.EDU) and Jeff Bilmes
-- Copyright (C) International Computer Science Institute, 1990, 1991, 1992, 1993
--
-- COPYRIGHT NOTICE: This code is provided "AS IS" WITHOUT ANY WARRANTY
-- and is subject to the terms of the SATHER LIBRARY GENERAL PUBLIC
-- LICENSE contained in the file: "sather/doc/license.txt" of the Sather
-- distribution. The license is also available from ICSI, 1947 Center
-- St., Suite 600, Berkeley CA 94704, USA.
--
-- Changes: Heinz W. Schmidt (hws@csis.dit.csiro.au)
-- (c) Commonwealth Scientific and Industrial Research Organisation (CSIRO),
-- Australia, 1992, 1993.
-- The modifications are provided "AS IS" WITHOUT ANY WARRANTY and are subject
-- to the terms of the SATHER LIBRARY GENERAL PUBLIC LICENCE referred to above.
--*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--* FUNCTION: Encapsulates groups of constants.
--*
--* CLASSES: RESERVED_CLASS_NAMES, RESERVED_KEYWORD_NAMES,
--*          RESERVED_FEAT_NAMES, RESERVED_WORDS, RESERVED_CLASSES,
--*          C_TYPE_CONST, OP_INDICES, COMPILER_ACTIONS
--*
--* RCS: $Id: constants.sa,v 1.1 1994/02/12 03:21:50 hsu Exp $
--* HISTORY:
--* Last edited: Oct 31 14:06 1993 (hws)
--*  Oct 31 14:05 1993 (hws): hack to support "arg" for Sather 1.0 bootstrap
--*  Oct 24 23:15 1993 (hws): add include kwd
--*  Sep 28 12:10 1993 (hws): SELF_TYPE -> SAME
--*  Sep 27 10:23 1993 (hws): change to Sather 1 syntax: excpetion, raise, protect, against
--*  Feb 25 00:46 1993 (hws): typecase kwd 
--*  Feb 24 10:10 1993 (hws): make assertions names routines to call
--*  Feb 21 22:13 1993 (hws): add abstract kwd
--*  Feb 21 15:10 1993 (hws): add "undefine", "require", "ensure" kwd
--*  Feb 21 14:53 1993 (hws): change "alias" kwd to "define"
--*  Feb 22 14:27 1992 (hws): made initialize internal "_initialize"
--*  Feb 21 17:54 1992 (hws): rename duplicate -> alias to improve readability
--*      of compiler code.
--* Created: Wed Jun  6 14:38:31 1990 (clim)
--*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- (#) denote items which were predefined but are now not supported
--     by the compiler.  For convenience, they've been left as is.
--     Eg the keyword "inline" is now no longer recognized by the 
--     scanner, but remains mapped to the same integer.
--------------------------------------------------------------------

class RESERVED_CLASS_NAMES is
   -- Names of reserved/predefined classes.
   
   const array_classname:STR  := "ARRAY";
   const array2_classname:STR := "ARRAY2";
   const array3_classname:STR := "ARRAY3";
   const array4_classname:STR := "ARRAY4";
   const bool_classname:STR   := "BOOL";
   const c_classname:STR      := "C";
   const char_classname:STR   := "CHAR";
   const double_classname:STR := "DOUBLE";
   const file_classname:STR   := "FILE";
   const int_classname:STR    := "INT";
   const real_classname:STR   := "REAL";
   const self_type_classname:STR := "SAME";
   const str_classname:STR       := "STR";
   const str_cursor_classname:STR  := "STR_CURSOR";
   
-- Some other special class names
   const ob_classname:STR        := "OB";
   const sys_classname:STR       := "SYS";
   const fob_classname:STR       := "F_OB";
   const sux_classname:STR       := "SUX";
   const undefine_classname:STR  := "NAUGHT";

   const err_classname:STR       := "ERR";
   const in_classname:STR        := "IN";
   const out_classname:STR       := "OUT";

end; -- class RESERVED_CLASS_NAMES

--------------------------------------------------------------------

class RESERVED_KEYWORD_NAMES is
   -- Sather keywords.
   
   const and_kw_name:STR        := "and";
   const assert_kw_name:STR     := "assert";
   const attr_kw_name:STR       := "attr";
   const break_kw_name:STR      := "break!";
   const class_kw_name:STR      := "class";
   const constant_kw_name:STR   := "const";
   const debug_kw_name:STR      := "debug";
   const alias_kw_name:STR      := "define";
   const undefine_kw_name:STR   := "undefine";
   const require_kw_name:STR    := "pre";
   const ensure_kw_name:STR     := "post";
   const include_kw_name:STR    := "include";
   const invariant_kw_name:STR  := "invariant";
   const abstract_kw_name:STR   := "abstract";
   const else_kw_name:STR       := "else";
   const elsif_kw_name:STR      := "elsif";
   const end_kw_name:STR        := "end";
   const if_kw_name:STR         := "if";
   const inline_kw_name:STR     := "inline"; -- (#)
   const is_kw_name:STR         := "is";
   const loop_kw_name:STR       := "loop";
   const not_kw_name:STR        := "not";
   const or_kw_name:STR         := "or";
   const private_kw_name:STR    := "private";
   const protect_kw_name:STR    := "protect";
   const readonly_kw_name:STR   := "readonly";
   const against_kw_name:STR    := "against";
   const raise_kw_name:STR      := "raise";
   const return_kw_name:STR     := "return";
   const shared_kw_name:STR     := "shared";
   const switch_kw_name:STR     := "case";
   const typecase_kw_name:STR   := "typecase";
   const then_kw_name:STR       := "then";
   const until_kw_name:STR      := "until!";
   const when_kw_name:STR       := "when";
   const while_kw_name:STR      := "while!";
   
end; -- class RESERVED_KEYWORD_NAMES

--------------------------------------------------------------------
   
class RESERVED_FEAT_NAMES is
   -- More Sather keywords, related to predefined features.

   const asize_fname:STR      := "asize";
   const asize1_fname:STR     := "asize1";
   const asize2_fname:STR     := "asize2";
   const asize3_fname:STR     := "asize3";
   const asize4_fname:STR     := "asize4";
   const copy_fname:STR       := "copy";
   const deep_copy_fname:STR  := "deep_copy";
   const extend_fname:STR     := "extend";
   const init_fname:STR       := "initialize";
   const new_fname:STR        := "new";
   const type_fname:STR       := "type";

-- Reserved variables
   const res_vname:STR        := "res";
   const self_vname:STR       := "self";
   const exception_vname:STR  := "exception";
   const arg_vname:STR        := "arg";
   
-- Other kinds of reserved words
   const false_name:STR       := "false";
   const true_name:STR        := "true";
   const void_name:STR        := "void";
   
end; -- class RESERVED_FEAT_NAMES

--------------------------------------------------------------------

class RESERVED_WORDS is
   -- Name indices of reserved words.

   RESERVED_KEYWORD_NAMES;
   RESERVED_FEAT_NAMES;
   RESERVED_CLASS_NAMES;

-- The indices are the positions at which the strings are stored.
   const and_kw_ind:INT         := 1;
   const assert_kw_ind:INT      := 2;
   const break_kw_ind:INT       := 3;
   const class_kw_ind:INT       := 4;
   const constant_kw_ind:INT    := 5;
   const debug_kw_ind:INT       := 6;
   const else_kw_ind:INT        := 7;
   const elsif_kw_ind:INT       := 8;
   const end_kw_ind:INT         := 9;
   const if_kw_ind:INT          := 10;
   const inline_kw_ind:INT      := 11; -- (#)
   const is_kw_ind:INT          := 12;
   const loop_kw_ind:INT        := 13;
   const not_kw_ind:INT         := 14;
   const or_kw_ind:INT          := 15;
   const private_kw_ind:INT     := 16;
   const return_kw_ind:INT      := 17;
   const shared_kw_ind:INT      := 18;
   const switch_kw_ind:INT      := 19;
   const then_kw_ind:INT        := 20;
   const until_kw_ind:INT       := 21;
   const when_kw_ind:INT        := 22;
   
   const asize_ind:INT        := 23;
   const asize1_ind:INT       := 24;
   const asize2_ind:INT       := 25;
   const asize3_ind:INT       := 26;
   const asize4_ind:INT       := 27;
   const copy_ind:INT         := 28;
   const deep_copy_ind:INT    := 29;
   const extend_ind:INT       := 30;
   const new_ind:INT          := 31;
   const type_ind:INT         := 32;

-- Reserved variables
   const res_ind:INT          := 33;
   const self_ind:INT         := 34;
   
-- Other kinds of reserved words
   const false_ind:INT         := 35;
   const true_ind:INT          := 36;
   const void_ind:INT          := 37;

   const first_base_class_ind: INT := 38;

   const array_ind:INT    := 38;
   const array2_ind:INT   := 39;
   const array3_ind:INT   := 40;
   const array4_ind:INT   := 41;
   const bool_ind:INT     := 42;
   const c_ind:INT        := 43;
   const char_ind:INT     := 44;
   const double_ind:INT   := 45;
   const file_ind:INT     := 46;
   const int_ind:INT      := 47;
   const real_ind:INT     := 48;
   const self_type_ind:INT   := 49;
   const str_ind:INT         := 50;
   const str_cursor_ind:INT    := 51;
   
-- Some other special class names
   const ob_ind:INT          := 52;
   const sys_ind:INT         := 53;
   const fob_ind:INT         := 54;
   const undefine_ind:INT    := 55;

   const err_ind:INT         := 56;
   const in_ind:INT          := 57;
   const out_ind:INT         := 58;

   const sux_ind:INT         := 59;

   const last_base_class_ind:INT := 59;

   const exception_ind:INT   := 60;
   const init_ind:INT        := 61; 

   const alias_kw_ind:INT    := 62; -- (out of order for now)
   const undefine_kw_ind:INT := 63; 
   const require_kw_ind:INT  := 64; 
   const ensure_kw_ind:INT   := 65; 
   const abstract_kw_ind:INT := 66;
   const invariant_kw_ind:INT := 67;

   const raise_kw_ind:INT    := 68;
   const protect_kw_ind:INT  := 69;
   const against_kw_ind:INT  := 70;
   
   const typecase_kw_ind:INT := 71;
   const attr_kw_ind:INT     := 72;
   const readonly_kw_ind:INT := 73;
   const while_kw_ind:INT    := 74;
   const include_kw_ind:INT  := 75;
   const arg_ind:INT         := 76;

   const last_reserved_word_ind:INT := 76;

   
-- ++++++++++++++++++++++++++++++++++++++++++++++++++
   base_classname_p(i:INT):BOOL is
      -- Returns "true" if the index is name of a predefined class.
      res := (i >= first_base_class_ind) and
	     (i <= last_base_class_ind);
   end; -- base_classname_p

end; -- class RESERVED_WORDS

--------------------------------------------------------------------
   
class RESERVED_CLASSES is
   -- This defines the indices for all predefined classes
   const OB_ici:INT        := C::OB_ici;
   const ARRAY_ici:INT     := C::ARRAY_ici;
   const ARRAY2_ici:INT    := C::ARRAY2_ici;
   const ARRAY3_ici:INT    := C::ARRAY3_ici;
   const ARRAY4_ici:INT    := C::ARRAY4_ici;
   const BOOL_ici:INT      := C::BOOL_ici;
   const C_ici:INT         := C::C_ici;
   const CHAR_ici:INT      := C::CHAR_ici;
   const DOUBLE_ici:INT    := C::DOUBLE_ici;
   const ERR_ici:INT       := C::ERR_ici;
   const FILE_ici:INT      := C::FILE_ici;
   const IN_ici:INT        := C::IN_ici;
   const INT_ici:INT       := C::INT_ici;
   const OUT_ici:INT       := C::OUT_ici;
   const REAL_ici:INT      := C::REAL_ici;
   const SELF_TYPE_ici:INT := C::SELF_TYPE_ici;
   const STR_ici:INT       := C::STR_ici;
   const STR_CURSOR_ici:INT  := C::STR_CURSOR_ici;
   const SYS_ici:INT       := C::SYS_ici;
   const FOB_ici:INT       := C::FOB_ici;
   const SUX_ici:INT       := C::SUX_ici;
   const UNDEFINE_ici:INT  := C::UNDEFINE_ici;
   const LAST_PREDEF_ici:INT := C::LAST_PREDEF_ici;
   
end; -- class RESERVED_CLASSES

--------------------------------------------------------------------

class C is
   -- Interface to indices of predefined classes.
   
   shared OB_ici:INT;
   shared ARRAY_ici:INT;
   shared ARRAY2_ici:INT;
   shared ARRAY3_ici:INT;
   shared ARRAY4_ici:INT;
   shared BOOL_ici:INT;
   shared C_ici:INT;
   shared CHAR_ici:INT;
   shared DOUBLE_ici:INT;
   shared ERR_ici:INT;
   shared FILE_ici:INT;
   shared IN_ici:INT;
   shared INT_ici:INT;
   shared OUT_ici:INT;
   shared REAL_ici:INT;
   shared SELF_TYPE_ici:INT;
   shared STR_ici:INT;
   shared STR_CURSOR_ici:INT;
   shared SYS_ici:INT;
   shared FOB_ici:INT;
   shared SUX_ici:INT;
   shared UNDEFINE_ici:INT;
   shared LAST_PREDEF_ici:INT;
   
   shared GC_is_on_:BOOL;
end; -- class C

--------------------------------------------------------------------
   
class C_TYPE_CONST is
   -- Interface to C types (size, string name).
   
   const c_ptr:INT    := 1;
   const c_char:INT   := 2;
   const c_int:INT    := 3;
   const c_float:INT  := 4;
   const c_double:INT := 5;
   const c_void:INT   := 6;

-- Size in bytes
   const c_ptr_size:INT    := 4;
   const c_char_size:INT   := 1;
   const c_int_size:INT    := 4;
   const c_float_size:INT  := 4;
   const c_double_size:INT := 8;
   
   const c_ptr_name:STR   := "ptr";
   const c_char_name:STR  := "char";
   const c_int_name:STR   := "int";
   const c_float_name:STR := "float";
   const c_double_name:STR := "double";

end; -- class C_TYPE_CONST

--------------------------------------------------------------------

class OP_INDICES is
   -- Arithmetic/Comparison operators.
   -- This must be consistent with "ops.h" which is seen by the scanner.
   
   const not_op_ind:INT := 1;
   const lt_op_ind:INT := 2;
   const gt_op_ind:INT := 3;
   const le_op_ind:INT := 4;
   const ge_op_ind:INT := 5;
   const eq_op_ind:INT := 6;
   const ne_op_ind:INT := 7;
   const and_op_ind:INT := 8;
   const or_op_ind:INT := 9;
   const uminus_op_ind:INT := 10;
   const uplus_op_ind:INT := 11;
   const exp_op_ind:INT := 12;
   const plus_op_ind:INT := 13;
   const minus_op_ind:INT := 14;
   const mult_op_ind:INT := 15;
   const divide_op_ind:INT := 16;

end; -- class OP_INDICES

--------------------------------------------------------------------

class COMPILER_ACTIONS is
   -- An integer is encoded in the message file read by the compiler,
   -- which will then take appropriate according to given code.
   
   const stop_compile:INT := 1;
   const privilege_only:INT := 2;
   
end; -- class COMPILER_ACTIONS

--------------------------------------------------------------------

