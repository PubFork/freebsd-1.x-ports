
    	    	    Programmer's Notes
    	    	    ------------------

Some Random information (undoubtedly poorly organized) that might be
of some help to a programmer looking to comprehend this beast of a
software package.

    	    	    ------------------

If I'd known how much work this was going to be when I started it, I
probably wouldn't have.  ``How difficult could it be'' I thought, ``To
change the user-interface portion of the PD sc spreadsheet into
something more menu-ish''.

    	    	    ------------------
HIST:
  This was originally based upon the Public Domain spreadshet ``sc'',
version 6.19.  Later, I merged in some/most of the patches for the
6.21 release of sc.

    	    	    ------------------
COMMENTS:

  When making modifications to a file that I otherwise hardly touched,
  (For example: 'cmds.c')  I would insert comments, detailing my
  changes.  Usually I would distinguish these comments with either my
  name (ie: "Art Mulder Modified") or with "**" comments.

  An example from 'cmds.c':

	/** void closecol (cs, numcol) **/
	void closecol (startcol, endcol)

  The double-star  (**) indicate a comment by myself.  In this case, it
  is a rather terse comment.  I commented out the old function
  definition, and put in a new one.

  In my opinion, the original code is painfully undercommented.
  However, this fact will usually help you find code that I have
  changed in files otherwise untouched, since I would then comment the
  part I changed.  (I freely admit that I tend to go overboard with the
  comments.  I prefer a few too much, over too few.  All IMHO of course!)

    	    	    ------------------
PARSER AND 'line':

  The parser in gram.y is the heart of the program.

  Simplistic explanation:  The program works by building commands.  These
  commands are stored in the global string variable 'line', which is then
  processed, interpreted, and executed by the parser.

  Example:

    To load a Spreadsheet file into memory, the FileLoad() function
    in menu_file.c stores a string such as
	get ["source"] myfile.ss
    in the global variable `line'.

    Then it calls the parser to process `line'.  The parser interprets the
    command stored in `line' and loads the spreadsheet file "myfile.ss".

  The advantage to this set up is that the spreadsheet data files are just
  ascii files containing all these parser commands/instructions.  So,
  loading a spreadsheet file is a simple matter of reading in all the lines
  in the data file and passing them to the parser one at a time.


    	    	    ------------------

    	    	    ------------------

    	    	    ------------------

    	    	    ------------------
